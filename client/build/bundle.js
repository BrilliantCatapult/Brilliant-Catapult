/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var WebAPIUtils = __webpack_require__(1);
	var ExampleData = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./d3Data\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var React = __webpack_require__(10);


	var Router = __webpack_require__(166);
	var Link = Router.Link;
	//var History = require('react-router/lib/BrowserHistory');
	var Route = Router.Route;
	//var History = Router.BrowserHistory;
	var RouteHandler = Router.RouteHandler;

	var Statistics = __webpack_require__(205);
	var MapPage = __webpack_require__(226);
	var Predictions = __webpack_require__(232);


	var App = React.createClass({displayName: "App",
	  render:function () {
	    return (
	      React.createElement("div", null, 
	        React.createElement("div", {class: "container"}, 
	            React.createElement("h1", null, "Data Cycles"), 
	            React.createElement("h3", null, "Bay Area Bike Share data visualization"), 
	            React.createElement("nav", {class: "menu right"}, 
	              React.createElement(Link, {to: "map", params: {userId: 1}}, "Map"), 
	              React.createElement(Link, {to: "statistics", params: {userId: 1}}, "Statistics"), 
	              React.createElement(Link, {to: "predictions", params: {userId: 1}}, "Predications")
	            )
	         ), 
	        React.createElement(RouteHandler, null)
	      )
	    )
	  }
	});


	// declare our routes and their hierarchy
	var routes = (
	  React.createElement(Route, {handler: App, location: "history"}, 
	    React.createElement(Route, {name: "statistics", path: "statistics", handler: Statistics}), 
	    React.createElement(Route, {name: "map", path: "map", handler: MapPage}), 
	    React.createElement(Route, {name: "predictions", path: "predictions", handler: Predictions})
	  )
	);


	Router.run(routes, Router.HashLocation, function(Root) {
	  React.render(React.createElement(Root, null),  document.getElementById('react'));
	});


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	//
	var d3 = __webpack_require__(2);

	var Utils = {};

	Utils.pluck = function(obj, key){
	  return obj.map(function(element, index){
	    return element[key];
	  });
	};

	// have all server queries here!
	Utils.getAllMessages = function(){
	  // gets messages from localstorage.
	  // as if from database.
	  var saved_messages = JSON.parse(localStorage.getItem('saved_messages'));
	  // have messages, now call action.
	  D3ServerAction.receiveAll(saved_messages, 1);
	};

	Utils.getAllOtherMessages = function(){
	  var saved_messages = JSON.parse(localStorage.getItem('saved_messages2'));
	  // have messages, now call action.
	  D3ServerAction.receiveAll(saved_messages, 2);
	};
	Utils.getBubbleData = function(id, start_date, end_date){
	  var D3ServerAction = __webpack_require__(3);
	  if(id === "4"){
	    d3.json("/api/bikes?order=desc&start_date="+start_date+"&end_date="+end_date, function(data){
	      data = data.aggregations.filter_by_date.rides_per_bike.buckets;
	      D3ServerAction.receiveBubble(data, id);
	    });
	  }
	};
	Utils.getLineData = function(id, start_date, end_date){
	  var D3ServerAction = __webpack_require__(3);
	  if(id === "5"){
	    
	    d3.xhr('/api/trip/station_activity')
	        .header("Content-Type", "application/json")
	        .post(
	            JSON.stringify({start_date: start_date, end_date: end_date}),
	            function(err, rawData){
	                var array = JSON.parse(rawData.response).aggregations.activity_per_station.buckets;
	                    D3ServerAction.receiveLine(array, id);
	                }
	        );
	  }
	};
	Utils.getServerData = function(id, start_date, end_date){
	  console.log("returning for id ", id);
	  // instead get from db based on id, and promisify!!
	  //var saved_messages = JSON.parse(localStorage.getItem('saved_messages' + id));
	  var D3ServerAction = __webpack_require__(3);
	  if(id === "1"){
	    d3.json("/api/bikes?size=10&order=desc&start_date="+start_date+"&end_date="+end_date, function(data){
	      data = data.aggregations.filter_by_date.rides_per_bike.buckets;
	      D3ServerAction.receiveAll(data, id);
	    });
	  }
	  else if(id==="2"){
	    d3.json("/api/bikes?size=10&order=asc&start_date="+start_date+"&end_date="+end_date, function(data){
	      data = data.aggregations.filter_by_date.rides_per_bike.buckets;
	      D3ServerAction.receiveAll(data, id);
	    }); 
	  }
	  else if(id==="3"){
	    d3.json("/api/bikes?order=desc&start_date="+start_date+"&end_date="+end_date, function(data){
	      var group = 70;
	      data = data.aggregations.filter_by_date.rides_per_bike.buckets;
	      g=[];
	      var num = 1;
	      while(data.length>0){
	        var arr = Utils.pluck(data.splice(0, group), "doc_count");
	        var value = arr.reduce(function(memo, element){
	          return memo + element;
	        }, 0)/group; // avg
	        g.push({doc_count: value, key: num});
	        num++;
	      }
	      data = g;
	      D3ServerAction.receiveAll(data, id);
	    }); 
	    
	  } 
	  // have messages, now call action.
	  // return saved_messages;
	  //D3ServerAction.readyToReceive(saved_messages, id); 
	};


	module.exports = Utils; 

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.6"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.zip = function() {
	    if (!(n = arguments.length)) return [];
	    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
	      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
	        zip[j] = arguments[j][i];
	      }
	    }
	    return zips;
	  };
	  function d3_zipLength(d) {
	    return d.length;
	  }
	  d3.transpose = function(matrix) {
	    return d3.zip.apply(d3, matrix);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: "http://www.w3.org/1999/xhtml",
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0) {
	        prefix = name.slice(0, i);
	        name = name.slice(i + 1);
	      }
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace ? document.createElementNS(namespace, name) : document.createElement(name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {
	            exitNodes[i] = node;
	          } else {
	            nodeByKeyValue.set(keyValue, node);
	          }
	          keyValues[i] = keyValue;
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = nodes;
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged && d3.event.target === target);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
	    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
	    function interpolate(t) {
	      var s = t * S;
	      if (dr) {
	        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      }
	      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
	    }
	    interpolate.duration = S * 1e3;
	    return interpolate;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: +_
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged && d3.event.target === target);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    format = format.toLowerCase();
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format);
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      f: false,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  };
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now();
	    d3_timer_active = d3_timer_queueHead;
	    while (d3_timer_active) {
	      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
	      d3_timer_active = d3_timer_active.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.f) {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      } else {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	        exponent = false;

	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;

	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;

	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;

	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
	    if (ta[0] != tb[0] || ta[1] != tb[1]) {
	      s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: 1,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: 3,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    } else {
	      s.push("");
	    }
	    if (ra != rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(s.pop() + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(s.pop() + "rotate(" + rb + ")");
	    }
	    if (wa != wb) {
	      q.push({
	        i: s.push(s.pop() + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(s.pop() + "skewX(" + wb + ")");
	    }
	    if (ka[0] != kb[0] || ka[1] != kb[1]) {
	      n = s.push(s.pop() + "scale(", null, ",", null, ")");
	      q.push({
	        i: n - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: n - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] != 1 || kb[1] != 1) {
	      s.push(s.pop() + "scale(" + kb + ")");
	    }
	    n = q.length;
	    return function(t) {
	      var i = -1, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: (x - x0) / k
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight / (t.weight + s.weight));
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) alpha = x; else alpha = 0;
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        d3.timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), k = (da - n * pa) / d3.sum(values), index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = 0;
	      root.y = 0;
	      root.dx = size[0];
	      root.dy = size[1];
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
	      Math.floor), e;
	      return function(d) {
	        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if ((rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	        if (x1 != null) {
	          var rc1 = Math.min(rc, (r1 - lc) / (kc + 1)), t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var rc0 = Math.min(rc, (r0 - lc) / (kc - 1)), t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(r * r * d2 - D * D), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.join("L");
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return d3_svg_lineLinear(points) + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, active;
	      if ((lock = this[ns]) && (active = lock[lock.active])) {
	        if (--lock.count) delete lock[lock.active]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id];
	    if (!transition) {
	      var time = inherit.time;
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	      d3.timer(function(elapsed) {
	        var delay = transition.delay, duration, ease, timer = d3_timer_active, tweened = [];
	        timer.t = delay + time;
	        if (delay <= elapsed) return start(elapsed - delay);
	        timer.c = start;
	        function start(elapsed) {
	          if (lock.active > id) return stop();
	          var active = lock[lock.active];
	          if (active) {
	            --lock.count;
	            delete lock[lock.active];
	            active.event && active.event.interrupt.call(node, node.__data__, active.index);
	          }
	          lock.active = id;
	          transition.event && transition.event.start.call(node, node.__data__, i);
	          transition.tween.forEach(function(key, value) {
	            if (value = value.call(node, node.__data__, i)) {
	              tweened.push(value);
	            }
	          });
	          ease = transition.ease;
	          duration = transition.duration;
	          d3.timer(function() {
	            timer.c = tick(elapsed || 1) ? d3_true : tick;
	            return 1;
	          }, 0, time);
	        }
	        function tick(elapsed) {
	          if (lock.active !== id) return 1;
	          var t = elapsed / duration, e = ease(t), n = tweened.length;
	          while (n > 0) {
	            tweened[--n].call(node, e);
	          }
	          if (t >= 1) {
	            transition.event && transition.event.end.call(node, node.__data__, i);
	            return stop();
	          }
	        }
	        function stop() {
	          if (--lock.count) delete lock[id]; else delete node[ns];
	          return 1;
	        }
	      }, 0, time);
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = arguments;
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3;
	  this.d3 = d3;
	}();

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var D3Dispatcher = __webpack_require__(4);
	var Constants = __webpack_require__(8);
	var WebAPIUtils = __webpack_require__(1);
	 
	var actions = Constants.actions;
	 
	module.exports = {
	  receiveAll: function (data, data_for) {
	    D3Dispatcher.dispatch({
	      type: actions.RECEIVE_DATA,
	      data: data,
	      data_for: data_for
	    });
	  },
	  receiveBubble: function (data, data_for) {
	    D3Dispatcher.dispatch({
	      type: actions.RECEIVE_BUBBLE_DATA,
	      data: data,
	      data_for: data_for
	    });
	  },
	  receiveLine: function (data, data_for) {
	    D3Dispatcher.dispatch({
	      type: actions.RECEIVE_LINE_DATA,
	      data: data,
	      data_for: data_for
	    });
	  },
	  readyToReceive: function(data_for, start_date, end_date) {
	    // promisify this.. and .then.. do dispatch.
	    //var data = 
	    WebAPIUtils.getServerData(data_for, start_date, end_date);
	    // console.log("DATA IS ", data);
	    // D3Dispatcher.dispatch({
	    //   type: actions.RECEIVE_DATA,
	    //   data: data, 
	    //   data_for: data_for
	    // }); 
	  }, 

	  readyToReceiveBubble: function(data_for, start_date, end_date) {
	    // promisify this.. and .then.. do dispatch.
	    WebAPIUtils.getBubbleData(data_for, start_date, end_date);
	    // var data = WebAPIUtils.getServerData(data_for);
	    // console.log("DATA IS", data);
	    // D3Dispatcher.dispatch({
	    //   type: actions.RECEIVE_BUBBLE_DATA,
	    //   data: data,
	    //   data_for: data_for
	    // });
	  },

	  readyToReceiveLine: function(data_for, start_date, end_date) {
	    // promisify this.. and .then.. do dispatch.
	    WebAPIUtils.getLineData(data_for, start_date, end_date);
	    // console.log("DATA IS bb", data);
	    // D3Dispatcher.dispatch({
	    //   type: actions.RECEIVE_LINE_DATA,
	    //   data: data,
	    //   data_for: data_for
	    // });
	  }
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var Dispatcher = __webpack_require__(5).Dispatcher;

	module.exports = new Dispatcher();

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	module.exports.Dispatcher = __webpack_require__(6)


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Dispatcher
	 * @typechecks
	 */

	"use strict";

	var invariant = __webpack_require__(7);

	var _lastID = 1;
	var _prefix = 'ID_';

	/**
	 * Dispatcher is used to broadcast payloads to registered callbacks. This is
	 * different from generic pub-sub systems in two ways:
	 *
	 *   1) Callbacks are not subscribed to particular events. Every payload is
	 *      dispatched to every registered callback.
	 *   2) Callbacks can be deferred in whole or part until other callbacks have
	 *      been executed.
	 *
	 * For example, consider this hypothetical flight destination form, which
	 * selects a default city when a country is selected:
	 *
	 *   var flightDispatcher = new Dispatcher();
	 *
	 *   // Keeps track of which country is selected
	 *   var CountryStore = {country: null};
	 *
	 *   // Keeps track of which city is selected
	 *   var CityStore = {city: null};
	 *
	 *   // Keeps track of the base flight price of the selected city
	 *   var FlightPriceStore = {price: null}
	 *
	 * When a user changes the selected city, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'city-update',
	 *     selectedCity: 'paris'
	 *   });
	 *
	 * This payload is digested by `CityStore`:
	 *
	 *   flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'city-update') {
	 *       CityStore.city = payload.selectedCity;
	 *     }
	 *   });
	 *
	 * When the user selects a country, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'country-update',
	 *     selectedCountry: 'australia'
	 *   });
	 *
	 * This payload is digested by both stores:
	 *
	 *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       CountryStore.country = payload.selectedCountry;
	 *     }
	 *   });
	 *
	 * When the callback to update `CountryStore` is registered, we save a reference
	 * to the returned token. Using this token with `waitFor()`, we can guarantee
	 * that `CountryStore` is updated before the callback that updates `CityStore`
	 * needs to query its data.
	 *
	 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       // `CountryStore.country` may not be updated.
	 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
	 *       // `CountryStore.country` is now guaranteed to be updated.
	 *
	 *       // Select the default city for the new country
	 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
	 *     }
	 *   });
	 *
	 * The usage of `waitFor()` can be chained, for example:
	 *
	 *   FlightPriceStore.dispatchToken =
	 *     flightDispatcher.register(function(payload) {
	 *       switch (payload.actionType) {
	 *         case 'country-update':
	 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
	 *           FlightPriceStore.price =
	 *             getFlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *
	 *         case 'city-update':
	 *           FlightPriceStore.price =
	 *             FlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *     }
	 *   });
	 *
	 * The `country-update` payload will be guaranteed to invoke the stores'
	 * registered callbacks in order: `CountryStore`, `CityStore`, then
	 * `FlightPriceStore`.
	 */

	  function Dispatcher() {
	    this.$Dispatcher_callbacks = {};
	    this.$Dispatcher_isPending = {};
	    this.$Dispatcher_isHandled = {};
	    this.$Dispatcher_isDispatching = false;
	    this.$Dispatcher_pendingPayload = null;
	  }

	  /**
	   * Registers a callback to be invoked with every dispatched payload. Returns
	   * a token that can be used with `waitFor()`.
	   *
	   * @param {function} callback
	   * @return {string}
	   */
	  Dispatcher.prototype.register=function(callback) {
	    var id = _prefix + _lastID++;
	    this.$Dispatcher_callbacks[id] = callback;
	    return id;
	  };

	  /**
	   * Removes a callback based on its token.
	   *
	   * @param {string} id
	   */
	  Dispatcher.prototype.unregister=function(id) {
	    invariant(
	      this.$Dispatcher_callbacks[id],
	      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',
	      id
	    );
	    delete this.$Dispatcher_callbacks[id];
	  };

	  /**
	   * Waits for the callbacks specified to be invoked before continuing execution
	   * of the current callback. This method should only be used by a callback in
	   * response to a dispatched payload.
	   *
	   * @param {array<string>} ids
	   */
	  Dispatcher.prototype.waitFor=function(ids) {
	    invariant(
	      this.$Dispatcher_isDispatching,
	      'Dispatcher.waitFor(...): Must be invoked while dispatching.'
	    );
	    for (var ii = 0; ii < ids.length; ii++) {
	      var id = ids[ii];
	      if (this.$Dispatcher_isPending[id]) {
	        invariant(
	          this.$Dispatcher_isHandled[id],
	          'Dispatcher.waitFor(...): Circular dependency detected while ' +
	          'waiting for `%s`.',
	          id
	        );
	        continue;
	      }
	      invariant(
	        this.$Dispatcher_callbacks[id],
	        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',
	        id
	      );
	      this.$Dispatcher_invokeCallback(id);
	    }
	  };

	  /**
	   * Dispatches a payload to all registered callbacks.
	   *
	   * @param {object} payload
	   */
	  Dispatcher.prototype.dispatch=function(payload) {
	    invariant(
	      !this.$Dispatcher_isDispatching,
	      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'
	    );
	    this.$Dispatcher_startDispatching(payload);
	    try {
	      for (var id in this.$Dispatcher_callbacks) {
	        if (this.$Dispatcher_isPending[id]) {
	          continue;
	        }
	        this.$Dispatcher_invokeCallback(id);
	      }
	    } finally {
	      this.$Dispatcher_stopDispatching();
	    }
	  };

	  /**
	   * Is this Dispatcher currently dispatching.
	   *
	   * @return {boolean}
	   */
	  Dispatcher.prototype.isDispatching=function() {
	    return this.$Dispatcher_isDispatching;
	  };

	  /**
	   * Call the callback stored with the given id. Also do some internal
	   * bookkeeping.
	   *
	   * @param {string} id
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {
	    this.$Dispatcher_isPending[id] = true;
	    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);
	    this.$Dispatcher_isHandled[id] = true;
	  };

	  /**
	   * Set up bookkeeping needed when dispatching.
	   *
	   * @param {object} payload
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {
	    for (var id in this.$Dispatcher_callbacks) {
	      this.$Dispatcher_isPending[id] = false;
	      this.$Dispatcher_isHandled[id] = false;
	    }
	    this.$Dispatcher_pendingPayload = payload;
	    this.$Dispatcher_isDispatching = true;
	  };

	  /**
	   * Clear bookkeeping used for dispatching.
	   *
	   * @internal
	   */
	  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {
	    this.$Dispatcher_pendingPayload = null;
	    this.$Dispatcher_isDispatching = false;
	  };


	module.exports = Dispatcher;


/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var constants = {};
	var keyMirror = __webpack_require__(9);

	constants.actions = keyMirror({
	  RECEIVE_BIKE_DATA: null,
	  RECEIVE_DATA: null,
	  LOAD_DATA: null,
	  RECEIVE_LINE_DATA: null
	});



	module.exports = constants;

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	"use strict";

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  if (!(obj instanceof Object && !Array.isArray(obj))) {
	    throw new Error('keyMirror(...): Argument must be an object.');
	  }
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(11);


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(13);
	var ReactChildren = __webpack_require__(17);
	var ReactComponent = __webpack_require__(31);
	var ReactClass = __webpack_require__(46);
	var ReactContext = __webpack_require__(21);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactElement = __webpack_require__(20);
	var ReactElementValidator = __webpack_require__(39);
	var ReactDOM = __webpack_require__(49);
	var ReactDOMTextComponent = __webpack_require__(51);
	var ReactDefaultInjection = __webpack_require__(100);
	var ReactInstanceHandles = __webpack_require__(29);
	var ReactMount = __webpack_require__(76);
	var ReactPerf = __webpack_require__(35);
	var ReactPropTypes = __webpack_require__(131);
	var ReactReconciler = __webpack_require__(36);
	var ReactServerRendering = __webpack_require__(163);

	var assign = __webpack_require__(22);
	var findDOMNode = __webpack_require__(120);
	var onlyChild = __webpack_require__(165);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(60);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);

	var invariant = __webpack_require__(16);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(15);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(18);
	var ReactFragment = __webpack_require__(19);

	var traverseAllChildren = __webpack_require__(27);
	var warning = __webpack_require__(24);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(20);

	var warning = __webpack_require__(24);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(21);
	var ReactCurrentOwner = __webpack_require__(26);

	var assign = __webpack_require__(22);
	var warning = __webpack_require__(24);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(22);
	var emptyObject = __webpack_require__(23);
	var warning = __webpack_require__(24);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 22 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(25);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 26 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(20);
	var ReactFragment = __webpack_require__(19);
	var ReactInstanceHandles = __webpack_require__(29);

	var getIteratorFn = __webpack_require__(28);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(30);

	var invariant = __webpack_require__(16);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(32);

	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(44);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactElement = __webpack_require__(20);
	var ReactInstanceMap = __webpack_require__(45);
	var ReactUpdates = __webpack_require__(33);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(34);
	var PooledClass = __webpack_require__(18);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactPerf = __webpack_require__(35);
	var ReactReconciler = __webpack_require__(36);
	var Transaction = __webpack_require__(43);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(18);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(37);
	var ReactElementValidator = __webpack_require__(39);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(38);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(20);
	var ReactFragment = __webpack_require__(19);
	var ReactPropTypeLocations = __webpack_require__(40);
	var ReactPropTypeLocationNames = __webpack_require__(41);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactNativeComponent = __webpack_require__(42);

	var getIteratorFn = __webpack_require__(28);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(15);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(31);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactElement = __webpack_require__(20);
	var ReactErrorUtils = __webpack_require__(47);
	var ReactInstanceMap = __webpack_require__(45);
	var ReactLifeCycle = __webpack_require__(44);
	var ReactPropTypeLocations = __webpack_require__(40);
	var ReactPropTypeLocationNames = __webpack_require__(41);
	var ReactUpdateQueue = __webpack_require__(32);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);
	var keyMirror = __webpack_require__(15);
	var keyOf = __webpack_require__(48);
	var warning = __webpack_require__(24);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(20);
	var ReactElementValidator = __webpack_require__(39);

	var mapObject = __webpack_require__(50);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(52);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(56);
	var ReactDOMComponent = __webpack_require__(96);

	var assign = __webpack_require__(22);
	var escapeTextContentForBrowser = __webpack_require__(55);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(53);

	var quoteAttributeValueForBrowser = __webpack_require__(54);
	var warning = __webpack_require__(24);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(16);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(55);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 55 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(57);
	var ReactMount = __webpack_require__(76);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(58);
	var DOMChildrenOperations = __webpack_require__(67);
	var DOMPropertyOperations = __webpack_require__(52);
	var ReactMount = __webpack_require__(76);
	var ReactPerf = __webpack_require__(35);

	var invariant = __webpack_require__(16);
	var setInnerHTML = __webpack_require__(75);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(59);
	var ExecutionEnvironment = __webpack_require__(60);

	var camelizeStyleName = __webpack_require__(61);
	var dangerousStyleValue = __webpack_require__(63);
	var hyphenateStyleName = __webpack_require__(64);
	var memoizeStringOnly = __webpack_require__(66);
	var warning = __webpack_require__(24);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(62);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 62 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(59);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(65);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 66 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(68);
	var ReactMultiChildUpdateTypes = __webpack_require__(73);

	var setTextContent = __webpack_require__(74);
	var invariant = __webpack_require__(16);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(60);

	var createNodesFromMarkup = __webpack_require__(69);
	var emptyFunction = __webpack_require__(25);
	var getMarkupWrap = __webpack_require__(72);
	var invariant = __webpack_require__(16);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(60);

	var createArrayFromMixed = __webpack_require__(70);
	var getMarkupWrap = __webpack_require__(72);
	var invariant = __webpack_require__(16);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(71);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(16);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(60);

	var invariant = __webpack_require__(16);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(15);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(60);
	var escapeTextContentForBrowser = __webpack_require__(55);
	var setInnerHTML = __webpack_require__(75);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(60);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(53);
	var ReactBrowserEventEmitter = __webpack_require__(77);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactElement = __webpack_require__(20);
	var ReactElementValidator = __webpack_require__(39);
	var ReactEmptyComponent = __webpack_require__(85);
	var ReactInstanceHandles = __webpack_require__(29);
	var ReactInstanceMap = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(86);
	var ReactPerf = __webpack_require__(35);
	var ReactReconciler = __webpack_require__(36);
	var ReactUpdateQueue = __webpack_require__(32);
	var ReactUpdates = __webpack_require__(33);

	var emptyObject = __webpack_require__(23);
	var containsNode = __webpack_require__(88);
	var getReactRootElementInContainer = __webpack_require__(91);
	var instantiateReactComponent = __webpack_require__(92);
	var invariant = __webpack_require__(16);
	var setInnerHTML = __webpack_require__(75);
	var shouldUpdateReactComponent = __webpack_require__(95);
	var warning = __webpack_require__(24);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPluginHub = __webpack_require__(78);
	var EventPluginRegistry = __webpack_require__(79);
	var ReactEventEmitterMixin = __webpack_require__(82);
	var ViewportMetrics = __webpack_require__(83);

	var assign = __webpack_require__(22);
	var isEventSupported = __webpack_require__(84);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(79);
	var EventPluginUtils = __webpack_require__(13);

	var accumulateInto = __webpack_require__(80);
	var forEachAccumulated = __webpack_require__(81);
	var invariant = __webpack_require__(16);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(78);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(60);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(20);
	var ReactInstanceMap = __webpack_require__(45);

	var invariant = __webpack_require__(16);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(87);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 87 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(89);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(90);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 90 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(93);
	var ReactEmptyComponent = __webpack_require__(85);
	var ReactNativeComponent = __webpack_require__(42);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(94);
	var ReactContext = __webpack_require__(21);
	var ReactCurrentOwner = __webpack_require__(26);
	var ReactElement = __webpack_require__(20);
	var ReactElementValidator = __webpack_require__(39);
	var ReactInstanceMap = __webpack_require__(45);
	var ReactLifeCycle = __webpack_require__(44);
	var ReactNativeComponent = __webpack_require__(42);
	var ReactPerf = __webpack_require__(35);
	var ReactPropTypeLocations = __webpack_require__(40);
	var ReactPropTypeLocationNames = __webpack_require__(41);
	var ReactReconciler = __webpack_require__(36);
	var ReactUpdates = __webpack_require__(33);

	var assign = __webpack_require__(22);
	var emptyObject = __webpack_require__(23);
	var invariant = __webpack_require__(16);
	var shouldUpdateReactComponent = __webpack_require__(95);
	var warning = __webpack_require__(24);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(16);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(24);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(58);
	var DOMProperty = __webpack_require__(53);
	var DOMPropertyOperations = __webpack_require__(52);
	var ReactBrowserEventEmitter = __webpack_require__(77);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(56);
	var ReactMount = __webpack_require__(76);
	var ReactMultiChild = __webpack_require__(97);
	var ReactPerf = __webpack_require__(35);

	var assign = __webpack_require__(22);
	var escapeTextContentForBrowser = __webpack_require__(55);
	var invariant = __webpack_require__(16);
	var isEventSupported = __webpack_require__(84);
	var keyOf = __webpack_require__(48);
	var warning = __webpack_require__(24);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(94);
	var ReactMultiChildUpdateTypes = __webpack_require__(73);

	var ReactReconciler = __webpack_require__(36);
	var ReactChildReconciler = __webpack_require__(98);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(36);

	var flattenChildren = __webpack_require__(99);
	var instantiateReactComponent = __webpack_require__(92);
	var shouldUpdateReactComponent = __webpack_require__(95);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(27);
	var warning = __webpack_require__(24);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(101);
	var ChangeEventPlugin = __webpack_require__(109);
	var ClientReactRootIndex = __webpack_require__(111);
	var DefaultEventPluginOrder = __webpack_require__(112);
	var EnterLeaveEventPlugin = __webpack_require__(113);
	var ExecutionEnvironment = __webpack_require__(60);
	var HTMLDOMPropertyConfig = __webpack_require__(117);
	var MobileSafariClickEventPlugin = __webpack_require__(118);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(56);
	var ReactDefaultBatchingStrategy = __webpack_require__(121);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMButton = __webpack_require__(122);
	var ReactDOMForm = __webpack_require__(125);
	var ReactDOMImg = __webpack_require__(127);
	var ReactDOMIDOperations = __webpack_require__(57);
	var ReactDOMIframe = __webpack_require__(128);
	var ReactDOMInput = __webpack_require__(129);
	var ReactDOMOption = __webpack_require__(132);
	var ReactDOMSelect = __webpack_require__(133);
	var ReactDOMTextarea = __webpack_require__(134);
	var ReactDOMTextComponent = __webpack_require__(51);
	var ReactElement = __webpack_require__(20);
	var ReactEventListener = __webpack_require__(135);
	var ReactInjection = __webpack_require__(138);
	var ReactInstanceHandles = __webpack_require__(29);
	var ReactMount = __webpack_require__(76);
	var ReactReconcileTransaction = __webpack_require__(139);
	var SelectEventPlugin = __webpack_require__(145);
	var ServerReactRootIndex = __webpack_require__(147);
	var SimpleEventPlugin = __webpack_require__(148);
	var SVGDOMPropertyConfig = __webpack_require__(157);

	var createFullPageComponent = __webpack_require__(158);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(159);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPropagators = __webpack_require__(102);
	var ExecutionEnvironment = __webpack_require__(60);
	var FallbackCompositionState = __webpack_require__(103);
	var SyntheticCompositionEvent = __webpack_require__(105);
	var SyntheticInputEvent = __webpack_require__(108);

	var keyOf = __webpack_require__(48);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPluginHub = __webpack_require__(78);

	var accumulateInto = __webpack_require__(80);
	var forEachAccumulated = __webpack_require__(81);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(18);

	var assign = __webpack_require__(22);
	var getTextContentAccessor = __webpack_require__(104);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(60);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(106);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(18);

	var assign = __webpack_require__(22);
	var emptyFunction = __webpack_require__(25);
	var getEventTarget = __webpack_require__(107);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 107 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(106);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPluginHub = __webpack_require__(78);
	var EventPropagators = __webpack_require__(102);
	var ExecutionEnvironment = __webpack_require__(60);
	var ReactUpdates = __webpack_require__(33);
	var SyntheticEvent = __webpack_require__(106);

	var isEventSupported = __webpack_require__(84);
	var isTextInputElement = __webpack_require__(110);
	var keyOf = __webpack_require__(48);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 111 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(48);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPropagators = __webpack_require__(102);
	var SyntheticMouseEvent = __webpack_require__(114);

	var ReactMount = __webpack_require__(76);
	var keyOf = __webpack_require__(48);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);
	var ViewportMetrics = __webpack_require__(83);

	var getEventModifierState = __webpack_require__(116);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(106);

	var getEventTarget = __webpack_require__(107);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(53);
	var ExecutionEnvironment = __webpack_require__(60);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);

	var emptyFunction = __webpack_require__(25);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(120);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(26);
	var ReactInstanceMap = __webpack_require__(45);
	var ReactMount = __webpack_require__(76);

	var invariant = __webpack_require__(16);
	var isNode = __webpack_require__(90);
	var warning = __webpack_require__(24);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(33);
	var Transaction = __webpack_require__(43);

	var assign = __webpack_require__(22);
	var emptyFunction = __webpack_require__(25);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(123);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);

	var keyMirror = __webpack_require__(15);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(124);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var LocalEventTrapMixin = __webpack_require__(126);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(77);

	var accumulateInto = __webpack_require__(80);
	var forEachAccumulated = __webpack_require__(81);
	var invariant = __webpack_require__(16);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var LocalEventTrapMixin = __webpack_require__(126);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var LocalEventTrapMixin = __webpack_require__(126);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(123);
	var DOMPropertyOperations = __webpack_require__(52);
	var LinkedValueUtils = __webpack_require__(130);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);
	var ReactMount = __webpack_require__(76);
	var ReactUpdates = __webpack_require__(33);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(131);

	var invariant = __webpack_require__(16);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(20);
	var ReactFragment = __webpack_require__(19);
	var ReactPropTypeLocationNames = __webpack_require__(41);

	var emptyFunction = __webpack_require__(25);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);

	var warning = __webpack_require__(24);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(123);
	var LinkedValueUtils = __webpack_require__(130);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);
	var ReactUpdates = __webpack_require__(33);

	var assign = __webpack_require__(22);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(123);
	var DOMPropertyOperations = __webpack_require__(52);
	var LinkedValueUtils = __webpack_require__(130);
	var ReactBrowserComponentMixin = __webpack_require__(119);
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);
	var ReactUpdates = __webpack_require__(33);

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);

	var warning = __webpack_require__(24);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(136);
	var ExecutionEnvironment = __webpack_require__(60);
	var PooledClass = __webpack_require__(18);
	var ReactInstanceHandles = __webpack_require__(29);
	var ReactMount = __webpack_require__(76);
	var ReactUpdates = __webpack_require__(33);

	var assign = __webpack_require__(22);
	var getEventTarget = __webpack_require__(107);
	var getUnboundedScrollPosition = __webpack_require__(137);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(25);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(53);
	var EventPluginHub = __webpack_require__(78);
	var ReactComponentEnvironment = __webpack_require__(94);
	var ReactClass = __webpack_require__(46);
	var ReactEmptyComponent = __webpack_require__(85);
	var ReactBrowserEventEmitter = __webpack_require__(77);
	var ReactNativeComponent = __webpack_require__(42);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactPerf = __webpack_require__(35);
	var ReactRootIndex = __webpack_require__(30);
	var ReactUpdates = __webpack_require__(33);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(34);
	var PooledClass = __webpack_require__(18);
	var ReactBrowserEventEmitter = __webpack_require__(77);
	var ReactInputSelection = __webpack_require__(140);
	var ReactPutListenerQueue = __webpack_require__(144);
	var Transaction = __webpack_require__(43);

	var assign = __webpack_require__(22);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(141);

	var containsNode = __webpack_require__(88);
	var focusNode = __webpack_require__(124);
	var getActiveElement = __webpack_require__(143);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(60);

	var getNodeForCharacterOffset = __webpack_require__(142);
	var getTextContentAccessor = __webpack_require__(104);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(18);
	var ReactBrowserEventEmitter = __webpack_require__(77);

	var assign = __webpack_require__(22);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPropagators = __webpack_require__(102);
	var ReactInputSelection = __webpack_require__(140);
	var SyntheticEvent = __webpack_require__(106);

	var getActiveElement = __webpack_require__(143);
	var isTextInputElement = __webpack_require__(110);
	var keyOf = __webpack_require__(48);
	var shallowEqual = __webpack_require__(146);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(14);
	var EventPluginUtils = __webpack_require__(13);
	var EventPropagators = __webpack_require__(102);
	var SyntheticClipboardEvent = __webpack_require__(150);
	var SyntheticEvent = __webpack_require__(106);
	var SyntheticFocusEvent = __webpack_require__(151);
	var SyntheticKeyboardEvent = __webpack_require__(152);
	var SyntheticMouseEvent = __webpack_require__(114);
	var SyntheticDragEvent = __webpack_require__(149);
	var SyntheticTouchEvent = __webpack_require__(155);
	var SyntheticUIEvent = __webpack_require__(115);
	var SyntheticWheelEvent = __webpack_require__(156);

	var getEventCharCode = __webpack_require__(153);

	var invariant = __webpack_require__(16);
	var keyOf = __webpack_require__(48);
	var warning = __webpack_require__(24);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(114);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(106);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);

	var getEventCharCode = __webpack_require__(153);
	var getEventKey = __webpack_require__(154);
	var getEventModifierState = __webpack_require__(116);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(153);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(115);

	var getEventModifierState = __webpack_require__(116);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(114);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(53);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(46);
	var ReactElement = __webpack_require__(20);

	var invariant = __webpack_require__(16);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(53);
	var ReactDefaultPerfAnalysis = __webpack_require__(160);
	var ReactMount = __webpack_require__(76);
	var ReactPerf = __webpack_require__(35);

	var performanceNow = __webpack_require__(161);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(22);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(162);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(60);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(20);
	var ReactInstanceHandles = __webpack_require__(29);
	var ReactMarkupChecksum = __webpack_require__(86);
	var ReactServerRenderingTransaction =
	  __webpack_require__(164);

	var emptyObject = __webpack_require__(23);
	var instantiateReactComponent = __webpack_require__(92);
	var invariant = __webpack_require__(16);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(18);
	var CallbackQueue = __webpack_require__(34);
	var ReactPutListenerQueue = __webpack_require__(144);
	var Transaction = __webpack_require__(43);

	var assign = __webpack_require__(22);
	var emptyFunction = __webpack_require__(25);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(20);

	var invariant = __webpack_require__(16);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.DefaultRoute = __webpack_require__(167);
	exports.Link = __webpack_require__(180);
	exports.NotFoundRoute = __webpack_require__(181);
	exports.Redirect = __webpack_require__(182);
	exports.Route = __webpack_require__(179);
	exports.ActiveHandler = __webpack_require__(177);
	exports.RouteHandler = exports.ActiveHandler;

	exports.HashLocation = __webpack_require__(183);
	exports.HistoryLocation = __webpack_require__(186);
	exports.RefreshLocation = __webpack_require__(187);
	exports.StaticLocation = __webpack_require__(188);
	exports.TestLocation = __webpack_require__(189);

	exports.ImitateBrowserBehavior = __webpack_require__(190);
	exports.ScrollToTopBehavior = __webpack_require__(191);

	exports.History = __webpack_require__(185);
	exports.Navigation = __webpack_require__(192);
	exports.State = __webpack_require__(193);

	exports.createRoute = __webpack_require__(169).createRoute;
	exports.createDefaultRoute = __webpack_require__(169).createDefaultRoute;
	exports.createNotFoundRoute = __webpack_require__(169).createNotFoundRoute;
	exports.createRedirect = __webpack_require__(169).createRedirect;
	exports.createRoutesFromReactChildren = __webpack_require__(194);

	exports.create = __webpack_require__(195);
	exports.run = __webpack_require__(204);

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(168);
	var RouteHandler = __webpack_require__(177);
	var Route = __webpack_require__(179);

	/**
	 * A <DefaultRoute> component is a special kind of <Route> that
	 * renders when its parent matches but none of its siblings do.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var DefaultRoute = (function (_Route) {
	  function DefaultRoute() {
	    _classCallCheck(this, DefaultRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(DefaultRoute, _Route);

	  return DefaultRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	DefaultRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	DefaultRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = DefaultRoute;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(22);
	var ReactPropTypes = __webpack_require__(10).PropTypes;
	var Route = __webpack_require__(169);

	var PropTypes = assign({}, ReactPropTypes, {

	  /**
	   * Indicates that a prop should be falsy.
	   */
	  falsy: function falsy(props, propName, componentName) {
	    if (props[propName]) {
	      return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	    }
	  },

	  /**
	   * Indicates that a prop should be a Route object.
	   */
	  route: ReactPropTypes.instanceOf(Route),

	  /**
	   * Indicates that a prop should be a Router object.
	   */
	  //router: ReactPropTypes.instanceOf(Router) // TODO
	  router: ReactPropTypes.func

	});

	module.exports = PropTypes;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var assign = __webpack_require__(22);
	var invariant = __webpack_require__(16);
	var warning = __webpack_require__(24);
	var PathUtils = __webpack_require__(170);

	var _currentRoute;

	var Route = (function () {
	  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
	    _classCallCheck(this, Route);

	    this.name = name;
	    this.path = path;
	    this.paramNames = PathUtils.extractParamNames(this.path);
	    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
	    this.isDefault = !!isDefault;
	    this.isNotFound = !!isNotFound;
	    this.onEnter = onEnter;
	    this.onLeave = onLeave;
	    this.handler = handler;
	  }

	  _createClass(Route, [{
	    key: 'appendChild',

	    /**
	     * Appends the given route to this route's child routes.
	     */
	    value: function appendChild(route) {
	      invariant(route instanceof Route, 'route.appendChild must use a valid Route');

	      if (!this.childRoutes) this.childRoutes = [];

	      this.childRoutes.push(route);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var string = '<Route';

	      if (this.name) string += ' name="' + this.name + '"';

	      string += ' path="' + this.path + '">';

	      return string;
	    }
	  }], [{
	    key: 'createRoute',

	    /**
	     * Creates and returns a new route. Options may be a URL pathname string
	     * with placeholders for named params or an object with any of the following
	     * properties:
	     *
	     * - name                     The name of the route. This is used to lookup a
	     *                            route relative to its parent route and should be
	     *                            unique among all child routes of the same parent
	     * - path                     A URL pathname string with optional placeholders
	     *                            that specify the names of params to extract from
	     *                            the URL when the path matches. Defaults to `/${name}`
	     *                            when there is a name given, or the path of the parent
	     *                            route, or /
	     * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
	     *                            the scroll behavior of the router
	     * - isDefault                True to make this route the default route among all
	     *                            its siblings
	     * - isNotFound               True to make this route the "not found" route among
	     *                            all its siblings
	     * - onEnter                  A transition hook that will be called when the
	     *                            router is going to enter this route
	     * - onLeave                  A transition hook that will be called when the
	     *                            router is going to leave this route
	     * - handler                  A React component that will be rendered when
	     *                            this route is active
	     * - parentRoute              The parent route to use for this route. This option
	     *                            is automatically supplied when creating routes inside
	     *                            the callback to another invocation of createRoute. You
	     *                            only ever need to use this when declaring routes
	     *                            independently of one another to manually piece together
	     *                            the route hierarchy
	     *
	     * The callback may be used to structure your route hierarchy. Any call to
	     * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
	     * inside the callback automatically uses this route as its parent.
	     */
	    value: function createRoute(options, callback) {
	      options = options || {};

	      if (typeof options === 'string') options = { path: options };

	      var parentRoute = _currentRoute;

	      if (parentRoute) {
	        warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
	      } else {
	        parentRoute = options.parentRoute;
	      }

	      var name = options.name;
	      var path = options.path || name;

	      if (path && !(options.isDefault || options.isNotFound)) {
	        if (PathUtils.isAbsolute(path)) {
	          if (parentRoute) {
	            invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
	          }
	        } else if (parentRoute) {
	          // Relative paths extend their parent.
	          path = PathUtils.join(parentRoute.path, path);
	        } else {
	          path = '/' + path;
	        }
	      } else {
	        path = parentRoute ? parentRoute.path : '/';
	      }

	      if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

	      var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

	      if (parentRoute) {
	        if (route.isDefault) {
	          invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

	          parentRoute.defaultRoute = route;
	        } else if (route.isNotFound) {
	          invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

	          parentRoute.notFoundRoute = route;
	        }

	        parentRoute.appendChild(route);
	      }

	      // Any routes created in the callback
	      // use this route as their parent.
	      if (typeof callback === 'function') {
	        var currentRoute = _currentRoute;
	        _currentRoute = route;
	        callback.call(route, route);
	        _currentRoute = currentRoute;
	      }

	      return route;
	    }
	  }, {
	    key: 'createDefaultRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL.
	     */
	    value: function createDefaultRoute(options) {
	      return Route.createRoute(assign({}, options, { isDefault: true }));
	    }
	  }, {
	    key: 'createNotFoundRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL but none of its siblings do.
	     */
	    value: function createNotFoundRoute(options) {
	      return Route.createRoute(assign({}, options, { isNotFound: true }));
	    }
	  }, {
	    key: 'createRedirect',

	    /**
	     * Creates and returns a route that automatically redirects the transition
	     * to another route. In addition to the normal options to createRoute, this
	     * function accepts the following options:
	     *
	     * - from         An alias for the `path` option. Defaults to *
	     * - to           The path/route/route name to redirect to
	     * - params       The params to use in the redirect URL. Defaults
	     *                to using the current params
	     * - query        The query to use in the redirect URL. Defaults
	     *                to using the current query
	     */
	    value: function createRedirect(options) {
	      return Route.createRoute(assign({}, options, {
	        path: options.path || options.from || '*',
	        onEnter: function onEnter(transition, params, query) {
	          transition.redirect(options.to, options.params || params, options.query || query);
	        }
	      }));
	    }
	  }]);

	  return Route;
	})();

	module.exports = Route;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(16);
	var assign = __webpack_require__(171);
	var qs = __webpack_require__(172);

	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
	var queryMatcher = /\?(.*)$/;

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return '([^/?#]+)';
	      } else if (match === '*') {
	        paramNames.push('splat');
	        return '(.*?)';
	      } else {
	        return '\\' + match;
	      }
	    });

	    _compiledPatterns[pattern] = {
	      matcher: new RegExp('^' + source + '$', 'i'),
	      paramNames: paramNames
	    };
	  }

	  return _compiledPatterns[pattern];
	}

	var PathUtils = {

	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === '/';
	  },

	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, '/') + b;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);

	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;

	    var match = path.match(matcher);

	    if (!match) {
	      return null;
	    }var params = {};

	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};

	    var splatIndex = 0;

	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || 'splat';

	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === '?') {
	        paramName = paramName.slice(0, -1);

	        if (params[paramName] == null) return '';
	      } else {
	        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
	      }

	      var segment;
	      if (paramName === 'splat' && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];

	        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }

	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, '/');
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);

	    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

	    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

	    if (queryString) {
	      return PathUtils.withoutQuery(path) + '?' + queryString;
	    }return PathUtils.withoutQuery(path);
	  }

	};

	module.exports = PathUtils;

/***/ },
/* 171 */
/***/ function(module, exports) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(173);


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(174);
	var Parse = __webpack_require__(176);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(175);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {
	            return prefix;
	        }
	    }
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 175 */
/***/ function(module, exports) {

	// Load modules


	// Declare internals

	var internals = {};


	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};


	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(175);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty(key)) {
	                continue;
	            }

	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(10);
	var ContextWrapper = __webpack_require__(178);
	var assign = __webpack_require__(22);
	var PropTypes = __webpack_require__(168);

	var REF_NAME = '__routeHandler__';

	/**
	 * A <RouteHandler> component renders the active child route handler
	 * when routes are nested.
	 */

	var RouteHandler = (function (_React$Component) {
	  function RouteHandler() {
	    _classCallCheck(this, RouteHandler);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(RouteHandler, _React$Component);

	  _createClass(RouteHandler, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        routeDepth: this.context.routeDepth + 1
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._updateRouteComponent(null);
	    }
	  }, {
	    key: '_updateRouteComponent',
	    value: function _updateRouteComponent(component) {
	      this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
	    }
	  }, {
	    key: 'getRouteDepth',
	    value: function getRouteDepth() {
	      return this.context.routeDepth;
	    }
	  }, {
	    key: 'createChildRouteHandler',
	    value: function createChildRouteHandler(props) {
	      var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

	      if (route == null) {
	        return null;
	      }var childProps = assign({}, props || this.props, {
	        ref: REF_NAME,
	        params: this.context.router.getCurrentParams(),
	        query: this.context.router.getCurrentQuery()
	      });

	      return React.createElement(route.handler, childProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var handler = this.createChildRouteHandler();
	      // <script/> for things like <CSSTransitionGroup/> that don't like null
	      return handler ? React.createElement(
	        ContextWrapper,
	        null,
	        handler
	      ) : React.createElement('script', null);
	    }
	  }]);

	  return RouteHandler;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	RouteHandler.contextTypes = {
	  routeDepth: PropTypes.number.isRequired,
	  router: PropTypes.router.isRequired
	};

	RouteHandler.childContextTypes = {
	  routeDepth: PropTypes.number.isRequired
	};

	module.exports = RouteHandler;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	/**
	 * This component is necessary to get around a context warning
	 * present in React 0.13.0. It sovles this by providing a separation
	 * between the "owner" and "parent" contexts.
	 */

	var React = __webpack_require__(10);

	var ContextWrapper = (function (_React$Component) {
	  function ContextWrapper() {
	    _classCallCheck(this, ContextWrapper);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ContextWrapper, _React$Component);

	  _createClass(ContextWrapper, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return ContextWrapper;
	})(React.Component);

	module.exports = ContextWrapper;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(10);
	var invariant = __webpack_require__(16);
	var PropTypes = __webpack_require__(168);
	var RouteHandler = __webpack_require__(177);

	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   var routes = [
	 *     <Route handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Route>
	 *   ];
	 *   
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using a <RouteHandler> element.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           <RouteHandler/>
	 *         </div>
	 *       );
	 *     }
	 *   });
	 *
	 * If no handler is provided for the route, it will render a matched child route.
	 */

	var Route = (function (_React$Component) {
	  function Route() {
	    _classCallCheck(this, Route);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Route, _React$Component);

	  _createClass(Route, [{
	    key: 'render',
	    value: function render() {
	      invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
	    }
	  }]);

	  return Route;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Route.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.string,
	  handler: PropTypes.func,
	  ignoreScrollBehavior: PropTypes.bool
	};

	Route.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = Route;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(10);
	var assign = __webpack_require__(22);
	var PropTypes = __webpack_require__(168);

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} />
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
	 */

	var Link = (function (_React$Component) {
	  function Link() {
	    _classCallCheck(this, Link);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Link, _React$Component);

	  _createClass(Link, [{
	    key: 'handleClick',
	    value: function handleClick(event) {
	      var allowTransition = true;
	      var clickResult;

	      if (this.props.onClick) clickResult = this.props.onClick(event);

	      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
	        return;
	      }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

	      event.preventDefault();

	      if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getHref',

	    /**
	     * Returns the value of the "href" attribute to use on the DOM element.
	     */
	    value: function getHref() {
	      return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getClassName',

	    /**
	     * Returns the value of the "class" attribute to use on the DOM element, which contains
	     * the value of the activeClassName property when this <Link> is active.
	     */
	    value: function getClassName() {
	      var className = this.props.className;

	      if (this.getActiveState()) className += ' ' + this.props.activeClassName;

	      return className;
	    }
	  }, {
	    key: 'getActiveState',
	    value: function getActiveState() {
	      return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = assign({}, this.props, {
	        href: this.getHref(),
	        className: this.getClassName(),
	        onClick: this.handleClick.bind(this)
	      });

	      if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

	      return React.DOM.a(props, this.props.children);
	    }
	  }]);

	  return Link;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Link.contextTypes = {
	  router: PropTypes.router.isRequired
	};

	Link.propTypes = {
	  activeClassName: PropTypes.string.isRequired,
	  to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
	  params: PropTypes.object,
	  query: PropTypes.object,
	  activeStyle: PropTypes.object,
	  onClick: PropTypes.func
	};

	Link.defaultProps = {
	  activeClassName: 'active',
	  className: ''
	};

	module.exports = Link;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(168);
	var RouteHandler = __webpack_require__(177);
	var Route = __webpack_require__(179);

	/**
	 * A <NotFoundRoute> is a special kind of <Route> that
	 * renders when the beginning of its parent's path matches
	 * but none of its siblings do, including any <DefaultRoute>.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var NotFoundRoute = (function (_Route) {
	  function NotFoundRoute() {
	    _classCallCheck(this, NotFoundRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(NotFoundRoute, _Route);

	  return NotFoundRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	NotFoundRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	NotFoundRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = NotFoundRoute;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(168);
	var Route = __webpack_require__(179);

	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects to another route when it matches.
	 */

	var Redirect = (function (_Route) {
	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(Redirect, _Route);

	  return Redirect;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Redirect.propTypes = {
	  path: PropTypes.string,
	  from: PropTypes.string, // Alias for path.
	  to: PropTypes.string,
	  handler: PropTypes.falsy
	};

	// Redirects should not have a default handler
	Redirect.defaultProps = {};

	module.exports = Redirect;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(184);
	var History = __webpack_require__(185);

	var _listeners = [];
	var _isListening = false;
	var _actionType;

	function notifyChange(type) {
	  if (type === LocationActions.PUSH) History.length += 1;

	  var change = {
	    path: HashLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HashLocation, change);
	  });
	}

	function ensureSlash() {
	  var path = HashLocation.getCurrentPath();

	  if (path.charAt(0) === '/') {
	    return true;
	  }HashLocation.replace('/' + path);

	  return false;
	}

	function onHashChange() {
	  if (ensureSlash()) {
	    // If we don't have an _actionType then all we know is the hash
	    // changed. It was probably caused by the user clicking the Back
	    // button, but may have also been the Forward button or manual
	    // manipulation. So just guess 'pop'.
	    var curActionType = _actionType;
	    _actionType = null;
	    notifyChange(curActionType || LocationActions.POP);
	  }
	}

	/**
	 * A Location that uses `window.location.hash`.
	 */
	var HashLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    // Do this BEFORE listening for hashchange.
	    ensureSlash();

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('hashchange', onHashChange, false);
	      } else {
	        window.attachEvent('onhashchange', onHashChange);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.removeEventListener) {
	        window.removeEventListener('hashchange', onHashChange, false);
	      } else {
	        window.removeEvent('onhashchange', onHashChange);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    _actionType = LocationActions.PUSH;
	    window.location.hash = path;
	  },

	  replace: function replace(path) {
	    _actionType = LocationActions.REPLACE;
	    window.location.replace(window.location.pathname + window.location.search + '#' + path);
	  },

	  pop: function pop() {
	    _actionType = LocationActions.POP;
	    History.back();
	  },

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(
	    // We can't use window.location.hash here because it's not
	    // consistent across browsers - Firefox will pre-decode it!
	    window.location.href.split('#')[1] || '');
	  },

	  toString: function toString() {
	    return '<HashLocation>';
	  }

	};

	module.exports = HashLocation;

/***/ },
/* 184 */
/***/ function(module, exports) {

	/**
	 * Actions that modify the URL.
	 */
	'use strict';

	var LocationActions = {

	  /**
	   * Indicates a new location is being pushed to the history stack.
	   */
	  PUSH: 'push',

	  /**
	   * Indicates the current location should be replaced.
	   */
	  REPLACE: 'replace',

	  /**
	   * Indicates the most recent entry should be removed from the history stack.
	   */
	  POP: 'pop'

	};

	module.exports = LocationActions;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(16);
	var canUseDOM = __webpack_require__(60).canUseDOM;

	var History = {

	  /**
	   * The current number of entries in the history.
	   *
	   * Note: This property is read-only.
	   */
	  length: 1,

	  /**
	   * Sends the browser back one entry in the history.
	   */
	  back: function back() {
	    invariant(canUseDOM, 'Cannot use History.back without a DOM');

	    // Do this first so that History.length will
	    // be accurate in location change listeners.
	    History.length -= 1;

	    window.history.back();
	  }

	};

	module.exports = History;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(184);
	var History = __webpack_require__(185);

	var _listeners = [];
	var _isListening = false;

	function notifyChange(type) {
	  var change = {
	    path: HistoryLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HistoryLocation, change);
	  });
	}

	function onPopState(event) {
	  if (event.state === undefined) {
	    return;
	  } // Ignore extraneous popstate events in WebKit.

	  notifyChange(LocationActions.POP);
	}

	/**
	 * A Location that uses HTML5 history.
	 */
	var HistoryLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('popstate', onPopState, false);
	      } else {
	        window.attachEvent('onpopstate', onPopState);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.addEventListener) {
	        window.removeEventListener('popstate', onPopState, false);
	      } else {
	        window.removeEvent('onpopstate', onPopState);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    window.history.pushState({ path: path }, '', path);
	    History.length += 1;
	    notifyChange(LocationActions.PUSH);
	  },

	  replace: function replace(path) {
	    window.history.replaceState({ path: path }, '', path);
	    notifyChange(LocationActions.REPLACE);
	  },

	  pop: History.back,

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(window.location.pathname + window.location.search);
	  },

	  toString: function toString() {
	    return '<HistoryLocation>';
	  }

	};

	module.exports = HistoryLocation;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var HistoryLocation = __webpack_require__(186);
	var History = __webpack_require__(185);

	/**
	 * A Location that uses full page refreshes. This is used as
	 * the fallback for HistoryLocation in browsers that do not
	 * support the HTML5 history API.
	 */
	var RefreshLocation = {

	  push: function push(path) {
	    window.location = path;
	  },

	  replace: function replace(path) {
	    window.location.replace(path);
	  },

	  pop: History.back,

	  getCurrentPath: HistoryLocation.getCurrentPath,

	  toString: function toString() {
	    return '<RefreshLocation>';
	  }

	};

	module.exports = RefreshLocation;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(16);

	function throwCannotModify() {
	  invariant(false, 'You cannot modify a static location');
	}

	/**
	 * A location that only ever contains a single path. Useful in
	 * stateless environments like servers where there is no path history,
	 * only the path that was used in the request.
	 */

	var StaticLocation = (function () {
	  function StaticLocation(path) {
	    _classCallCheck(this, StaticLocation);

	    this.path = path;
	  }

	  _createClass(StaticLocation, [{
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.path;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<StaticLocation path="' + this.path + '">';
	    }
	  }]);

	  return StaticLocation;
	})();

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	StaticLocation.prototype.push = throwCannotModify;
	StaticLocation.prototype.replace = throwCannotModify;
	StaticLocation.prototype.pop = throwCannotModify;

	module.exports = StaticLocation;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(16);
	var LocationActions = __webpack_require__(184);
	var History = __webpack_require__(185);

	/**
	 * A location that is convenient for testing and does not require a DOM.
	 */

	var TestLocation = (function () {
	  function TestLocation(history) {
	    _classCallCheck(this, TestLocation);

	    this.history = history || [];
	    this.listeners = [];
	    this._updateHistoryLength();
	  }

	  _createClass(TestLocation, [{
	    key: 'needsDOM',
	    get: function () {
	      return false;
	    }
	  }, {
	    key: '_updateHistoryLength',
	    value: function _updateHistoryLength() {
	      History.length = this.history.length;
	    }
	  }, {
	    key: '_notifyChange',
	    value: function _notifyChange(type) {
	      var change = {
	        path: this.getCurrentPath(),
	        type: type
	      };

	      for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
	    }
	  }, {
	    key: 'addChangeListener',
	    value: function addChangeListener(listener) {
	      this.listeners.push(listener);
	    }
	  }, {
	    key: 'removeChangeListener',
	    value: function removeChangeListener(listener) {
	      this.listeners = this.listeners.filter(function (l) {
	        return l !== listener;
	      });
	    }
	  }, {
	    key: 'push',
	    value: function push(path) {
	      this.history.push(path);
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.PUSH);
	    }
	  }, {
	    key: 'replace',
	    value: function replace(path) {
	      invariant(this.history.length, 'You cannot replace the current path with no history');

	      this.history[this.history.length - 1] = path;

	      this._notifyChange(LocationActions.REPLACE);
	    }
	  }, {
	    key: 'pop',
	    value: function pop() {
	      this.history.pop();
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.POP);
	    }
	  }, {
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.history[this.history.length - 1];
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<TestLocation>';
	    }
	  }]);

	  return TestLocation;
	})();

	module.exports = TestLocation;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(184);

	/**
	 * A scroll behavior that attempts to imitate the default behavior
	 * of modern browsers.
	 */
	var ImitateBrowserBehavior = {

	  updateScrollPosition: function updateScrollPosition(position, actionType) {
	    switch (actionType) {
	      case LocationActions.PUSH:
	      case LocationActions.REPLACE:
	        window.scrollTo(0, 0);
	        break;
	      case LocationActions.POP:
	        if (position) {
	          window.scrollTo(position.x, position.y);
	        } else {
	          window.scrollTo(0, 0);
	        }
	        break;
	    }
	  }

	};

	module.exports = ImitateBrowserBehavior;

/***/ },
/* 191 */
/***/ function(module, exports) {

	/**
	 * A scroll behavior that always scrolls to the top of the page
	 * after a transition.
	 */
	"use strict";

	var ScrollToTopBehavior = {

	  updateScrollPosition: function updateScrollPosition() {
	    window.scrollTo(0, 0);
	  }

	};

	module.exports = ScrollToTopBehavior;

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(168);

	/**
	 * A mixin for components that modify the URL.
	 *
	 * Example:
	 *
	 *   var MyLink = React.createClass({
	 *     mixins: [ Router.Navigation ],
	 *     handleClick(event) {
	 *       event.preventDefault();
	 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
	 *     },
	 *     render() {
	 *       return (
	 *         <a onClick={this.handleClick}>Click me!</a>
	 *       );
	 *     }
	 *   });
	 */
	var Navigation = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns an absolute URL path created from the given route
	   * name, URL parameters, and query values.
	   */
	  makePath: function makePath(to, params, query) {
	    return this.context.router.makePath(to, params, query);
	  },

	  /**
	   * Returns a string that may safely be used as the href of a
	   * link to the route with the given name.
	   */
	  makeHref: function makeHref(to, params, query) {
	    return this.context.router.makeHref(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by pushing
	   * a new URL onto the history stack.
	   */
	  transitionTo: function transitionTo(to, params, query) {
	    this.context.router.transitionTo(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by replacing
	   * the current URL in the history stack.
	   */
	  replaceWith: function replaceWith(to, params, query) {
	    this.context.router.replaceWith(to, params, query);
	  },

	  /**
	   * Transitions to the previous URL.
	   */
	  goBack: function goBack() {
	    return this.context.router.goBack();
	  }

	};

	module.exports = Navigation;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(168);

	/**
	 * A mixin for components that need to know the path, routes, URL
	 * params and query that are currently active.
	 *
	 * Example:
	 *
	 *   var AboutLink = React.createClass({
	 *     mixins: [ Router.State ],
	 *     render() {
	 *       var className = this.props.className;
	 *
	 *       if (this.isActive('about'))
	 *         className += ' is-active';
	 *
	 *       return React.DOM.a({ className: className }, this.props.children);
	 *     }
	 *   });
	 */
	var State = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns the current URL path.
	   */
	  getPath: function getPath() {
	    return this.context.router.getCurrentPath();
	  },

	  /**
	   * Returns the current URL path without the query string.
	   */
	  getPathname: function getPathname() {
	    return this.context.router.getCurrentPathname();
	  },

	  /**
	   * Returns an object of the URL params that are currently active.
	   */
	  getParams: function getParams() {
	    return this.context.router.getCurrentParams();
	  },

	  /**
	   * Returns an object of the query params that are currently active.
	   */
	  getQuery: function getQuery() {
	    return this.context.router.getCurrentQuery();
	  },

	  /**
	   * Returns an array of the routes that are currently active.
	   */
	  getRoutes: function getRoutes() {
	    return this.context.router.getCurrentRoutes();
	  },

	  /**
	   * A helper method to determine if a given route, params, and query
	   * are active.
	   */
	  isActive: function isActive(to, params, query) {
	    return this.context.router.isActive(to, params, query);
	  }

	};

	module.exports = State;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W084 */
	'use strict';

	var React = __webpack_require__(10);
	var assign = __webpack_require__(22);
	var warning = __webpack_require__(24);
	var DefaultRoute = __webpack_require__(167);
	var NotFoundRoute = __webpack_require__(181);
	var Redirect = __webpack_require__(182);
	var Route = __webpack_require__(169);

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}

	function createRouteOptions(props) {
	  var options = assign({}, props);
	  var handler = options.handler;

	  if (handler) {
	    options.onEnter = handler.willTransitionTo;
	    options.onLeave = handler.willTransitionFrom;
	  }

	  return options;
	}

	function createRouteFromReactElement(element) {
	  if (!React.isValidElement(element)) {
	    return;
	  }var type = element.type;
	  var props = assign({}, type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

	  if (type === DefaultRoute) {
	    return Route.createDefaultRoute(createRouteOptions(props));
	  }if (type === NotFoundRoute) {
	    return Route.createNotFoundRoute(createRouteOptions(props));
	  }if (type === Redirect) {
	    return Route.createRedirect(createRouteOptions(props));
	  }return Route.createRoute(createRouteOptions(props), function () {
	    if (props.children) createRoutesFromReactChildren(props.children);
	  });
	}

	/**
	 * Creates and returns an array of routes created from the given
	 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
	 * <NotFoundRoute>, or <Redirect>, e.g.:
	 *
	 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
	 *
	 *   var routes = createRoutesFromReactChildren(
	 *     <Route path="/" handler={App}>
	 *       <Route name="user" path="/user/:userId" handler={User}>
	 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
	 *         <Redirect from="todos/:taskId" to="task"/>
	 *       </Route>
	 *     </Route>
	 *   );
	 */
	function createRoutesFromReactChildren(children) {
	  var routes = [];

	  React.Children.forEach(children, function (child) {
	    if (child = createRouteFromReactElement(child)) routes.push(child);
	  });

	  return routes;
	}

	module.exports = createRoutesFromReactChildren;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* jshint -W058 */
	'use strict';

	var React = __webpack_require__(10);
	var warning = __webpack_require__(24);
	var invariant = __webpack_require__(16);
	var canUseDOM = __webpack_require__(60).canUseDOM;
	var LocationActions = __webpack_require__(184);
	var ImitateBrowserBehavior = __webpack_require__(190);
	var HashLocation = __webpack_require__(183);
	var HistoryLocation = __webpack_require__(186);
	var RefreshLocation = __webpack_require__(187);
	var StaticLocation = __webpack_require__(188);
	var ScrollHistory = __webpack_require__(196);
	var createRoutesFromReactChildren = __webpack_require__(194);
	var isReactChildren = __webpack_require__(198);
	var Transition = __webpack_require__(199);
	var PropTypes = __webpack_require__(168);
	var Redirect = __webpack_require__(201);
	var History = __webpack_require__(185);
	var Cancellation = __webpack_require__(200);
	var Match = __webpack_require__(202);
	var Route = __webpack_require__(169);
	var supportsHistory = __webpack_require__(203);
	var PathUtils = __webpack_require__(170);

	/**
	 * The default location for new routers.
	 */
	var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

	/**
	 * The default scroll behavior for new routers.
	 */
	var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

	function hasProperties(object, properties) {
	  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
	    return false;
	  }return true;
	}

	function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
	  return routes.some(function (r) {
	    if (r !== route) return false;

	    var paramNames = route.paramNames;
	    var paramName;

	    // Ensure that all params the route cares about did not change.
	    for (var i = 0, len = paramNames.length; i < len; ++i) {
	      paramName = paramNames[i];

	      if (nextParams[paramName] !== prevParams[paramName]) return false;
	    }

	    // Ensure the query hasn't changed.
	    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
	  });
	}

	function addRoutesToNamedRoutes(routes, namedRoutes) {
	  var route;
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    route = routes[i];

	    if (route.name) {
	      invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

	      namedRoutes[route.name] = route;
	    }

	    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
	  }
	}

	function routeIsActive(activeRoutes, routeName) {
	  return activeRoutes.some(function (route) {
	    return route.name === routeName;
	  });
	}

	function paramsAreActive(activeParams, params) {
	  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
	    return false;
	  }return true;
	}

	function queryIsActive(activeQuery, query) {
	  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
	    return false;
	  }return true;
	}

	/**
	 * Creates and returns a new router using the given options. A router
	 * is a ReactComponent class that knows how to react to changes in the
	 * URL and keep the contents of the page in sync.
	 *
	 * Options may be any of the following:
	 *
	 * - routes           (required) The route config
	 * - location         The location to use. Defaults to HashLocation when
	 *                    the DOM is available, "/" otherwise
	 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
	 *                    when the DOM is available, null otherwise
	 * - onError          A function that is used to handle errors
	 * - onAbort          A function that is used to handle aborted transitions
	 *
	 * When rendering in a server-side environment, the location should simply
	 * be the URL path that was used in the request, including the query string.
	 */
	function createRouter(options) {
	  options = options || {};

	  if (isReactChildren(options)) options = { routes: options };

	  var mountedComponents = [];
	  var location = options.location || DEFAULT_LOCATION;
	  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
	  var state = {};
	  var nextState = {};
	  var pendingTransition = null;
	  var dispatchHandler = null;

	  if (typeof location === 'string') location = new StaticLocation(location);

	  if (location instanceof StaticLocation) {
	    warning(!canUseDOM || process.env.NODE_ENV === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
	  } else {
	    invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
	  }

	  // Automatically fall back to full page refreshes in
	  // browsers that don't support the HTML history API.
	  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

	  var Router = React.createClass({

	    displayName: 'Router',

	    statics: {

	      isRunning: false,

	      cancelPendingTransition: function cancelPendingTransition() {
	        if (pendingTransition) {
	          pendingTransition.cancel();
	          pendingTransition = null;
	        }
	      },

	      clearAllRoutes: function clearAllRoutes() {
	        Router.cancelPendingTransition();
	        Router.namedRoutes = {};
	        Router.routes = [];
	      },

	      /**
	       * Adds routes to this router from the given children object (see ReactChildren).
	       */
	      addRoutes: function addRoutes(routes) {
	        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

	        addRoutesToNamedRoutes(routes, Router.namedRoutes);

	        Router.routes.push.apply(Router.routes, routes);
	      },

	      /**
	       * Replaces routes of this router from the given children object (see ReactChildren).
	       */
	      replaceRoutes: function replaceRoutes(routes) {
	        Router.clearAllRoutes();
	        Router.addRoutes(routes);
	        Router.refresh();
	      },

	      /**
	       * Performs a match of the given path against this router and returns an object
	       * with the { routes, params, pathname, query } that match. Returns null if no
	       * match can be made.
	       */
	      match: function match(path) {
	        return Match.findMatch(Router.routes, path);
	      },

	      /**
	       * Returns an absolute URL path created from the given route
	       * name, URL parameters, and query.
	       */
	      makePath: function makePath(to, params, query) {
	        var path;
	        if (PathUtils.isAbsolute(to)) {
	          path = to;
	        } else {
	          var route = to instanceof Route ? to : Router.namedRoutes[to];

	          invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

	          path = route.path;
	        }

	        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
	      },

	      /**
	       * Returns a string that may safely be used as the href of a link
	       * to the route with the given name, URL parameters, and query.
	       */
	      makeHref: function makeHref(to, params, query) {
	        var path = Router.makePath(to, params, query);
	        return location === HashLocation ? '#' + path : path;
	      },

	      /**
	       * Transitions to the URL specified in the arguments by pushing
	       * a new URL onto the history stack.
	       */
	      transitionTo: function transitionTo(to, params, query) {
	        var path = Router.makePath(to, params, query);

	        if (pendingTransition) {
	          // Replace so pending location does not stay in history.
	          location.replace(path);
	        } else {
	          location.push(path);
	        }
	      },

	      /**
	       * Transitions to the URL specified in the arguments by replacing
	       * the current URL in the history stack.
	       */
	      replaceWith: function replaceWith(to, params, query) {
	        location.replace(Router.makePath(to, params, query));
	      },

	      /**
	       * Transitions to the previous URL if one is available. Returns true if the
	       * router was able to go back, false otherwise.
	       *
	       * Note: The router only tracks history entries in your application, not the
	       * current browser session, so you can safely call this function without guarding
	       * against sending the user back to some other site. However, when using
	       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
	       * don't support HTML5 history) this method will *always* send the client back
	       * because we cannot reliably track history length.
	       */
	      goBack: function goBack() {
	        if (History.length > 1 || location === RefreshLocation) {
	          location.pop();
	          return true;
	        }

	        warning(false, 'goBack() was ignored because there is no router history');

	        return false;
	      },

	      handleAbort: options.onAbort || function (abortReason) {
	        if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

	        if (abortReason instanceof Cancellation) {
	          return;
	        } else if (abortReason instanceof Redirect) {
	          location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
	        } else {
	          location.pop();
	        }
	      },

	      handleError: options.onError || function (error) {
	        // Throw so we don't silently swallow async errors.
	        throw error; // This error probably originated in a transition hook.
	      },

	      handleLocationChange: function handleLocationChange(change) {
	        Router.dispatch(change.path, change.type);
	      },

	      /**
	       * Performs a transition to the given path and calls callback(error, abortReason)
	       * when the transition is finished. If both arguments are null the router's state
	       * was updated. Otherwise the transition did not complete.
	       *
	       * In a transition, a router first determines which routes are involved by beginning
	       * with the current route, up the route tree to the first parent route that is shared
	       * with the destination route, and back down the tree to the destination route. The
	       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
	       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
	       * all route handlers we're transitioning to.
	       *
	       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
	       * transition. To resolve asynchronously, they may use the callback argument. If no
	       * hooks wait, the transition is fully synchronous.
	       */
	      dispatch: function dispatch(path, action) {
	        Router.cancelPendingTransition();

	        var prevPath = state.path;
	        var isRefreshing = action == null;

	        if (prevPath === path && !isRefreshing) {
	          return;
	        } // Nothing to do!

	        // Record the scroll position as early as possible to
	        // get it before browsers try update it automatically.
	        if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

	        var match = Router.match(path);

	        warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

	        if (match == null) match = {};

	        var prevRoutes = state.routes || [];
	        var prevParams = state.params || {};
	        var prevQuery = state.query || {};

	        var nextRoutes = match.routes || [];
	        var nextParams = match.params || {};
	        var nextQuery = match.query || {};

	        var fromRoutes, toRoutes;
	        if (prevRoutes.length) {
	          fromRoutes = prevRoutes.filter(function (route) {
	            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });

	          toRoutes = nextRoutes.filter(function (route) {
	            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	        } else {
	          fromRoutes = [];
	          toRoutes = nextRoutes;
	        }

	        var transition = new Transition(path, Router.replaceWith.bind(Router, path));
	        pendingTransition = transition;

	        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

	        Transition.from(transition, fromRoutes, fromComponents, function (error) {
	          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

	          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
	            dispatchHandler.call(Router, error, transition, {
	              path: path,
	              action: action,
	              pathname: match.pathname,
	              routes: nextRoutes,
	              params: nextParams,
	              query: nextQuery
	            });
	          });
	        });
	      },

	      /**
	       * Starts this router and calls callback(router, state) when the route changes.
	       *
	       * If the router's location is static (i.e. a URL path in a server environment)
	       * the callback is called only once. Otherwise, the location should be one of the
	       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
	       */
	      run: function run(callback) {
	        invariant(!Router.isRunning, 'Router is already running');

	        dispatchHandler = function (error, transition, newState) {
	          if (error) Router.handleError(error);

	          if (pendingTransition !== transition) return;

	          pendingTransition = null;

	          if (transition.abortReason) {
	            Router.handleAbort(transition.abortReason);
	          } else {
	            callback.call(Router, Router, nextState = newState);
	          }
	        };

	        if (!(location instanceof StaticLocation)) {
	          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

	          Router.isRunning = true;
	        }

	        // Bootstrap using the current path.
	        Router.refresh();
	      },

	      refresh: function refresh() {
	        Router.dispatch(location.getCurrentPath(), null);
	      },

	      stop: function stop() {
	        Router.cancelPendingTransition();

	        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

	        Router.isRunning = false;
	      },

	      getLocation: function getLocation() {
	        return location;
	      },

	      getScrollBehavior: function getScrollBehavior() {
	        return scrollBehavior;
	      },

	      getRouteAtDepth: function getRouteAtDepth(routeDepth) {
	        var routes = state.routes;
	        return routes && routes[routeDepth];
	      },

	      setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
	        mountedComponents[routeDepth] = component;
	      },

	      /**
	       * Returns the current URL path + query string.
	       */
	      getCurrentPath: function getCurrentPath() {
	        return state.path;
	      },

	      /**
	       * Returns the current URL path without the query string.
	       */
	      getCurrentPathname: function getCurrentPathname() {
	        return state.pathname;
	      },

	      /**
	       * Returns an object of the currently active URL parameters.
	       */
	      getCurrentParams: function getCurrentParams() {
	        return state.params;
	      },

	      /**
	       * Returns an object of the currently active query parameters.
	       */
	      getCurrentQuery: function getCurrentQuery() {
	        return state.query;
	      },

	      /**
	       * Returns an array of the currently active routes.
	       */
	      getCurrentRoutes: function getCurrentRoutes() {
	        return state.routes;
	      },

	      /**
	       * Returns true if the given route, params, and query are active.
	       */
	      isActive: function isActive(to, params, query) {
	        if (PathUtils.isAbsolute(to)) {
	          return to === state.path;
	        }return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
	      }

	    },

	    mixins: [ScrollHistory],

	    propTypes: {
	      children: PropTypes.falsy
	    },

	    childContextTypes: {
	      routeDepth: PropTypes.number.isRequired,
	      router: PropTypes.router.isRequired
	    },

	    getChildContext: function getChildContext() {
	      return {
	        routeDepth: 1,
	        router: Router
	      };
	    },

	    getInitialState: function getInitialState() {
	      return state = nextState;
	    },

	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this.setState(state = nextState);
	    },

	    componentWillUnmount: function componentWillUnmount() {
	      Router.stop();
	    },

	    render: function render() {
	      var route = Router.getRouteAtDepth(0);
	      return route ? React.createElement(route.handler, this.props) : null;
	    }

	  });

	  Router.clearAllRoutes();

	  if (options.routes) Router.addRoutes(options.routes);

	  return Router;
	}

	module.exports = createRouter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(16);
	var canUseDOM = __webpack_require__(60).canUseDOM;
	var getWindowScrollPosition = __webpack_require__(197);

	function shouldUpdateScroll(state, prevState) {
	  if (!prevState) {
	    return true;
	  } // Don't update scroll position when only the query has changed.
	  if (state.pathname === prevState.pathname) {
	    return false;
	  }var routes = state.routes;
	  var prevRoutes = prevState.routes;

	  var sharedAncestorRoutes = routes.filter(function (route) {
	    return prevRoutes.indexOf(route) !== -1;
	  });

	  return !sharedAncestorRoutes.some(function (route) {
	    return route.ignoreScrollBehavior;
	  });
	}

	/**
	 * Provides the router with the ability to manage window scroll position
	 * according to its scroll behavior.
	 */
	var ScrollHistory = {

	  statics: {

	    /**
	     * Records curent scroll position as the last known position for the given URL path.
	     */
	    recordScrollPosition: function recordScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      this.scrollHistory[path] = getWindowScrollPosition();
	    },

	    /**
	     * Returns the last known scroll position for the given URL path.
	     */
	    getScrollPosition: function getScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      return this.scrollHistory[path] || null;
	    }

	  },

	  componentWillMount: function componentWillMount() {
	    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateScroll();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    this._updateScroll(prevState);
	  },

	  _updateScroll: function _updateScroll(prevState) {
	    if (!shouldUpdateScroll(this.state, prevState)) {
	      return;
	    }var scrollBehavior = this.constructor.getScrollBehavior();

	    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
	  }

	};

	module.exports = ScrollHistory;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(16);
	var canUseDOM = __webpack_require__(60).canUseDOM;

	/**
	 * Returns the current scroll position of the window as { x, y }.
	 */
	function getWindowScrollPosition() {
	  invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

	  return {
	    x: window.pageXOffset || document.documentElement.scrollLeft,
	    y: window.pageYOffset || document.documentElement.scrollTop
	  };
	}

	module.exports = getWindowScrollPosition;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(10);

	function isValidChild(object) {
	  return object == null || React.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	module.exports = isReactChildren;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W058 */

	'use strict';

	var Cancellation = __webpack_require__(200);
	var Redirect = __webpack_require__(201);

	/**
	 * Encapsulates a transition to a given path.
	 *
	 * The willTransitionTo and willTransitionFrom handlers receive
	 * an instance of this class as their first argument.
	 */
	function Transition(path, retry) {
	  this.path = path;
	  this.abortReason = null;
	  // TODO: Change this to router.retryTransition(transition)
	  this.retry = retry.bind(this);
	}

	Transition.prototype.abort = function (reason) {
	  if (this.abortReason == null) this.abortReason = reason || 'ABORT';
	};

	Transition.prototype.redirect = function (to, params, query) {
	  this.abort(new Redirect(to, params, query));
	};

	Transition.prototype.cancel = function () {
	  this.abort(new Cancellation());
	};

	Transition.from = function (transition, routes, components, callback) {
	  routes.reduce(function (callback, route, index) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onLeave) {
	        try {
	          route.onLeave(transition, components[index], callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onLeave.length < 3) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	Transition.to = function (transition, routes, params, query, callback) {
	  routes.reduceRight(function (callback, route) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onEnter) {
	        try {
	          route.onEnter(transition, params, query, callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onEnter.length < 4) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	module.exports = Transition;

/***/ },
/* 200 */
/***/ function(module, exports) {

	/**
	 * Represents a cancellation caused by navigating away
	 * before the previous transition has fully resolved.
	 */
	"use strict";

	function Cancellation() {}

	module.exports = Cancellation;

/***/ },
/* 201 */
/***/ function(module, exports) {

	/**
	 * Encapsulates a redirect to the given route.
	 */
	"use strict";

	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}

	module.exports = Redirect;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	/* jshint -W084 */
	var PathUtils = __webpack_require__(170);

	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];

	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }

	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, defaultRoute]);
	  } // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, notFoundRoute]);
	  } // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) {
	    return new Match(pathname, params, query, [route]);
	  }return null;
	}

	var Match = (function () {
	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);

	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }

	  _createClass(Match, null, [{
	    key: 'findMatch',

	    /**
	     * Attempts to match depth-first a route in the given route's
	     * subtree against the given path and returns the match if it
	     * succeeds, null if no match can be made.
	     */
	    value: function findMatch(routes, path) {
	      var pathname = PathUtils.withoutQuery(path);
	      var query = PathUtils.extractQuery(path);
	      var match = null;

	      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

	      return match;
	    }
	  }]);

	  return Match;
	})();

	module.exports = Match;

/***/ },
/* 203 */
/***/ function(module, exports) {

	'use strict';

	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	module.exports = supportsHistory;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createRouter = __webpack_require__(195);

	/**
	 * A high-level convenience method that creates, configures, and
	 * runs a router in one shot. The method signature is:
	 *
	 *   Router.run(routes[, location ], callback);
	 *
	 * Using `window.location.hash` to manage the URL, you could do:
	 *
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 * 
	 * Using HTML5 history and a custom "cursor" prop:
	 * 
	 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
	 *     React.render(<Handler cursor={cursor}/>, document.body);
	 *   });
	 *
	 * Returns the newly created router.
	 *
	 * Note: If you need to specify further options for your router such
	 * as error/abort handling or custom scroll behavior, use Router.create
	 * instead.
	 *
	 *   var router = Router.create(options);
	 *   router.run(function (Handler) {
	 *     // ...
	 *   });
	 */
	function runRouter(routes, location, callback) {
	  if (typeof location === 'function') {
	    callback = location;
	    location = null;
	  }

	  var router = createRouter({
	    routes: routes,
	    location: location
	  });

	  router.run(callback);

	  return router;
	}

	module.exports = runRouter;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var BarChart = __webpack_require__(206);
	var BubbleChart = __webpack_require__(215);
	var LineChart = __webpack_require__(221);

	var Chart = React.createClass({displayName: "Chart",
	  render: function () {

	    var divStyle = {
	      width: '100%'
	    };

	    return (
	      React.createElement("div", null, 
	        React.createElement("div", {style: divStyle}, 
	          React.createElement(BarChart, {id: "1"})
	        ), 
	        React.createElement("div", {style: divStyle}, 
	          React.createElement(BarChart, {id: "2"})
	        ), 
	        React.createElement("div", {style: divStyle}, 
	          React.createElement(BarChart, {id: "3"})
	        ), 
	        React.createElement("div", {style: {width: '100%'}}, 
	           React.createElement(BubbleChart, {id: "4"})
	        ), 
	        React.createElement("div", {style: {width: '100%'}}, 
	          React.createElement(LineChart, {id: "5"})
	        )
	      )
	    );
	  },

	});

	module.exports = Chart;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var Bar = __webpack_require__(207);
	var BarChartStore = __webpack_require__(209);
	var d3 = __webpack_require__(2);
	var Utils = __webpack_require__(1);
	var D3Utils = __webpack_require__(212);
	var XAxis = __webpack_require__(213);
	var YAxis = __webpack_require__(214);
	var D3ServerAction = __webpack_require__(3);

	var BarChart = React.createClass({displayName: "BarChart",
	  getInitialState: function(){
	    return{
	      bars: [],//BarChartStore.getAll(this.props.id),
	      width: this.props.width,
	      height: this.props.height,
	      start_date: "12/18/2013 00:00",
	      end_date: "12/19/2013 00:00"
	    };
	  },
	  getDefaultProps: function(){
	    return {
	      width: '500',
	      height: '200',
	    };
	  },
	  // componentWillMount: function(){

	  // },
	  updateDimensions: function(){
	    var el = React.findDOMNode(this);
	    var d3node = d3.select(el);
	    this.setState({width: d3node.node().parentNode.offsetWidth});
	  },

	  setupChart: function(){
	    var el = React.findDOMNode(this);
	    var d3node = d3.select(el);
	    this.state.width = d3node.node().parentNode.offsetWidth;
	    d3node.select('g')
	      .attr("transform", "translate(" + 20 + "," + 20 + ")");
	  },
	  componentWillMount: function(){
	    D3ServerAction.readyToReceive(this.props.id, this.state.start_date, this.state.end_date);
	  },
	  componentDidMount: function(){
	    BarChartStore.addChangeListener(this._onChange);
	    /**
	    When creating callbacks in JavaScript, you usually need to explicitly 
	    bind a method to its instance such that the value of this is correct. 
	    With React, every method is automatically bound to its component instance. 
	    React caches the bound method such that it's extremely CPU and memory efficient. 
	    It's also less typing!

	    That's why you don't need to do , this.updateDimensions.bind(this)
	    */
	    window.addEventListener("resize", this.updateDimensions);
	    // need this to re-render after we change the width
	    this.setupChart();
	    this._onChange();
	  },
	  setup_scales: function(domains){

	    var x = d3.scale.linear()
	       .range([0, this.state.width - 50])
	       .domain([0, domains.domains.x[1]]);

	     var y = d3.scale.ordinal()
	       .rangeRoundBands([0, this.state.height - 50], .1)
	       .domain(domains.y_values);

	    return {x: x,y: y};
	  },
	  componentDidUpdate: function(){
	    if(this.state.bars){
	      this.setupChart();
	    }
	  },
	  render: function () {
	    var svgStyle = {
	      width: this.state.width,
	      height: this.state.height,
	    };
	    if(this.state.bars){

	        var domains = D3Utils.calculatePosition(this.state.width, this.state.height, this.state.bars, "doc_count", "key");
	        var scales = this.setup_scales(domains);
	        

	        var Bars = this.state.bars.map(function(bar) {
	          return (React.createElement(Bar, {key: bar.key, data: bar, domains: scales}));
	        }, this);

	        return (
	          React.createElement("svg", {style: svgStyle}, 
	            React.createElement("g", {className: "graph"}, 
	            {Bars:Bars}, 
	            React.createElement(XAxis, {height: this.state.height, x: scales.x}), 
	            React.createElement(YAxis, {width: this.state.width, y: scales.y})
	            )
	          )
	        );
	    } else {
	      return (React.createElement("div", null));
	    }
	  },
	  _onChange: function(){
	    this.setState({
	       bars: BarChartStore.getAll(this.props.id)
	     });
	  }
	});

	module.exports = BarChart;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var BarVisualization = __webpack_require__(208);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var Bar = React.createClass({displayName: "Bar",
	  componentDidMount: function() {
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.datum(this.props.data)
	      .call(BarVisualization.enter, this.props.domains);
	  },
	  shouldComponentUpdate: function(nextProps) {
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.call(BarVisualization.update, nextProps.domains, 200);
	    return true;
	  },
	   componentDidUpate: function() {
	   },
	 
	  render: function() {
	    return (
	      React.createElement("g", {className: "Bar"})
	    );
	  }
	});

	module.exports = Bar;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var d3 = __webpack_require__(2);

	var BarVisualization = {};
	var duration = 250;
	var margin = {top: 10, left: 5};
	var padding = {top: 5, left: 5};
	var format = d3.format(",.0f");
	var x,y;

	BarVisualization.enter = function(selection, domains) {
	    x = domains.x;
	    y = domains.y;

	    selection
	        .attr("transform", function(d) {
	           return "translate(0," + y(d.key) + ")"; 
	         });

	 
	    selection.append("rect")
	        .attr("width", function(d) { return x(d.doc_count); })
	        .attr("height", y.rangeBand());

	    selection.append("text")
	        .attr("class", "value")
	        .attr("x", function(d) { return x(d.doc_count); })
	        .attr("y", y.rangeBand() / 2)
	        .attr("dx", -3)
	        .attr("dy", ".35em")
	        .attr("text-anchor", "end")
	        .text(function(d) { return format(d.doc_count); });
	};


	 
	BarVisualization.update = function(selection, domains, duration)  {
	  x = domains.x;
	  y = domains.y;

	  selection
	    .transition()
	    .duration(duration)
	    .attr("transform", function(d) {
	       return "translate(0," + y(d.key) + ")"; 
	     });

	    selection.select("rect")
	        .attr("width", function(d) { return x(d.doc_count); })
	        .attr("height", y.rangeBand());

	    selection.select("text")
	        .attr("class", "value")
	        .attr("x", function(d) { return x(d.doc_count); })
	        .attr("y", y.rangeBand() / 2)
	        .attr("dx", -3)
	        .attr("dy", ".35em")
	        .attr("text-anchor", "end")
	        .text(function(d) { return format(d.doc_count); });
	};

	// missing.. should probably do something here..
	// BarVisualization.exit = () => {

	// }

	module.exports = BarVisualization;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(210);
	var EventEmitter = __webpack_require__(211).EventEmitter;
	var D3Dispatcher = __webpack_require__(4);
	// var ThreadStore = require('./ThreadStore');
	var Constants = __webpack_require__(8);

	var _messages = {};
	var actions = Constants.actions;
	var CHANGE_EVENT = "change";

	function _addMessages(data_for, msgs){
	  // will process data first!!!
	  console.log("MESSAGES ", msgs);
	  _messages[data_for] = msgs;
	  //_messages[data_for].sort(function(a, b) { return b.doc_count - a.doc_count; });
	}

	var BarChartStore = assign({}, EventEmitter.prototype, {
	  
	  emitChange: function(id){
	    this.emit(CHANGE_EVENT, id);
	  },
	  addChangeListener: function(callback){
	    this.on(CHANGE_EVENT, callback);
	  },
	  removeChangeListener: function(){
	    this.removeListener(CHANGE_EVENT, callback);
	  },
	  getAll: function(id){
	    return _messages[id];
	  }

	});


	BarChartStore.dispatchToken = D3Dispatcher.register(function(action){
	  switch(action.type){

	    case actions.RECEIVE_DATA:
	      _addMessages(action.data_for, action.data);
	      BarChartStore.emitChange(action.data_for);
	      break;

	    //case actions.LOAD_DATA:


	    default:
	      // do nothing
	  }
	});

	module.exports = BarChartStore;

/***/ },
/* 210 */
/***/ function(module, exports) {

	'use strict';
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function ownEnumerableKeys(obj) {
		var keys = Object.getOwnPropertyNames(obj);

		if (Object.getOwnPropertySymbols) {
			keys = keys.concat(Object.getOwnPropertySymbols(obj));
		}

		return keys.filter(function (key) {
			return propIsEnumerable.call(obj, key);
		});
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = ownEnumerableKeys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 211 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var d3 = __webpack_require__(2);

	module.exports = {
	  calculatePosition: function(width, height, data, x_key, y_key){

	    var min_x = d3.min(data, function(d) { return d[x_key]; })
	    var max_x = d3.max(data, function(d) { return d[x_key]; })

	    var min_y = d3.min(data, function(d) { return d[y_key]; })
	    var max_y = d3.max(data, function(d) { return d[y_key]; })

	    var data_size= data.length;

	    var y_values = data.map(function(d) { return d[y_key]; })
	    var x_values = data.map(function(d) { return d[x_key]; })

	    var domain = {
	      x: [min_x, max_x],
	      y: [min_y, max_y]
	    };
	    return {domains: domain, data_length: data_size, x_values: x_values, y_values: y_values };
	  },
	  setupTooltip: function(parentNode){
	    var tooltip = d3.select(parentNode).append("div");
	    tooltip.attr("class", "tooltip top-right");
	    tooltip.append("div").attr("class", "tooltip-inner");
	    tooltip.style("opacity", 0);
	    return tooltip;
	  },
	  calculateColor: function(domain, range){
	    if(range){
	      var color = d3.scale.linear()
	      .domain(domain)
	      .range(range);  
	    } else {
	      var color = d3.scale.category10()
	      .domain(domain);
	    }
	    

	    return color;
	  },
	  calculateRadius: function(domain, range){
	    var rScale = d3.scale.linear()
	       .domain(domain)
	       .range(range);
	    return rScale;
	  }
	};



/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var XAxis = React.createClass({displayName: "XAxis",
	  componentDidMount: function() {

	    // wrap element in d3
	    
	    var axis = d3.svg.axis().scale(this.props.x).orient(this.props.orient || 'top').tickSize(-this.props['height']);
	    this.d3Node = d3.select(this.getDOMNode());

	    this.d3Node.transition()
	               .duration(2000)
	               .style("opacity", this.props.sorted);

	    if(this.props.orient === 'bottom'){
	      this.d3Node
	        .transition()
	        .duration(2000)
	        .attr("transform", "translate(0," + this.props['height']  + ")")
	    }

	    this.d3Node
	       .call(axis);

	  },
	  shouldComponentUpdate: function(nextProps) {
	    // if (nextProps.data.update) {
	    //   this.d3Node.datum(nextProps.data);
	    // }
	    var axis = d3.svg.axis().scale(nextProps.x).orient(this.props.orient || 'top').tickSize(-nextProps['height']);
	    this.d3Node = d3.select(this.getDOMNode());

	    this.d3Node.transition()
	               .duration(2000)
	               .style("opacity", nextProps.sorted);
	    
	    this.d3Node
	       .call(axis);

	    if(nextProps.orient === 'bottom'){
	      this.d3Node
	        .transition()
	        .duration(2000)
	        .attr("transform", "translate(0," + nextProps['height']  + ")")
	    }

	    return true;
	  },
	  // componentDidUpate() {
	  //   this.d3Node.datum(this.props.data);
	  // },
	  // componentWillUnMount() {

	  // },
	  render: function() {
	    return (
	      React.createElement("g", {className: "x axis"})
	    );
	  }
	});

	module.exports = XAxis;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var YAxis = React.createClass({displayName: "YAxis",
	  componentDidMount: function() {

	    // wrap element in d3
	    var yAxis = d3.svg.axis().scale(this.props.y).orient("left").tickSize(0);
	    this.d3Node = d3.select(this.getDOMNode());

	    this.d3Node.transition()
	               .duration(2000)
	               .style("opacity", this.props.sorted);


	    this.d3Node
	       .call(yAxis);

	  },
	  shouldComponentUpdate: function(nextProps) {
	    var yAxis = d3.svg.axis().scale(nextProps.y).orient("left").tickSize(0);
	    this.d3Node = d3.select(this.getDOMNode());

	    this.d3Node.transition()
	               .duration(2000)
	               .style("opacity", nextProps.sorted);
	    
	    this.d3Node
	       .call(yAxis);

	    return true;
	  },
	  // componentDidUpate() {
	  //   this.d3Node.datum(this.props.data);
	  // },
	  // componentWillUnMount() {

	  // },
	  render: function() {
	    return (
	      React.createElement("g", {className: "y axis"})
	    );
	  }
	});

	module.exports = YAxis;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var Circle = __webpack_require__(216);
	var BubbleChartStore = __webpack_require__(218);
	var d3 = __webpack_require__(2);
	var Utils = __webpack_require__(1);
	var D3Utils = __webpack_require__(212);
	var XAxis = __webpack_require__(213);
	var YAxis = __webpack_require__(214);
	var Legend = __webpack_require__(219);
	var D3ServerAction = __webpack_require__(3);


	var CHANGE_EVENT="change";

	var BubbleChart = React.createClass({displayName: "BubbleChart",
	  getInitialState: function(){

	    // get data from server.
	    //D3ServerAction.readyToReceive(this.props.id);
	    
	    return{
	      bars: [],//BubbleChartStore.getAll(this.props.id),
	      width: this.props.width,
	      height: this.props.height,
	      sorted: 0,
	      start_date: "12/18/2013 00:00",
	      end_date: "12/19/2013 00:00"
	    };
	  },
	  getDefaultProps: function(){
	    return {
	      width: '500',
	      height: '200',
	    };
	  },
	  // componentWillMount: function(){

	  // },
	  updateDimensions: function(){
	    setTimeout(function(){
	      var el = React.findDOMNode(this);
	      var d3node = d3.select(el);
	      //console.log("AND HERE ", d3node.node().parentNode.offsetWidth);
	      this.setState({width: d3node.node().parentNode.offsetWidth});
	    }.bind(this),500);  
	  },
	  setupChart: function(){
	    var el = React.findDOMNode(this);
	    var d3node = d3.select(el);
	    var parentNode = d3node.node().parentNode;

	    this.state.tooltip = D3Utils.setupTooltip(parentNode);
	    this.state.width = parentNode.offsetWidth;
	    d3node.select('g')
	      .attr("transform", "translate(" + 20 + "," + 20 + ")");
	  },
	  componentWillMount: function(){
	    console.log("HERE "+ this.props.id)
	    D3ServerAction.readyToReceiveBubble(this.props.id, this.state.start_date, this.state.end_date);
	    //Utils.getServerData(this.props.id);
	  },
	  componentDidMount: function(){
	    BubbleChartStore.addChangeListener(this._onChange);
	    /**
	    When creating callbacks in JavaScript, you usually need to explicitly 
	    bind a method to its instance such that the value of this is correct. 
	    With React, every method is automatically bound to its component instance. 
	    React caches the bound method such that it's extremely CPU and memory efficient. 
	    It's also less typing!

	    That's why you don't need to do , this.updateDimensions.bind(this)
	    */
	    window.addEventListener("resize", this.updateDimensions);
	    // need this to re-render after we change the width
	    this.setupChart();
	    this._onChange();
	  },
	  setup_scales: function(domains){

	    var x = d3.scale.linear()
	       .range([0, this.state.width - 50])
	       .domain([0, domains.domains.y[1]]);


	    var y = d3.scale.linear()
	      .range([20, this.state.height - 40])
	      .domain(domains.domains.x);

	    return {x: x,y: y};
	  },
	  componentDidUpdate: function(){
	    if(this.state.bars){
	      this.setupChart();
	    }
	  },
	  _onClick: function(){
	    //sorting.
	    this.setState({
	      sorted: Math.abs(this.state.sorted  - 1),
	    })
	  },
	  render: function () {
	    var svgStyle = {
	      width: this.state.width,
	      height: this.state.height,
	    };
	    if(this.state.bars && this.state.bars.length > 0){

	        var setup = D3Utils.calculatePosition(this.state.width, this.state.height, this.state.bars, "doc_count", "key");
	        var colors = D3Utils.calculateColor([0, 500, 1000], ["red", "yellow", "green"]);
	        // setup.domains.x[1] is the maximum x;
	        var radius = D3Utils.calculateRadius([0, setup.domains.x[1]], [1, 20]);
	        var scales = this.setup_scales(setup);
	        
	        var Circles = this.state.bars.map(function(bar, i) {
	            return (React.createElement(Circle, {key: bar.key, data: bar, domains: setup, scales: scales, radius: radius, color: colors, tooltip: this.state.tooltip, sorted: this.state.sorted}));
	        }, this);

	        var LegendItems = colors.domain().map(function(color, index){
	          return  (React.createElement(Legend, {data: color, colors: colors, width: this.state.width, index: index}))
	        }, this);
	        //console.log("ERROR?FF")
	        return (
	          React.createElement("div", {style: {width:'100%'}}, 
	            React.createElement("button", {onClick: this._onClick}, "SORT"), 
	            React.createElement("svg", {style: svgStyle}, 
	              React.createElement("g", {className: "graph"}, 
	                {Circles:Circles}, 
	                React.createElement(XAxis, {height: this.state.height, x: scales.x, sorted: this.state.sorted}), 
	                React.createElement(YAxis, {width: this.state.width, y: scales.y, sorted: this.state.sorted}), 
	                React.createElement("g", {class: "legend"}, 
	                  {LegendItems:LegendItems}
	                )
	              )
	            )
	          )
	        );
	    } else {
	      return (React.createElement("div", null));
	    }
	  },
	  _onChange: function(){
	    this.setState({
	       bars: BubbleChartStore.getAll(this.props.id)
	     });
	  }
	});

	module.exports = BubbleChart;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var CircleVisualization = __webpack_require__(217);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var Circle = React.createClass({displayName: "Circle",
	  componentDidMount: function() {
	    // console.log("updating here");
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.datum(this.props.data)
	      .call(CircleVisualization.enter,this.props.domains, this.props.scales, this.props.radius, this.props.color, this.props.tooltip);
	  },
	  shouldComponentUpdate: function(nextProps) {
	    //console.log("CALLED")
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.call(CircleVisualization.update,this.props.domains, this.props.scales, this.props.radius, this.props.color, this.props.tooltip,nextProps.sorted, 200);
	    return true;
	  },
	   componentDidUpate: function() {
	    // console.log("here in update");
	   },
	  // componentWillUnMount() {

	  // },
	  render: function() {
	    return (
	      React.createElement("circle", {className: "circle"})
	    );
	  }
	});

	module.exports = Circle;

/***/ },
/* 217 */
/***/ function(module, exports) {

	var CircleVisualization = {};

	CircleVisualization.enter = function (selection, options, scales, rScale, color, tooltip) {

	   var x = scales.x;
	   var y = scales.y;


	    selection
	      .attr("class", "dot")
	      .attr("r", function(d) {
	       return rScale(d.doc_count); 
	     })
	      .attr("cx", function(d) { return x(Math.random()*options.domains.y[1]); })
	      .attr("cy", function(d) { return y(Math.random()*options.domains.x[1]); })
	      .style("fill", function(d) { return color(d.doc_count); })
	      .on("mouseover", function(d) {
	          tooltip.transition()
	          .duration(200)
	          .style("opacity", .9);

	          tooltip.select('.tooltip-inner').html("Bike #"+d.key);

	          tooltip
	            .style("left", (d3.event.pageX + 5) + "px")
	            .style("top", (d3.event.pageY - 28) + "px");
	             
	      })
	      .on("mouseout", function() {
	          // Remove the info text on mouse out.
	           tooltip.transition()
	               .duration(500)
	               .style("opacity", 0);
	      });


	};

	CircleVisualization.update = function (selection, options, scales, rScale, color, tooltip, sorted,  duration) {
	  
	   var x = scales.x;
	   var y = scales.y;

	    selection
	      .transition()
	      .duration(duration)
	      .attr("r", function(d) {
	        if(sorted)
	          return 3.5; 
	        else
	          return rScale(d.doc_count); 
	      })
	      .attr("cx", function(d) { 
	        if(sorted)
	          return x(d.key);
	        else
	          return x(Math.random()*options.domains.y[1]); 
	      })
	      .attr("cy", function(d) { 
	        if(sorted)
	          return y(d.doc_count) 
	        else
	          return y(Math.random()*options.domains.x[1]); 
	      })
	      .style("fill", function(d) { return color(d.doc_count); })

	};


	module.exports = CircleVisualization;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(210);
	var EventEmitter = __webpack_require__(211).EventEmitter;
	var D3Dispatcher = __webpack_require__(4);
	// var ThreadStore = require('./ThreadStore');
	var Constants = __webpack_require__(8);

	var _messages = {};
	var actions = Constants.actions;
	var CHANGE_EVENT = "change";

	function _addMessages(data_for, msgs){
	  // will process data first!!!
	  console.log("MESSSSSS", msgs);
	  _messages[data_for] = msgs;
	  _messages[data_for].sort(function(a, b) { return b.doc_count - a.doc_count; });
	}

	var BubbleChartStore = assign({}, EventEmitter.prototype, {
	  
	  emitChange: function(id){
	    this.emit(CHANGE_EVENT, id);
	  },
	  addChangeListener: function(callback){
	    this.on(CHANGE_EVENT, callback);
	  },
	  removeChangeListener: function(){
	    this.removeListener(CHANGE_EVENT, callback);
	  },
	  getAll: function(id){
	    return _messages[id];
	  }

	});


	BubbleChartStore.dispatchToken = D3Dispatcher.register(function(action){
	  switch(action.type){

	    case actions.RECEIVE_BUBBLE_DATA:
	      console.log("JEREEEEEE", action.data_for);
	      _addMessages(action.data_for, action.data);
	      console.log("after is");
	      BubbleChartStore.emitChange(action.data_for);
	      break;

	    //case actions.LOAD_DATA:


	    default:
	      // do nothing
	  }
	});

	module.exports = BubbleChartStore;

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var LegendVisualization = __webpack_require__(220);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var Legend = React.createClass({displayName: "Legend",
	  componentDidMount: function() {
	    // console.log("updating here");
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.datum(this.props.data)
	      .call(LegendVisualization.enter,this.props.colors, this.props.width, this.props.index);
	  },
	  shouldComponentUpdate: function(nextProps) {
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.datum(this.props.data)
	      .call(LegendVisualization.update,this.props.colors, this.props.width, this.props.index, 200);
	    return true;
	  },
	  //  componentDidUpate() {
	  //   // console.log("here in update");
	  //  },
	  // componentWillUnMount() {

	  // },
	  render: function() {
	    return (
	      React.createElement("g", {className: "legend"})
	    );
	  }
	});



	module.exports = Legend;

/***/ },
/* 220 */
/***/ function(module, exports) {

	var LegendVisualization = {};

	LegendVisualization.enter = function (selection, color, width, index) {


	  selection
	      .attr("class", "legend")
	      .attr("transform", function(d, i) { 
	        return "translate(0," + index * 20 + ")"; 
	      });

	  selection.append("rect")
	      .attr("x", width - 60)
	      .attr("width", 18)
	      .attr("height", 18)
	      .style("fill", color);

	  selection.append("text")
	      .attr("x", width - 80)
	      .attr("y", 9)
	      .attr("dy", ".35em")
	      .style("text-anchor", "end")
	      .text(function(d) { return ">="+ d; });

	};


	LegendVisualization.update = function (selection, color, width, index) {

	  selection
	      .attr("class", "legend")
	      .attr("transform", function(d, i) { 
	        return "translate(0," + index * 20 + ")"; 
	      });

	  selection.select("rect")
	      .attr("x", width - 60)
	      .attr("width", 18)
	      .attr("height", 18)
	      .style("fill", color);

	  selection.select("text")
	      .attr("x", width - 80)
	      .attr("y", 9)
	      .attr("dy", ".35em")
	      .style("text-anchor", "end")
	      .text(function(d) { return ">="+ d; });

	};


	module.exports = LegendVisualization;

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var Line = __webpack_require__(222);
	var LineChartStore = __webpack_require__(224);
	var d3 = __webpack_require__(2);
	var Utils = __webpack_require__(1);
	var D3Utils = __webpack_require__(212);
	var XAxis = __webpack_require__(213);
	var YAxisLine = __webpack_require__(225);
	var Legend = __webpack_require__(219);
	var D3ServerAction = __webpack_require__(3);

	var CHANGE_EVENT="change";
	var parseDate = d3.time.format("%m/%d/%Y %H:%M").parse;

	var getDataFromServer = function(id){
	  // console.log(LineChart.props);
	  var data = LineChartStore.getAll(id);
	  return data;
	}




	var LineChart = React.createClass({displayName: "LineChart",
	  getInitialState: function(){

	    // get data from server.
	    //D3ServerAction.readyToReceive(this.props.id);
	    // var data = getDataFromServer();

	    return{
	      bars: [],//data.raw_data,
	      width: this.props.width,
	      height: this.props.height,
	      activity: [],//data.activity
	      start_date: "05/06/2014 00:00",
	      end_date: "05/07/2014 00:00"
	    };
	  },
	  getDefaultProps: function(){
	    return {
	      width: '500',
	      height: '500',
	    };
	  },
	  // componentWillMount: function(){

	  // },
	  updateDimensions: function(){
	    setTimeout(function(){
	      var el = React.findDOMNode(this);
	      var d3node = d3.select(el);
	      //console.log("AND HERE ", d3node.node().parentNode.offsetWidth);
	      this.setState({width: d3node.node().parentNode.offsetWidth});
	    }.bind(this),500);  
	  },
	  setupChart: function(){
	    var el = React.findDOMNode(this);
	    var d3node = d3.select(el);
	    var parentNode = d3node.node().parentNode;

	    this.state.tooltip = D3Utils.setupTooltip(parentNode);
	    this.state.width = parentNode.offsetWidth;
	    d3node.select('g')
	      .attr("transform", "translate(" + 20 + "," + 20 + ")");
	  },
	  componentWillMount: function(){
	    //console.log("HERE IN LINE ", this.props.id);
	    //D3ServerAction.readyToReceiveLine(this.props.id);
	    //Utils.getServerData(this.props.id);
	    
	  },
	  componentDidMount: function(){
	    this.setupChart();
	    this.state.colors = D3Utils.calculateColor([0, 100]);
	    
	    D3ServerAction.readyToReceiveLine(this.props.id, this.state.start_date, this.state.end_date);
	    LineChartStore.addChangeListener(this._onChange);
	    
	    /**
	    When creating callbacks in JavaScript, you usually need to explicitly 
	    bind a method to its instance such that the value of this is correct. 
	    With React, every method is automatically bound to its component instance. 
	    React caches the bound method such that it's extremely CPU and memory efficient. 
	    It's also less typing!

	    That's why you don't need to do , this.updateDimensions.bind(this)
	    */
	    window.addEventListener("resize", this.updateDimensions);
	    // need this to re-render after we change the width
	    
	    //this._onChange();
	  },
	  setup_scales: function(domains){
	    var x = d3.time.scale()
	       .range([0, this.state.width - 80])
	       .domain([parseDate(this.state.start_date), parseDate(this.state.end_date)]);

	    var ydomain = [
	            0,
	            d3.max(this.state.activity, function(c) { 
	              if(c.visible)
	                return d3.max(c.values, function(v) { return v.activity; }); 
	              else
	                return 0;
	            })
	          ]
	    var y = d3.scale.linear()
	      .range([this.state.height , 0])
	      .domain(ydomain);
	    // console.log("MAX Y IS ", ydomain[1]);
	    // console.log("HEIGHT IS ", this.state.height);
	    // console.log("draw at ", y(ydomain[1]));
	    this.state.scales = {x: x,y: y};

	    return {x: x,y: y};
	  },
	  componentDidUpdate: function(){
	    if(this.state.bars){
	      this.setupChart();
	      var context = this;
	      d3.select('#mouse_tracker').on('mousemove', function(){
	        //console.log("CALLED AGAIN??", this);
	        var bisectDate = d3.bisector(function(d) {
	           return d.date; 
	         }).left;

	        var el = React.findDOMNode(context);
	        var d3node = d3.select(el);
	        var mouse_x = d3.mouse(this)[0] // Finding mouse x position on rect
	        var graph_x = context.state.scales.x.invert(mouse_x); // 
	        var format = d3.time.format('%b %Y'); // Format hover date text to show three letter month and full year
	         /* d3.mouse(this)[0] returns the x position on the screen of the mouse. xScale.invert function is reversing the process that we use to map the domain (date) to range (position on screen). So it takes the position on the screen and converts it into an equivalent date! */
	        
	        d3node
	        .selectAll(".tooltip2").text(function(d){

	           i = bisectDate(d.values, graph_x, 0); // use our bisectDate function that we declared earlier to find the index of our data array that is close to the mouse cursor
	           d0 = d.values[i - 1];
	           d1 = d.values[i];
	           if(d1 && d0)
	             d = graph_x - d0.date > d1.date - graph_x ? d1 : d0;
	           else if(d0)
	             d = d0;
	           else
	             d={activity: null};

	           return (d.activity);
	        });
	      });
	    }
	  },
	  render: function () {
	    console.log("re-rendering")
	    var svgStyle = {
	      width: this.state.width,
	      height: Number(this.state.height) + 50,
	    };
	    if(this.state.bars && this.state.bars.length > 0){

	        //console.log(this.state.activity);

	        var el = React.findDOMNode(this);
	        var d3node = d3.select(el);

	        var setup = {}//D3Utils.calculatePosition(this.state.width, this.state.height, this.state.bars, "doc_count", "key");
	        var scales = this.setup_scales(setup);

	        
	        setup.start_date = this.state.start_date;
	        setup.end_date = this.state.end_date;
	        
	        var Lines = this.state.activity.map(function(bar, i) {
	            return (React.createElement(Line, {key: bar.key, data: bar, domains: setup, scales: this.state.scales, color: this.state.colors, tooltip: this.state.tooltip, activity: this.state.activity, width: this.state.width, index: i, parent: d3node, view: this}));
	        }, this);

	  
	        return (
	            React.createElement("svg", {style: svgStyle}, 
	              React.createElement("g", {className: "graph"}, 
	                React.createElement("rect", {id: "mouse_tracker", width: this.state.width, height: this.state.height, x: "0", y: "0", className: "mouse-tracker", style: {fill:'white'}}), 
	                {Lines:Lines}, 
	                React.createElement(XAxis, {height: this.state.height, x: this.state.scales.x, orient: "bottom"}), 
	                React.createElement(YAxisLine, {width: this.state.width, y: this.state.scales.y})
	              )
	            )
	        );
	    } else {
	      return (React.createElement("div", null));
	    }
	  },
	  _onChange: function(){
	    //console.log("in change");
	    var data = getDataFromServer(this.props.id);
	    //console.log("DATA is ", data);
	    this.setState({
	       bars: data.raw_data,
	       activity: data.activity
	     });
	  },

	});

	module.exports = LineChart;

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var LineVisualization = __webpack_require__(223);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var Line = React.createClass({displayName: "Line",
	  componentDidMount: function() {
	    // console.log("updating here");
	    this.d3Node = d3.select(this.getDOMNode());
	    this.d3Node.datum(this.props.data)
	      .call(LineVisualization.enter,this.props.domains, this.props.scales, this.props.radius, this.props.color, this.props.tooltip, this.props.activity, this.props.width, this.props.index, this.props.parent, this.props.view)
	      
	      //.call(Legend.....)
	  },
	  shouldComponentUpdate: function(nextProps) {
	    //console.log("CALLED")
	     this.d3Node = d3.select(this.getDOMNode())
	     this.d3Node//.datum(this.props.data)
	     .call(LineVisualization.update,this.props.domains, nextProps.scales, this.props.radius, this.props.color, this.props.tooltip, nextProps.activity, nextProps.width, this.props.index, this.props.parent, this.props.view, 200)

	     return true;
	  },
	   componentDidUpate: function() {
	    // console.log("here in update");
	   },
	  // componentWillUnMount() {

	  // },
	  render: function() {
	    return (
	      React.createElement("g", {className: "city"})
	    );
	  }
	});

	module.exports = Line;

/***/ },
/* 223 */
/***/ function(module, exports) {

	var LineVisualization = {};

	function findMaxY(data){  // Define function "findMaxY"
	      var maxYValues = data.map(function(d) { 
	        if (d.visible){
	          return d3.max(d.values, function(value) { // Return max rating value
	            return value.activity; })
	        }
	      });
	      return d3.max(maxYValues);
	  }

	  

	LineVisualization.enter = function (selection, options, scales, rScale, color, tooltip, activity, width, index, parent, view) {

	   var x = scales.x;
	   var y = scales.y;

	   var line = d3.svg.line()
	        .interpolate("cardinal")
	        .x(function(d) { return x(d.date); })
	        .y(function(d) { 
	          console.log("activity" + d.activity + "is "+ y(d.activity))
	          console.log("and x is ", d.date);
	          return y(d.activity); 
	        })
	   
	   var legendSpace = 450 / activity.length; 

	   selection
	   .append("rect")
	   .attr("width", 10)
	   .attr("height", 10)                                    
	   .attr("x", width - 80) 
	   .attr("y", function (d, i) { return (legendSpace)+index*(legendSpace) - 8; })  // spacing
	   .attr("fill",function(d) {
	     return d.visible ? color(d.name) : "#F1F1F2"; // If array key "visible" = true then color rect, if not then make it grey 
	   })
	   .attr("class", "legend-box")

	   .on("click", function(d){ // On click make d.visible 
	     d.visible = !d.visible; // If array key for this data selection is "visible" = true then make it false, if false then make it true

	     var maxY = findMaxY(activity); // Find max Y rating value categories data with "visible"; true
	     y.domain([0,maxY]); // Redefine yAxis domain based on highest y value of categories data with "visible"; true
	     
	      view.setState({
	       scales: {x: x,y: y}
	      });
	     
	     selection.select("path")
	       .transition()
	       .duration(500)
	       .attr("d", function(d){
	         return d.visible ? line(d.values) : null; // If d.visible is true then draw line for this d selection
	       });

	     selection.select("rect")
	       .transition()
	       .duration(500)
	       .attr("fill", function(d) {
	       return d.visible ? color(d.name) : "#F1F1F2";
	     });
	   })

	   .on("mouseover", function(d){

	     d3.select(this)
	       .transition()
	       .attr("fill", function(d) { return color(d.name); });

	     d3.select("#line-" + d.name)
	       .transition()
	       .style("stroke-width", 2.5);  
	   })

	   .on("mouseout", function(d){

	     d3.select(this)
	       .transition()
	       .attr("fill", function(d) {
	       return d.visible ? color(d.name) : "#F1F1F2";});

	     d3.select("#line-" + d.name)
	       .transition()
	       .style("stroke-width", 1.5);
	   });
	   

	   selection.append("text")
	       .attr("x", width - 50) 
	       .attr("y", function (d, i) { return (legendSpace)+index*(legendSpace); })  // (return (11.25/2 =) 5.625) + i * (5.625) 
	       .text(function(d) { return d.name; }); 

	  selection.append("text") // http://stackoverflow.com/questions/22064083/d3-js-multi-series-chart-with-y-value-tracking
	        .attr("class", "tooltip2")
	        .attr("x", width - 100) // position tooltips  
	        .attr("y", function (d, i) {
	         return (legendSpace)+index*(legendSpace); 
	         })

	   selection.append("path")
	       .attr("class", "line")
	       .style("stroke", function(d) { return color(Number(d.name)); })
	       .attr("id", function(d) {
	         return "line-" + d.name; // Give line id of line-(insert issue name, with any spaces replaced with no spaces)
	       })
	       .attr("d", function(d) { 
	         return d.visible ? line(d.values) : null; // If array key "visible" = true then draw line, if not then don't 
	       })
	       .on("mouseover", function(d) {
	           tooltip.transition()
	           .duration(200)
	           .style("opacity", .9);

	           tooltip.select('.tooltip-inner').html("Station #"+d.name);

	           tooltip
	             .style("left", (d3.event.pageX + 5) + "px")
	             .style("top", (d3.event.pageY - 28) + "px");
	              
	       })
	       .on("mouseout", function() {
	           // Remove the info text on mouse out.
	            tooltip.transition()
	                .duration(500)
	                .style("opacity", 0);
	       });    

	};

	LineVisualization.update = function (selection, options, scales, rScale, color, tooltip, activity, width, index, parent, view) {
	    
	     var x = scales.x;
	     var y = scales.y;

	     var legendSpace = 450 / activity.length; 

	     var line = d3.svg.line()
	          .interpolate("cardinal")
	          .x(function(d) { return x(d.date); })
	          .y(function(d) { 
	            return y(d.activity); 
	          })

	     selection
	     .select("rect")
	     .attr("width", 10)
	     .attr("height", 10)                                    
	     .attr("x", width - 80) 
	     .attr("y", function (d, i) { return (legendSpace)+index*(legendSpace) - 8; })  // spacing
	     .attr("fill",function(d) {
	       return d.visible ? color(d.name) : "#F1F1F2"; // If array key "visible" = true then color rect, if not then make it grey 
	     })
	     .attr("class", "legend-box")

	     .on("click", function(d){ // On click make d.visible 
	       d.visible = !d.visible; // If array key for this data selection is "visible" = true then make it false, if false then make it true

	       var maxY = findMaxY(activity); // Find max Y rating value categories data with "visible"; true
	     
	       y.domain([0,maxY]); // Redefine yAxis domain based on highest y value of categories data with "visible"; true
	        view.setState({
	         scales: {x: x,y: y}
	        })

	      selection
	        .select("path")
	         .style("opacity", 0)
	         .attr("d", function(d){
	           return d.visible ? line(d.values) : null; // If d.visible is true then draw line for this d selection
	         })
	         .transition()
	         .duration(1000)
	         .style("opacity", 1);

	       selection.select("rect")
	         .transition()
	         .duration(5000)
	         .attr("fill", function(d) {
	         return d.visible ? color(d.name) : "#F1F1F2";
	       });
	     });

	     selection.select("text")
	         .attr("x", width - 50) 
	         .attr("y", function (d, i) {

	           return (legendSpace)+index*(legendSpace); 
	          })  // (return (11.25/2 =) 5.625) + i * (5.625) 
	         .text(function(d) { return d.name; }); 

	    selection.select(".tooltip2") // http://stackoverflow.com/questions/22064083/d3-js-multi-series-chart-with-y-value-tracking
	          .attr("x", width - 100) // position tooltips  
	          .attr("y", function (d, i) {
	           return (legendSpace)+index*(legendSpace); 
	           });
	        
	     selection.select("path")
	        .transition()
	        .duration(1000)
	         .attr("d", function(d) { 
	           return d.visible ? line(d.values) : null; // If array key "visible" = true then draw line, if not then don't 
	         });
	  
	};


	module.exports = LineVisualization;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var assign = __webpack_require__(210);
	var EventEmitter = __webpack_require__(211).EventEmitter;
	var D3Dispatcher = __webpack_require__(4);
	// var ThreadStore = require('./ThreadStore');
	var Constants = __webpack_require__(8);
	var d3 = __webpack_require__(2);
	var _messages = {};
	var actions = Constants.actions;
	var CHANGE_EVENT = "change";

	var parseDate = d3.time.format("%m/%d/%Y %H:%M").parse;

	function _addMessages(data_for, msgs){
	  // will process data first!!!
	  //msgs = JSON.parse(msgs).aggregations.activity_per_station.buckets;
	  var activity = msgs.map(function(station) {
	    return {
	      name: station.key,
	      values: station.activity_per_hour.buckets.map(function(d) {
	        return {date: parseDate(d.key_as_string), activity: +d.doc_count};
	      }),
	      visible: true
	    };
	  });

	  _messages[data_for] = {
	      raw_data: msgs,
	      activity: activity
	  }

	  //_messages[data_for].sort(function(a, b) { return b.doc_count - a.doc_count; });
	}

	var LineChartStore = assign({}, EventEmitter.prototype, {
	  
	  emitChange: function(id){
	    this.emit(CHANGE_EVENT, id);
	  },
	  addChangeListener: function(callback){
	    this.on(CHANGE_EVENT, callback);
	  },
	  removeChangeListener: function(){
	    this.removeListener(CHANGE_EVENT, callback);
	  },
	  getAll: function(id){
	    console.log("MESSAGES ARE ", _messages);
	    return _messages[id];
	  }

	});


	LineChartStore.dispatchToken = D3Dispatcher.register(function(action){
	  switch(action.type){

	    case actions.RECEIVE_LINE_DATA:
	      _addMessages(action.data_for, action.data);
	      LineChartStore.emitChange(action.data_for);
	      break;

	    //case actions.LOAD_DATA:


	    default:
	      // do nothing
	  }
	});

	module.exports = LineChartStore;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	//var ViewActionCreators = require('../actions/ViewActionCreators');
	var d3 = __webpack_require__(2);

	var YAxis = React.createClass({displayName: "YAxis",
	  componentDidMount: function() {

	    // wrap element in d3
	    var yAxis = d3.svg.axis().scale(this.props.y).orient("left").tickSize(0);
	    this.d3Node = d3.select(this.getDOMNode());

	    // this.d3Node.style("opacity", 0)
	    //             .transition()
	    //             .duration(500)
	    //             .style("opacity", 1)
	    this.d3Node
	        .transition()
	        .duration(1000)
	        .call(yAxis)

	    this.d3Node.append("text")
	        .attr("transform", "rotate(-90)")
	        .attr("y", 6)
	        .attr("class", "ytext")
	        .attr("dy", ".71em")
	        .style("text-anchor", "end")
	        .text("Station Activity [start terminal]");

	  },
	  shouldComponentUpdate: function(nextProps) {
	    // console.log("IN Y UPDATEEEEE ");
	    var yAxis = d3.svg.axis().scale(nextProps.y).orient("left").tickSize(0);
	    this.d3Node = d3.select(this.getDOMNode());

	    
	    
	    this.d3Node
	    .transition()
	    .duration(500)
	    .call(yAxis)
	        .select(".ytext")
	         .transition()
	         .duration(2000)
	         .attr("transform", "rotate(-90)")
	         .attr("y", 6)
	         .attr("dy", ".71em")
	         .style("text-anchor", "end")
	         .text("Station Activity [start terminal]");


	    return true;
	  },
	  // componentDidUpate() {
	  //   this.d3Node.datum(this.props.data);
	  // },
	  // componentWillUnMount() {

	  // },
	  render: function() {
	    return (
	      React.createElement("g", {className: "y axis"})
	    );
	  }
	});

	module.exports = YAxis;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/** @jsx React.DOM */var React = __webpack_require__(10);
	var MapLogic = __webpack_require__(227)

	var MapPage = React.createClass({displayName: "MapPage",
	  componentDidMount: function(){
	    MapLogic();
	  },
	  render: function () {

	    return (
	    React.createElement("div", null, 
	       React.createElement("div", {id: "controls", class: "container"}, 
	         React.createElement("button", {id: "playbutton", class: "btn btn-m"}, "Loading"), 
	         React.createElement("span", {id: "calendar"}), 
	         React.createElement("span", {id: "timer", class: "right l"})
	       ), 
	       React.createElement("div", {id: "timeline", class: "container"}
	       ), 
	       
	       React.createElement("div", {id: "map", class: "container"}, 
	         React.createElement("span", {class: "map-tooltip hide"}, "Tooltip"), 
	         React.createElement("div", {id: "routes-info"})
	       )
	     )
	    );
	  }

	});

	module.exports = MapPage;

	// render: function () {

	//     var divStyle = {
	//       width: '50%'
	//     };

	//     return (
	//       <div class="container">
	//           <nav class="menu right"><span class="active">Map</span><a href="statistics.html">Statistics</a><a href="#">Predictions</a></nav>
	//           <h1>Data Cycles</h1>
	//           <h3>Bay Area Bike Share data visualization</h3>
	//       </div>
	//       <div id="timeline" class="container">
	//       </div>
	//       <div id="controls" class="container">
	//         <button id="playbutton" class="btn btn-m">Loading</button>
	//         <span id="timer" class="right l"></span>
	//       </div>
	//       <div id="map" class="container">
	//         <span class="map-tooltip hide">Tooltip</span>
	//       </div>
	//     );
	//   },

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var d3geotile = __webpack_require__(228)();
	var helperFunctions = __webpack_require__(229);

	var map = function(){

	var width, height;
	var second = 1000;
	var minute = 60 * second;
	var hour = 60 * minute;
	var day = 24 * hour;

	var dbJson;
	var play = false;
	var realtime;
	var bikes = [];
	var docks = [];
	var animduration = 15 * minute;
	var timer, timermemo = 0.313 * animduration;
	var playmemo;

	var colors = ["#FF0000", "#FF1100", "#FF2300", "#FF3400", "#FF4600", "#FF5700", "#FF6900", "#FF7B00", "#FF8C00", "#FF9E00", "#FFAF00", "#FFC100", "#FFD300", "#FFE400", "#FFF600", "#F7FF00", "#E5FF00", "#D4FF00", "#C2FF00", "#B0FF00", "#9FFF00", "#8DFF00", "#7CFF00", "#6AFF00", "#58FF00", "#47FF00", "#35FF00", "#24FF00", "#12FF00", "#00FF00"];

	var formatMilliseconds = function (d) {
	  var hours = Math.floor(d / hour);
	  var minutes = Math.floor((d % hour) / minute);
	  if (minutes < 10) {
	    minutes = "0" + minutes;
	  }
	  return hours + ":" + minutes;
	};

	var timeToMilliSeconds = function (string) {
	  var values = string.split(":");
	  return values[0] * hour + values[1] * minute;
	};

	var animateRing = function (id, color) {
	  d3.select("#ring-" + id)
	    .classed("hide", false)
	    .attr("stroke", color)
	    .transition()
	    .ease("elastic")
	    .duration(800)
	    .attr("r", "20px")
	    .each("end", function () {
	      d3.select(this)
	        .attr({
	          r: "5px", 
	          class: "hide ring"
	        });
	    });
	};

	var drawRing = function (id, color) {
	  d3.select(id)
	    .attr({
	      r: "5px", 
	      class: "hide ring"
	    })
	    .classed("hide", false)
	    .attr("stroke", color)
	    .transition()
	    .ease("elastic")
	    .duration(800)
	    .attr("r", "20px");
	};

	var drawRoutes = function (data) {
	  var routes = svgAnimations.append("svg:g")
	    .classed("routes", true)
	    .selectAll("path")
	    .data(data.features)
	    .enter()
	    .append("svg:path")
	    .attr({
	      class: "route", 
	      id: function(d){
	        return "route-" + d.properties.id
	      }, 
	      d: path, 
	      "fill-opacity": 0
	    });

	  bikes = svgAnimations.append("svg:g")
	    .classed("bikes", true)
	    .selectAll("circle")
	    .data(data.features)
	    .enter()
	    .append("circle")
	    .attr({
	      r: 8, 
	      fill: '#f33', 
	      class: "hide bike",
	      id: function(d) { return "bike-" + d.properties.id }
	    })
	    .on("mouseover", function(d) { showBikeRoute(d, this); })

	    // .on("mousemove", function(){ return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
	    .on("mouseout", function(){ hideBikesRoute(); });

	  renderZoom();
	};

	var hideBikesRoute = function() {
	  tooltip.classed("hide", true);
	  d3.selectAll(".route")
	    .transition()
	    .attr({
	      "stroke-opacity": 0
	    });
	  d3.selectAll(".ring")
	    .attr({
	      class: "hide ring"
	    });
	  routesinfo.html("");
	  routesInfolines.html("");
	}

	var showBikeRoute = function (d, bike) {

	  var svgAnimationsPosition = svgAnimations.node().getBoundingClientRect();
	  var position = bike.getBoundingClientRect(); 
	  var left = position.left - svgAnimationsPosition.left - 76;
	  var top = position.top - svgAnimationsPosition.top - 80;
	  var trips = [];
	  var id = d.properties.bikeID;
	  var speed = 1;
	  var delay = 0;
	  var delays = [delay];

	  for (var i = 0; i < bikesJson.features.length; i++) {
	    if (bikesJson.features[i].properties.bikeID == id) {
	      delay += bikesJson.features[i].properties.duration/speed;
	      bikesJson.features[i].properties.delay = delay;
	      trips.push(bikesJson.features[i].properties);
	    }
	  }

	  animateBikeRoute(trips);
	  // tooltip.attr({
	  //     style: "left:" + left + "px;top:" + top + "px;"
	  //   })
	  //   .classed("hide", false)
	  //   .html(id);

	}

	var animateBikeRoute = function(trips) {
	  var routeIdsArray = [];
	  var startRingIdsArray = [];
	  var endRingIdsArray = [];
	  var speed = 1;
	  var delay = 0;
	  var delays = [delay];
	  var svgAnimationsPosition = svgAnimations.node().getBoundingClientRect();

	  for (var i = 0; i < trips.length; i++) {
	    routeIdsArray.push("#route-" + trips[i].id); 
	    startRingIdsArray.push("#ring-" + trips[i].startTerminal);
	    endRingIdsArray.push("#ring-" + trips[i].endTerminal);
	    delay += trips[i].duration/speed;
	    delays.push(delay);

	    var routeInfoBlocPosition;

	    var routeInfoBloc = routesinfo.append("div")
	      .attr({
	        class: function() {
	          return "route-info-bloc";
	        }
	      })
	      .html("<p>" + (i * 2 + 1) + ". " + trips[i].startTime + ": " + trips[i].startStation + "</p><p>" + (i * 2 + 2) + ". " + trips[i].endTime + ": " + trips[i].endStation + "<p>");

	    var dock = d3.select("#dock-" + trips[i].endTerminal);
	    var infoBlocPosition = routeInfoBloc.node().getBoundingClientRect();
	    var startDockPosition = dock.node().getBoundingClientRect();
	    var endDockPosition = dock.node().getBoundingClientRect();
	    // array of coordinates of the lines between the bloc and their relative docks

	    routesInfolines.append("line")          // attach a line
	    .style("stroke", "red")  // colour the line
	    .attr({
	      "x1": startDockPosition.right - svgAnimationsPosition.left,   
	      "y1": startDockPosition.top - svgAnimationsPosition.top,      
	      "x2": infoBlocPosition.left - 10 - svgAnimationsPosition.left,     
	      "y2": infoBlocPosition.top + 10 - svgAnimationsPosition.top
	    });

	    routesInfolines.append("line")          // attach a line
	    .style("stroke", "blue")  // colour the line
	    .attr({
	      "x1": endDockPosition.right - svgAnimationsPosition.left,   
	      "y1": endDockPosition.bottom - svgAnimationsPosition.top,   
	      "x2": infoBlocPosition.left - 10 - svgAnimationsPosition.left,   
	      "y2": infoBlocPosition.bottom - 10 - svgAnimationsPosition.top
	    });

	    var stepNumber = routesStepNumber.append("g")
	      .attr({"class": "step-number"});


	    // stepNumber.append("circle")
	    //   .attr({
	    //     r: 5,
	    //     fill: "black",
	    //     cx: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	    //     cy: function (d) { return projection(d.geometry.coordinates)[1]; }, 
	    //   });

	    // stepNumber.append("text")
	    //     .attr("dx", function(d){return -10})
	    //     .text(i * 2 + 1);

	  }
	  
	  d3.selectAll(routeIdsArray.toString()).attr({
	      "stroke-width": 2, 
	      "stroke-linejoin": "round",
	      "stroke": "blue", 
	      "stroke-opacity": 1, 
	      "stroke-linecap": "round"
	    })
	    .attr("stroke-dasharray", function(d, i) {
	      var totalLength = d3.select(this).node().getTotalLength();
	      return totalLength + " " + totalLength; 
	    })
	    .attr("stroke-dashoffset", function() { 
	      var totalLength = d3.select(this).node().getTotalLength();
	      return totalLength; 
	    })
	    .transition()
	    .delay(function(d, i) { return delays[i]; })
	    .duration(function(d, i) { 
	      drawRing(startRingIdsArray[i], "orange");
	      drawRing(endRingIdsArray[i], "blue");
	      return d.properties.duration/speed; })
	    .ease("linear")
	    .attr("stroke-dashoffset", 0);
	};

	var unload = function () {
	  console.log("unload");
	  button.attr("disabled", true);
	  svgAnimations.selectAll("g").remove();
	  button.html("Loading…");
	};

	var drawDocks = function (data) {
	  // var c = d3.scale.linear()
	  //   .domain([0, 27])
	  //   .range([0, 1]);

	  docks = svgAnimations.append("g")
	    .classed("docks hide", true)
	    .selectAll("g")
	    .data(data.features)
	    .enter()
	    .append("g")
	    .attr({
	      id: function (d) { return "dock-" + d.properties.id }, 
	      class: "dock"
	    });

	  docks.append("circle")
	    .attr({
	      cx: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	      cy: function (d) { return projection(d.geometry.coordinates)[1]; }, 
	      r: "3px"
	    });
	    // .attr("fill", function (d) {
	    //   return colorscale(c(d.properties.places))
	    // });

	  docks.append("rect")
	    .attr({
	      class: "gauge-bg",
	      x: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	      y: function (d) { return projection(d.geometry.coordinates)[1]; }, 
	      width: "8px", 
	      transform: function (d) { return "translate(" + -4 + "," + -(d.properties.places + 6) + ")"; }, 
	      height: function (d) { return d.properties.places + 2 ; }
	    });

	  docks.append("rect")
	    .attr({
	      class: "gauge-qty",
	      x: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	      y: function (d) { return projection(d.geometry.coordinates)[1]; }, 
	      width: "6px", 
	      transform: function (d) { return "translate(" + -3 + "," + -(d.properties.places + 5) + ")"; }, 
	      height: function (d) { return d.properties.places; }, 
	      fill: "orange"
	    });

	  var rings = svgAnimations.append("g")
	    .attr({class: "rings"})
	    .selectAll("circle")
	    .data(data.features)
	    .enter()
	    .append("circle")
	    .attr({
	      id: function (d) { return "ring-" + d.properties.id },
	      class: "ring hide", 
	      fill: "none",
	      "stroke-width": "1px",
	      r: "5px",
	      cx: function (d) { return projection(d.geometry.coordinates)[0] }, 
	      cy: function (d) { return projection(d.geometry.coordinates)[1] }
	    });

	  renderZoom();
	};

	var setHandlePosition = function(t){
	  handle.attr("transform", function (d) { return "translate(" + animscale(t) + ")"; });
	};

	var setTimer = function(t) {
	  realtime = t * day / animduration;
	  var realTimeFormatted = formatMilliseconds(realtime);
	  timerdisplay.html(realTimeFormatted);
	  // console.log("timer", realTimeFormatted, timer);
	}

	var brushstart = function() {
	  playmemo = play;
	  play = false;
	};

	var brushing = function() {
	  if (d3.event.sourceEvent) { 
	    timermemo = animscale.invert(d3.mouse(this)[0]);
	    setHandlePosition(timermemo);
	    renderFrame(0);
	  }
	};

	var brushend = function() {
	  if(playmemo) {
	    play = true;
	    d3.timer(animate);
	  }
	};

	var animate = function (e) {
	  if (!play) {
	    timermemo = timer;
	    button.html("Play");
	    return true;
	  }
	  button.html("Stop");
	  renderFrame(e);
	};

	var renderFrame = function(e) {
	  timer = (timermemo + e) % animduration;
	  setTimer(timer); 
	  setHandlePosition(timer);

	  for (var i = 0; i < bikes[0].length; i++) {
	    d3.select(bikes[0][i])
	      .attr("transform", function (d) { return moveBike(d, this); });
	  }
	  // console.log("docks[0]", docks[0]);
	  for (var i = 0; i < docks[0].length; i++) {
	    // console.log("docks[0][i]", d3.select(docks[0][i]).select(".gauge-qty"));
	    setDockLevel(docks[0][i]);
	  }
	};

	var setDockLevel = function (dock) {
	  var currentQty = 0;
	  
	  d3.select(dock).select(".gauge-qty")
	      .attr({
	        transform: function (d) { 
	          for (var i = 0; i < d.properties.activity.length; i++) {
	            var changeTime = timeToMilliSeconds(d.properties.activity[i].time);
	            if (changeTime < realtime) {
	              currentQty = d.properties.activity[i].bikes_available;
	            }
	          }
	          return "translate(" + -3 + "," + -(currentQty + 5) + ")";
	        }, 
	        height: function (d) { return currentQty; }
	      });
	  

	};

	var moveBike = function(d, el) {
	  var startTime = timeToMilliSeconds(d.properties.startTime);
	  var endTime = timeToMilliSeconds(d.properties.endTime);
	  if (realtime - startTime > 0 && endTime - realtime > 0) {
	    if (d3.select(el).classed("hide")) {
	      d3.select(el).classed("hide", false);
	      if (play) {
	        animateRing(d.properties.startTerminal, "red");
	      }
	    }
	    var path = d3.select("#route-" + d.properties.id).node();
	    var p = path.getPointAtLength(path.getTotalLength() * (realtime - startTime) / (endTime - startTime));
	    return "translate(" + [p.x, p.y] + ")";
	  } else {
	    if (!d3.select(el).classed("hide")) {
	      d3.select(el).classed("hide", true);
	      if (play) {
	        animateRing(d.properties.endTerminal, "green");
	      }
	    }
	  } 
	};

	var renderZoom = function () {
	  var tiles = tile.scale(zoom.scale())
	    .translate(zoom.translate())();

	  projection.scale(zoom.scale() / 2 / Math.PI)
	    .translate(zoom.translate());
	  
	  var image = tilesLayer.style(prefix + "transform", matrix3d(tiles.scale, tiles.translate))
	    .selectAll(".tile")
	    .data(tiles, function (d) {
	      return d;
	    });

	  image.exit()
	    .each(function (d) {
	      this._xhr.abort();
	    })
	    .remove();

	  image.enter()
	    .append("svg")
	    .attr("class", "tile")
	    .style("left", function (d) {
	      return d[0] * 256 + "px";
	    }).style("top", function (d) {
	      return d[1] * 256 + "px";
	    }).each(function (d) {

	      var svgTile = d3.select(this);

	      this._xhr = d3.json("http://" + ["a", "b", "c"][(d[0] * 31 + d[1]) % 3] + ".tile.openstreetmap.us/vectiles-highroad/" + d[2] + "/" + d[0] + "/" + d[1] + ".json", function (error, json) {
	        var k = Math.pow(2, d[2]) * 256; // size of the world in pixels
	        
	        tilePath.projection()
	          .translate([k / 2 - d[0] * 256, k / 2 - d[1] * 256]) // [0°,0°] in pixels
	          .scale(k / 2 / Math.PI);
	        
	        svgTile.selectAll("path")
	          .data(json.features.sort(function (a, b) {
	            return a.properties.sort_key - b.properties.sort_key;
	          }))
	          .enter()
	          .append("path")
	          .attr("class", function (d) { return d.properties.kind; })
	          .attr("d", tilePath);
	      });
	    });

	  svgAnimations.selectAll(".dock circle")
	    .attr({
	      cx: function (d) { return projection(d.geometry.coordinates)[0]; },
	      cy: function (d) { return projection(d.geometry.coordinates)[1]; }
	    });

	  svgAnimations.selectAll(".gauge-qty")
	    .attr({
	      x: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	      y: function (d) { return projection(d.geometry.coordinates)[1]; }
	    });

	  svgAnimations.selectAll(".gauge-bg")
	    .attr({
	      x: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	      y: function (d) { return projection(d.geometry.coordinates)[1]; }
	    });
	  
	  svgAnimations.selectAll(".route")
	    .attr("d", path);

	  svgAnimations.selectAll(".ring")
	    .attr({
	      cx: function (d) { return projection(d.geometry.coordinates)[0]; }, 
	      cy: function (d) { return projection(d.geometry.coordinates)[1]; }
	    });

	  svgAnimations.selectAll(".bike")
	    .attr({
	      "transform": function(d) { return moveBike(d, this); }
	    });
	};

	var mousemoved = function () {
	  info.text(formatLocation(projection.invert(d3.mouse(this)), zoom.scale()));
	};

	var matrix3d = function (scale, translate) {
	  var k = scale / 256,
	    r = scale % 1 ? Number : Math.round;
	  return "matrix3d(" + [k, 0, 0, 0, 0, k, 0, 0, 0, 0, k, 0, r(translate[0] * scale), r(translate[1] * scale), 0, 1] + ")";
	};

	var prefixMatch = function (p) {
	  var i = -1,
	    n = p.length,
	    s = document.body.style;
	  while (++i < n)
	    if (p[i] + "Transform" in s) return "-" + p[i].toLowerCase() + "-";
	  return "";
	};

	var formatLocation = function (p, k) {
	  var format = d3.format("." + Math.floor(Math.log(k) / 2 - 2) + "f");
	  return (p[1] < 0 ? format(-p[1]) + "°S" : format(p[1]) + "°N") + " " + (p[0] < 0 ? format(-p[0]) + "°W" : format(p[0]) + "°E");
	};

	var loaded = function () {
	  button.attr("disabled", null);
	  handle.classed("hide", false);
	  svgAnimations.select(".docks").classed("hide", false);
	  setHandlePosition(timermemo);
	  setTimer(timermemo); 
	  button.html("Play");
	};



	function updateWindow(){
	  width = document.getElementById("map").clientWidth;
	  height = Math.max(500, window.innerHeight);
	};

	updateWindow();

	var prefix = prefixMatch(["webkit", "ms", "Moz", "O"]);

	var colorscale = d3.scale.linear()
	  .domain(d3.range(0, 1, 1.0 / (colors.length - 1)))
	  .range(colors);

	var timescale = d3.time.scale()
	  .domain([new Date, new Date])
	  .nice(d3.time.day)
	  .range([0, width]);

	var animscale = d3.scale.linear()
	  .domain([0, animduration])
	  .range([0, width]);

	var brush = d3.svg.brush()
	  .x(animscale)
	  .extent([0, 0])
	  .on("brushstart", brushstart)
	  .on("brush", brushing)
	  .on("brushend", brushend);

	var axis = d3.svg.axis()
	  .scale(timescale)
	  .ticks(24)
	  .tickFormat(d3.time.format("%H"))
	  .orient("top");

	var tile = d3.geo.tile()
	  .size([width, height]);

	var projection = d3.geo.mercator()
	  .scale((1 << 22) / 2 / Math.PI)
	  .translate([-width / 2, -height / 2]);

	var path = d3.geo.path()
	  .projection(projection);

	var tilePath = d3.geo.path()
	  .projection(projection);

	var zoom = d3.behavior.zoom()
	  .scale(projection.scale() * 2 * Math.PI).scaleExtent([1 << 20, 1 << 23])
	  .translate(projection([-122.4, 37.785])
	  .map(function (x) {
	    console.log('zoom', x);
	    return -x;
	  }))
	  .on("zoom", renderZoom);

	var map = d3.select("#map")
	  .call(zoom)
	  .on("mousemove", mousemoved);

	var routesinfo = d3.select("#routes-info");

	var tilesLayer = map.append("div")
	  .attr("id", "tileslayer");

	var svgAnimations = map.append("svg:svg")
	  .attr("id", 'animations')
	  .style("width", width + "px")
	  .style("height", height - 50 + "px")
	  .call(zoom);

	var routesInfolines = svgAnimations.append("g")
	  .attr("id", 'routes-info-lines')

	var routesStepNumber = svgAnimations.append("g")
	  .attr("id", 'routes-step-number')

	var info = map.append("div")
	  .attr("class", "info");

	var svgTimeline = d3.select("#timeline")
	  .append("svg")
	  .attr("width", width);

	var slider = svgTimeline.append("g")
	  .attr("transform", "translate(0,20)")
	  .call(axis)
	  .call(brush);

	var button = d3.select("#playbutton")
	  .attr('disabled', true);

	var handle = slider.append("polygon")
	  .attr("points", "-15,20 0,0 15,20")
	  .attr("id", "handle")
	  .classed("hide", true);

	var tooltip = d3.select(".map-tooltip");

	var timerdisplay = d3.select("#timer");

	projection.scale(zoom.scale() / 2 / Math.PI)
	  .translate(zoom.translate());

	d3.json("/api/timeline", function (error, json) {
	  if (error) {
	    console.log("error", error);
	  }
	  console.log(helperFunctions.buildBikesJson);
	  bikesJson = helperFunctions.buildBikesJson(json);
	  // var docksHash = buildDocksHash(json);
	  d3.json("/api/redis?start_date=2013/12/18", function(error, docksJson) {
	    if (error) {
	      console.log("error", error);
	    }
	    docksHash = helperFunctions.buildDocksHash(json, docksJson);
	    console.log("redis successsssss--------->", docksHash);
	    drawRoutes(bikesJson);
	    drawDocks(docksHash);
	    // console.log("successsssss--------->", docksHash);
	    console.log("successsssss--------->", bikesJson);
	    loaded();

	  });
	  
	});

	button.on("click", function () {
	  play = !play;
	  if (play) {
	    d3.timer(animate);
	  } 
	});

	window.onresize = updateWindow;

	}

	module.exports = map;

/***/ },
/* 228 */
/***/ function(module, exports) {

	module.exports = function() {
	  d3.geo.tile = function() {
	    var size = [960, 500],
	        scale = 256,
	        translate = [size[0] / 2, size[1] / 2],
	        zoomDelta = 0;

	    function tile() {
	      var z = Math.max(Math.log(scale) / Math.LN2 - 8, 0),
	          z0 = Math.round(z + zoomDelta),
	          k = Math.pow(2, z - z0 + 8),
	          origin = [(translate[0] - scale / 2) / k, (translate[1] - scale / 2) / k],
	          tiles = [],
	          cols = d3.range(Math.max(0, Math.floor(-origin[0])), Math.max(0, Math.ceil(size[0] / k - origin[0]))),
	          rows = d3.range(Math.max(0, Math.floor(-origin[1])), Math.max(0, Math.ceil(size[1] / k - origin[1])));

	      rows.forEach(function(y) {
	        cols.forEach(function(x) {
	          tiles.push([x, y, z0]);
	        });
	      });

	      tiles.translate = origin;
	      tiles.scale = k;

	      return tiles;
	    }

	    tile.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return tile;
	    };

	    tile.scale = function(_) {
	      if (!arguments.length) return scale;
	      scale = _;
	      return tile;
	    };

	    tile.translate = function(_) {
	      if (!arguments.length) return translate;
	      translate = _;
	      return tile;
	    };

	    tile.zoomDelta = function(_) {
	      if (!arguments.length) return zoomDelta;
	      zoomDelta = +_;
	      return tile;
	    };

	    return tile;
	  };
	};

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var bikeRoutes = __webpack_require__(230);
	var Docks = __webpack_require__(231)
	module.exports = {

	calcDockHash: function(){
	  var tripHash = {};
	  var mins = 0;
	  var hours = 0;
	  
	  for (var i = 0; i < 1440; i++){
	      var time = this.countTime(hours, mins);
	      hours = time[0];
	      mins = time[1];
	      time = time.join(":");
	      tripHash[time] = {"starting_trips": [], "ending_trips": []};
	  };

	  return tripHash;
	},



	countTime: function(hours, mins){
	  var countHours, countMins;
	  mins++
	  if (mins === 60) {
	    hours++;
	    mins = 0;
	    if (hours === 24){
	      hours = 0;
	    }
	  }

	  countHours = hours;

	  if (mins < 10) {
	    countMins = "0" + mins;
	  }
	  else {
	    countMins = ""+ mins;
	  }
	  return [countHours, countMins];
	},

	buildDocksHash: function (tripJson, dockInit) {
	  var hits = tripJson.hits.total;
	  var dockHash = this.calcDockHash();
	  var docks = new Docks();

	  for (var i = 0; i < hits; i++) {
	    var trip = tripJson.hits.hits[i]["_source"];
	    var startTime = trip.start_date.split(" ")[1];
	    var endTime = trip.end_date.split(" ")[1];
	    
	    dockHash[startTime].starting_trips.push(trip.start_terminal);
	    
	    if (trip.start_date.split(" ")[0] === trip.end_date.split(" ")[0]){
	      dockHash[endTime].ending_trips.push(trip.end_terminal);
	    }
	  };
	  console.log(dockHash);

	  for (var k = 0; k < docks.docksJson.features.length; k++) {
	    if (dockInit[k]){
	      docks.docksJson.features[k].properties.activity.push({
	        "time": "0:00",
	        "bikes_available": parseInt(dockInit[k].bikes_available)
	      });
	    }
	    else {
	      docks.docksJson.features[k].properties.activity.push({
	        "time": "0:00",
	        "bikes_available": parseInt(docks.docksJson.features[k].properties.places)
	      });
	    }
	  };

	  for (var key in dockHash) {
	    if (dockHash[key].starting_trips.length) {
	      for (var l = 0; l < dockHash[key].starting_trips.length; l++) {
	        for (var m = 0; m < docks.docksJson.features.length; m++) {
	          if (parseInt(dockHash[key].starting_trips[l]) === docks.docksJson.features[m].properties.id) {
	            var bikes = parseInt(docks.docksJson.features[m].properties.activity[docks.docksJson.features[m].properties.activity.length - 1].bikes_available);
	            bikes = bikes - 1 > 0 ? bikes - 1 : 0
	            docks.docksJson.features[m].properties.activity.push({
	              "time": key,
	              "bikes_available": bikes
	            })
	          }
	        }
	      }
	    }
	    if (dockHash[key].ending_trips.length) {
	      for (var l = 0; l < dockHash[key].ending_trips.length; l++) {
	        for (var m = 0; m < docks.docksJson.features.length; m++) {
	          if (parseInt(dockHash[key].ending_trips[l]) === docks.docksJson.features[m].properties.id) {
	            docks.docksJson.features[m].properties.activity.push({
	              "time": key,
	              "bikes_available": parseInt(docks.docksJson.features[m].properties.activity[docks.docksJson.features[m].properties.activity.length - 1].bikes_available) + 1
	            })
	          }
	        }
	      }
	    }
	  };
	  return docks.docksJson;
	},

	buildBikesJson: function (json) {
	  var hits = json.hits.total;
	  var bikesJson = {
	    "type": "FeatureCollection",
	    "features": []
	  };
	  for (var i = 0; i < hits; i++) {
	    var trip = json.hits.hits[i]["_source"];  
	    var duration = trip["trip_duration"];
	    var startTerminal = trip["start_terminal"];
	    var startStation = trip["start_station"];
	    var endTerminal = trip["end_terminal"];
	    var endStation = trip["end_station"];
	    var bikeID = trip["bike_id"];
	    var tempStart = trip["start_date"].split(" ");
	    var tempEnd = trip["end_date"].split(" ");
	    var startDate = tempStart[0];
	    var startTime = tempStart[1];
	    var endDate = tempEnd[0];
	    var endTime = tempEnd[1];
	    var bikeJson = this.buildBikeJson(duration, startTerminal, startDate, startTime, endTerminal, endDate, endTime, bikeID, i, startStation, endStation);
	    if (bikeJson) {
	      bikesJson.features.push(bikeJson);
	    }
	  };
	  return bikesJson;
	},
	buildBikeJson: function (duration, startTerminal, startDate, startTime, endTerminal, endDate, endTime, bikeID, tripID, startStation, endStation) {
	  var coordinates = bikeRoutes[startTerminal + "-" + endTerminal];
	  var geoJson = null;
	  if (!coordinates) {
	    if (duration <= 240) {
	      var coordinates = bikeRoutes[startTerminal + "-" + endTerminal + "s"];
	    } else if (duration > 240 && duration <= 600) {
	      var coordinates = bikeRoutes[startTerminal + "-" + endTerminal + "m"];
	    } else if (duration > 600) {
	      var coordinates = bikeRoutes[startTerminal + "-" + endTerminal + "l"];
	    }
	  }
	  if (coordinates) {
	    geoJson = {
	      "type": "Feature",
	      "properties": {
	        "duration": duration,
	        "id": tripID,
	        "bikeID": bikeID,
	        "startDate": startDate,
	        "startTime": startTime,
	        "endDate": endDate,
	        "endTime": endTime,
	        "startTerminal": startTerminal,
	        "endTerminal": endTerminal, 
	        "startStation": startStation, 
	        "endStation": endStation
	      },
	      "geometry": {
	        "type": "LineString",
	        "coordinates": coordinates.geometry.coordinates
	      }
	    };
	  } else console.log('coords not found', startTerminal, " and ", endTerminal)
	  return geoJson;
	}

	}

/***/ },
/* 230 */
/***/ function(module, exports) {

	var bikeRoutes = {
	  "41-42": {
	    "distance": 0.6203002822520967,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "41-49": {
	    "distance": 1.2916391726432206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "41-47": {
	    "distance": 1.3666266037514234,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "41-48": {
	    "distance": 1.246979222990658,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399144, 37.800912],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "41-45": {
	    "distance": 0.7785930868720814,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.398966, 37.794278],
	        [-122.400141, 37.794129],
	        [-122.401311, 37.793981],
	        [-122.4022, 37.793868],
	        [-122.402282, 37.794314],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "41-50": {
	    "distance": 0.9854321434623146,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393362, 37.794385],
	        [-122.393258, 37.794377],
	        [-122.393198, 37.794411],
	        [-122.393177, 37.794466],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "41-51": {
	    "distance": 1.2182376142262261,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "41-53": {
	    "distance": 1.8619717104242912,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "41-55": {
	    "distance": 0.9309198499879924,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "41-54": {
	    "distance": 1.7736260018259786,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "41-57": {
	    "distance": 2.2659063340269467,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "41-56": {
	    "distance": 0.5379716776471141,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "41-58": {
	    "distance": 3.1221004475521896,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "41-59": {
	    "distance": 3.0744097337418714,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "41-60": {
	    "distance": 1.7569747825965911,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "41-61": {
	    "distance": 2.6172538493666058,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "41-62": {
	    "distance": 1.872175943268067,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "41-63": {
	    "distance": 1.3652948524996538,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "41-64": {
	    "distance": 2.3289993489068013,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "41-65": {
	    "distance": 4.215691735799119,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "41-66": {
	    "distance": 3.834416817393993,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "41-67": {
	    "distance": 2.9882153646235565,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "41-68": {
	    "distance": 1.788816561641902,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "41-69": {
	    "distance": 3.349225650643202,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "41-70": {
	    "distance": 3.24586947048121,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "41-71": {
	    "distance": 1.7851723872587155,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "41-72": {
	    "distance": 2.4168984739720645,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "41-73": {
	    "distance": 1.4587248007921954,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "41-74": {
	    "distance": 0.777680820885413,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "41-75": {
	    "distance": 0.6945275857998316,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "41-76": {
	    "distance": 1.4565588164068568,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "41-77": {
	    "distance": 0.9360271456972942,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "41-82": {
	    "distance": 0.994632128373909,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "42-45": {
	    "distance": 0.930149525554598,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.401582, 37.795306],
	        [-122.401491, 37.794864],
	        [-122.401404, 37.794427],
	        [-122.402282, 37.794314],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "42-47": {
	    "distance": 1.567830145614489,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "42-48": {
	    "distance": 0.6676520683522738,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399144, 37.800912],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "42-49": {
	    "distance": 1.3419059695033848,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "42-50": {
	    "distance": 0.8459474385061303,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393362, 37.794385],
	        [-122.393258, 37.794377],
	        [-122.393198, 37.794411],
	        [-122.393177, 37.794466],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "42-51": {
	    "distance": 1.0787529092700419,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "42-53": {
	    "distance": 2.063175252287356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "42-54": {
	    "distance": 1.6508408171970623,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "42-55": {
	    "distance": 1.183110559286576,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.396649, 37.794578],
	        [-122.396732, 37.794568],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793494],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "42-56": {
	    "distance": 0.7901623869456977,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.396649, 37.794578],
	        [-122.396732, 37.794568],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793494],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "42-57": {
	    "distance": 2.4671098758900123,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "42-58": {
	    "distance": 3.3233039894152547,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "42-59": {
	    "distance": 3.2756132756049365,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "42-60": {
	    "distance": 1.1776476279582067,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "42-61": {
	    "distance": 2.8184573912296713,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "42-62": {
	    "distance": 2.0733794851311327,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "42-65": {
	    "distance": 4.416895277662184,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "42-63": {
	    "distance": 1.7153058730662896,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.397552, 37.792541],
	        [-122.398588, 37.792408],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "42-64": {
	    "distance": 2.530202890769867,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "42-66": {
	    "distance": 4.035620359257058,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "42-67": {
	    "distance": 3.1894189064866216,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "42-68": {
	    "distance": 1.9900201035049676,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "42-69": {
	    "distance": 3.5504291925062677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "42-71": {
	    "distance": 1.986375929121781,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "42-70": {
	    "distance": 3.4470730123442754,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "42-72": {
	    "distance": 2.6181020158351296,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "42-73": {
	    "distance": 0.9873433238076929,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.406256, 37.79792],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "42-74": {
	    "distance": 0.8279476177455769,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "42-75": {
	    "distance": 0.8957311276628975,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "42-76": {
	    "distance": 1.6577623582699224,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "42-77": {
	    "distance": 1.13723068756036,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "42-82": {
	    "distance": 0.3743336480929386,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "45-47": {
	    "distance": 0.9122632606979216,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "45-48": {
	    "distance": 1.633127320078912,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.404012, 37.79364],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.399891, 37.798833],
	        [-122.400061, 37.799678],
	        [-122.400249, 37.800617],
	        [-122.39954, 37.800707],
	        [-122.399475, 37.800725],
	        [-122.399427, 37.800744],
	        [-122.399337, 37.800794],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "45-49": {
	    "distance": 1.534254066284642,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "45-50": {
	    "distance": 1.723260401748784,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.404012, 37.79364],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393362, 37.794385],
	        [-122.393258, 37.794377],
	        [-122.393198, 37.794411],
	        [-122.393177, 37.794466],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "45-51": {
	    "distance": 1.5361987445808896,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "45-53": {
	    "distance": 1.4076083673707893,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "45-54": {
	    "distance": 2.0162408954674,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "45-55": {
	    "distance": 1.173534369486135,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "45-56": {
	    "distance": 0.7805861971452568,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "45-57": {
	    "distance": 1.8115429909734446,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "45-58": {
	    "distance": 2.6677371044986877,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "45-59": {
	    "distance": 2.6200463906883686,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "45-60": {
	    "distance": 1.8019724998090139,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.404012, 37.79364],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.402419, 37.799377],
	        [-122.40261, 37.800315],
	        [-122.402804, 37.801267],
	        [-122.402891, 37.801696],
	        [-122.402989, 37.802174],
	        [-122.403156, 37.803014],
	        [-122.403174, 37.803104],
	        [-122.403189, 37.803176],
	        [-122.403345, 37.803964],
	        [-122.403358, 37.804032],
	        [-122.403376, 37.804122],
	        [-122.403525, 37.804897],
	        [-122.403542, 37.804989],
	        [-122.403561, 37.805122],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "45-61": {
	    "distance": 2.074865466512417,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "45-62": {
	    "distance": 1.3297875604138782,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "45-63": {
	    "distance": 1.3191081610526474,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.402005, 37.791016],
	        [-122.40113, 37.791128],
	        [-122.400744, 37.791177],
	        [-122.399707, 37.791309],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "45-64": {
	    "distance": 1.786610966052613,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "45-65": {
	    "distance": 3.7613283927456167,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "45-66": {
	    "distance": 3.380053474340491,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "45-67": {
	    "distance": 2.5338520215700546,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "45-68": {
	    "distance": 1.2464281787877132,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "45-69": {
	    "distance": 2.7303336076098628,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "45-70": {
	    "distance": 2.7034810876270217,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "45-71": {
	    "distance": 1.1405005941778625,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402552, 37.789995],
	        [-122.40303, 37.789932],
	        [-122.403866, 37.789826],
	        [-122.404208, 37.789783],
	        [-122.40459, 37.789735],
	        [-122.405404, 37.78962],
	        [-122.406986, 37.789429],
	        [-122.407752, 37.789333],
	        [-122.408615, 37.789226],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "45-72": {
	    "distance": 1.9625351309185626,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "45-73": {
	    "distance": 0.8464594310519477,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.404012, 37.79364],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "45-74": {
	    "distance": 1.0202957145268343,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "45-75": {
	    "distance": 0.7015359939384717,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.402005, 37.791016],
	        [-122.40113, 37.791128],
	        [-122.400744, 37.791177],
	        [-122.399707, 37.791309],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "45-76": {
	    "distance": 1.002195473353355,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "45-77": {
	    "distance": 0.7594231363760793,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "45-82": {
	    "distance": 1.120763005972831,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.404012, 37.79364],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "47-48": {
	    "distance": 2.0695308939177877,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399144, 37.800912],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "47-49": {
	    "distance": 1.6175484137187524,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "47-50": {
	    "distance": 1.5758556860713497,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392512, 37.793786],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "47-51": {
	    "distance": 1.6194930920149995,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "47-53": {
	    "distance": 0.9495567719947818,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "47-54": {
	    "distance": 2.0995352429015104,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "47-55": {
	    "distance": 1.162734114768857,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "47-56": {
	    "distance": 0.7697859424279788,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "47-57": {
	    "distance": 1.3534913955974373,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "47-58": {
	    "distance": 2.2096855091226804,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "47-59": {
	    "distance": 2.161994795312362,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "47-60": {
	    "distance": 2.552452932100622,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.402419, 37.799377],
	        [-122.40261, 37.800315],
	        [-122.402804, 37.801267],
	        [-122.402891, 37.801696],
	        [-122.402989, 37.802174],
	        [-122.403156, 37.803014],
	        [-122.403174, 37.803104],
	        [-122.403189, 37.803176],
	        [-122.403345, 37.803964],
	        [-122.403358, 37.804032],
	        [-122.403376, 37.804122],
	        [-122.403525, 37.804897],
	        [-122.403542, 37.804989],
	        [-122.403561, 37.805122],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "47-61": {
	    "distance": 1.6168138711364104,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "47-62": {
	    "distance": 0.8717359650378713,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "47-63": {
	    "distance": 1.160443969132221,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "47-65": {
	    "distance": 3.3032767973696098,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "47-66": {
	    "distance": 2.9220018789644837,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "47-64": {
	    "distance": 1.328559370676606,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "47-67": {
	    "distance": 2.0758004261940477,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "47-68": {
	    "distance": 0.7883765834117058,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "47-69": {
	    "distance": 2.2722820122338563,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "47-71": {
	    "distance": 0.8727574488292067,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "47-70": {
	    "distance": 2.245429492251015,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "47-72": {
	    "distance": 1.5044835355425552,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "47-73": {
	    "distance": 1.596939863343556,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "47-74": {
	    "distance": 1.1035900619609442,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "47-77": {
	    "distance": 0.3013715410000719,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "47-76": {
	    "distance": 0.5441438779773475,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "47-75": {
	    "distance": 0.5428718020180452,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "47-82": {
	    "distance": 1.8712434382644396,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "48-49": {
	    "distance": 1.459109427537849,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395523, 37.7966],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "48-50": {
	    "distance": 0.9338776812012866,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395523, 37.7966],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393362, 37.794385],
	        [-122.393258, 37.794377],
	        [-122.393198, 37.794411],
	        [-122.393177, 37.794466],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "48-51": {
	    "distance": 1.1666869713211794,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "48-53": {
	    "distance": 2.414983277722015,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "48-54": {
	    "distance": 1.7387748792481998,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "48-55": {
	    "distance": 1.534918584721234,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.396649, 37.794578],
	        [-122.396732, 37.794568],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793494],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "48-56": {
	    "distance": 1.141970412380356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.396649, 37.794578],
	        [-122.396732, 37.794568],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793494],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "48-57": {
	    "distance": 2.818917901324671,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "48-58": {
	    "distance": 3.6751120148499137,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "48-59": {
	    "distance": 3.6274213010395955,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "48-60": {
	    "distance": 1.0165841501620871,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "48-61": {
	    "distance": 2.6679754849298223,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388309, 37.783373],
	        [-122.388376, 37.782545],
	        [-122.388424, 37.781908],
	        [-122.388431, 37.781791],
	        [-122.388464, 37.781351],
	        [-122.388485, 37.781222],
	        [-122.388522, 37.781102],
	        [-122.388573, 37.780974],
	        [-122.388646, 37.780845],
	        [-122.388733, 37.780723],
	        [-122.388854, 37.780588],
	        [-122.388991, 37.780472],
	        [-122.389683, 37.779916],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "48-62": {
	    "distance": 2.179403100324523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "48-63": {
	    "distance": 1.9131140729277132,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "48-64": {
	    "distance": 2.636226625785063,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "48-65": {
	    "distance": 4.768703303096844,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "48-66": {
	    "distance": 4.3874283846917175,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "48-67": {
	    "distance": 3.5412269319212806,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "48-68": {
	    "distance": 2.341828128939625,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "48-69": {
	    "distance": 3.3520033113729637,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "48-70": {
	    "distance": 3.3251507913901226,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "48-71": {
	    "distance": 2.33818395455644,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "48-72": {
	    "distance": 2.9699100412697885,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "48-73": {
	    "distance": 1.0011472472215381,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.406256, 37.79792],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "48-74": {
	    "distance": 1.0960533155075791,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "48-75": {
	    "distance": 1.247539153097556,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "48-76": {
	    "distance": 2.009570383704581,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "48-77": {
	    "distance": 1.4890387129950182,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "48-82": {
	    "distance": 0.3881375715067839,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "49-50": {
	    "distance": 1.0610941227988975,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "49-51": {
	    "distance": 0.7610112027779683,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "49-53": {
	    "distance": 2.4898109482213315,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "49-54": {
	    "distance": 0.4819872650875055,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "49-55": {
	    "distance": 0.8981644022818197,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392994, 37.787515],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "49-56": {
	    "distance": 1.3294418798470382,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "49-57": {
	    "distance": 2.0735072773808265,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "49-58": {
	    "distance": 3.74993968534923,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "49-59": {
	    "distance": 3.702248971538912,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "49-60": {
	    "distance": 2.4673535963398967,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "49-61": {
	    "distance": 1.4111878707691288,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388309, 37.783373],
	        [-122.388376, 37.782545],
	        [-122.388424, 37.781908],
	        [-122.388431, 37.781791],
	        [-122.388464, 37.781351],
	        [-122.388485, 37.781222],
	        [-122.388522, 37.781102],
	        [-122.388573, 37.780974],
	        [-122.388646, 37.780845],
	        [-122.388733, 37.780723],
	        [-122.388854, 37.780588],
	        [-122.388991, 37.780472],
	        [-122.389683, 37.779916],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "49-62": {
	    "distance": 0.9705334756546821,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "49-63": {
	    "distance": 1.1865922295329132,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392994, 37.787515],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "49-64": {
	    "distance": 1.1397907160295568,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "49-65": {
	    "distance": 2.926384388658131,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "49-66": {
	    "distance": 3.964648138757473,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.398365, 37.781794],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407609, 37.773817],
	        [-122.40771, 37.773783],
	        [-122.407822, 37.773761],
	        [-122.408286, 37.773712],
	        [-122.408445, 37.773688],
	        [-122.408666, 37.773656],
	        [-122.408922, 37.773454],
	        [-122.409693, 37.772845],
	        [-122.410083, 37.772537],
	        [-122.410692, 37.773024],
	        [-122.411074, 37.77333],
	        [-122.411627, 37.773773],
	        [-122.412165, 37.774203],
	        [-122.412622, 37.774568],
	        [-122.413157, 37.774996],
	        [-122.413714, 37.775439],
	        [-122.414171, 37.775802],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "49-67": {
	    "distance": 3.616054602420597,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "49-68": {
	    "distance": 1.5312468563946653,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "49-69": {
	    "distance": 2.09521569721227,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "49-70": {
	    "distance": 2.068363177229429,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "49-71": {
	    "distance": 2.413011625055757,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "49-72": {
	    "distance": 3.044737711769105,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "49-74": {
	    "distance": 1.166886243513381,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "49-73": {
	    "distance": 2.460682381579206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "49-75": {
	    "distance": 1.3223668235968726,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "49-76": {
	    "distance": 2.0843980542038976,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "49-77": {
	    "distance": 1.563866383494335,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "49-82": {
	    "distance": 1.8907326429412532,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "50-53": {
	    "distance": 2.174974791962126,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "50-51": {
	    "distance": 0.7232407822470183,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "50-54": {
	    "distance": 1.295328690174039,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "50-55": {
	    "distance": 1.059794882584231,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "50-56": {
	    "distance": 0.9019619266204677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.396649, 37.794578],
	        [-122.396732, 37.794568],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793494],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "50-57": {
	    "distance": 2.5789094155647816,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "50-58": {
	    "distance": 3.4351035290900245,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "50-59": {
	    "distance": 3.387412815279706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "50-60": {
	    "distance": 1.406259582794958,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "50-61": {
	    "distance": 2.2245292958556617,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388309, 37.783373],
	        [-122.388376, 37.782545],
	        [-122.388424, 37.781908],
	        [-122.388431, 37.781791],
	        [-122.388464, 37.781351],
	        [-122.388485, 37.781222],
	        [-122.388522, 37.781102],
	        [-122.388573, 37.780974],
	        [-122.388646, 37.780845],
	        [-122.388733, 37.780723],
	        [-122.388854, 37.780588],
	        [-122.388991, 37.780472],
	        [-122.389683, 37.779916],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "50-62": {
	    "distance": 1.760458912492702,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "50-63": {
	    "distance": 1.4941698850958922,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "50-64": {
	    "distance": 2.109359578281155,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "50-65": {
	    "distance": 4.5286948173369534,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "50-66": {
	    "distance": 4.147419898931828,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "50-67": {
	    "distance": 3.3012184461613914,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "50-68": {
	    "distance": 2.101819643179737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400543, 37.79026],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "50-69": {
	    "distance": 2.9085571222988036,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "50-70": {
	    "distance": 2.8817046023159625,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "50-71": {
	    "distance": 2.0981754687965504,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "50-72": {
	    "distance": 2.7299015555098993,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "50-73": {
	    "distance": 1.3995883680342658,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "50-74": {
	    "distance": 0.6526071264334179,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "50-75": {
	    "distance": 1.0075306673376674,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "50-77": {
	    "distance": 1.2490302272351297,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "50-76": {
	    "distance": 1.769561897944692,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "51-53": {
	    "distance": 2.3956711681058187,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "50-82": {
	    "distance": 0.829638629396313,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "51-58": {
	    "distance": 3.6557999052337173,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "51-54": {
	    "distance": 0.572079519809044,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "51-57": {
	    "distance": 1.9809069523944676,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391895, 37.789356],
	        [-122.392739, 37.788691],
	        [-122.393209, 37.788323],
	        [-122.393333, 37.788225],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "51-55": {
	    "distance": 0.8046517632862871,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391895, 37.789356],
	        [-122.392739, 37.788691],
	        [-122.393209, 37.788323],
	        [-122.393333, 37.788225],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "51-56": {
	    "distance": 1.2353020997315256,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "51-59": {
	    "distance": 3.608109191423399,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "51-60": {
	    "distance": 2.6363799251268145,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "51-63": {
	    "distance": 1.0930795905373805,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391895, 37.789356],
	        [-122.392739, 37.788691],
	        [-122.393209, 37.788323],
	        [-122.393333, 37.788225],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "51-61": {
	    "distance": 1.5012801254906674,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388309, 37.783373],
	        [-122.388376, 37.782545],
	        [-122.388424, 37.781908],
	        [-122.388431, 37.781791],
	        [-122.388464, 37.781351],
	        [-122.388485, 37.781222],
	        [-122.388522, 37.781102],
	        [-122.388573, 37.780974],
	        [-122.388646, 37.780845],
	        [-122.388733, 37.780723],
	        [-122.388854, 37.780588],
	        [-122.388991, 37.780472],
	        [-122.389683, 37.779916],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "51-62": {
	    "distance": 1.2629509272046098,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "51-64": {
	    "distance": 1.38611040791616,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "51-65": {
	    "distance": 3.016476643379671,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "51-67": {
	    "distance": 3.5219148223050842,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "51-66": {
	    "distance": 3.832123699508958,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402156, 37.786195],
	        [-122.402493, 37.785928],
	        [-122.402608, 37.785836],
	        [-122.402768, 37.785709],
	        [-122.403264, 37.785321],
	        [-122.403515, 37.785123],
	        [-122.404156, 37.784618],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.407177, 37.782192],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.412205, 37.77822],
	        [-122.412419, 37.77805],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "51-68": {
	    "distance": 1.4386465314083063,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391895, 37.789356],
	        [-122.392739, 37.788691],
	        [-122.393209, 37.788323],
	        [-122.393333, 37.788225],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "51-69": {
	    "distance": 2.18530795193381,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "51-70": {
	    "distance": 2.158455431950969,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390033, 37.790645],
	        [-122.389257, 37.790028],
	        [-122.388824, 37.789684],
	        [-122.388714, 37.789582],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "51-71": {
	    "distance": 2.3188718449402437,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "51-72": {
	    "distance": 2.950597931653592,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "51-73": {
	    "distance": 2.338129943322419,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "51-74": {
	    "distance": 1.0727464633978685,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "51-75": {
	    "distance": 1.2282270434813598,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "51-76": {
	    "distance": 1.9902582740883845,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "51-77": {
	    "distance": 1.469726603378822,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "51-82": {
	    "distance": 1.8740372709041326,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "53-54": {
	    "distance": 2.7241086186526244,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "53-55": {
	    "distance": 1.7873074905199713,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "53-56": {
	    "distance": 1.3943593181790932,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "53-57": {
	    "distance": 0.3919612492920002,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "53-58": {
	    "distance": 1.2601310671907893,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "53-59": {
	    "distance": 1.2124403533804706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "53-60": {
	    "distance": 3.2040998292748335,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "53-61": {
	    "distance": 2.2413872468875247,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "53-62": {
	    "distance": 1.4963093407889858,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "53-63": {
	    "distance": 1.7850173448833353,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "53-64": {
	    "distance": 1.9531327464277204,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "53-65": {
	    "distance": 2.0654131161035236,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "53-66": {
	    "distance": 1.9724474370325915,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "53-67": {
	    "distance": 1.1262459842621564,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "53-68": {
	    "distance": 1.4129499591628205,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "53-69": {
	    "distance": 1.5396736207213089,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "53-70": {
	    "distance": 1.5665263368745004,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "53-71": {
	    "distance": 1.0649262253566787,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.408802, 37.78347],
	        [-122.408849, 37.783458],
	        [-122.409144, 37.78342],
	        [-122.410765, 37.783214],
	        [-122.410953, 37.784148],
	        [-122.41114, 37.785075],
	        [-122.411334, 37.78601],
	        [-122.411516, 37.78694],
	        [-122.411572, 37.78722],
	        [-122.411642, 37.787567],
	        [-122.411699, 37.787873],
	        [-122.410071, 37.78808],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "53-72": {
	    "distance": 0.5549290936106641,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "53-73": {
	    "distance": 2.6854767286998142,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "53-74": {
	    "distance": 1.7281634377120587,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "53-75": {
	    "distance": 1.1674451777691595,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "53-76": {
	    "distance": 0.4054128940174343,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "53-77": {
	    "distance": 0.9259449167511866,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "53-82": {
	    "distance": 2.4417571750521523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "54-55": {
	    "distance": 0.9463650321672957,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.390985, 37.787632],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392994, 37.787515],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "54-56": {
	    "distance": 1.3776424935503895,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "54-57": {
	    "distance": 2.1217079072663028,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.390985, 37.787632],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "54-58": {
	    "distance": 3.7981402990525814,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "54-59": {
	    "distance": 3.750449585242263,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "54-60": {
	    "distance": 2.5580604401098883,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.387737, 37.78708],
	        [-122.387728, 37.787179],
	        [-122.387716, 37.787311],
	        [-122.38771, 37.787469],
	        [-122.387712, 37.787615],
	        [-122.387722, 37.787775],
	        [-122.387741, 37.787933],
	        [-122.387769, 37.788101],
	        [-122.387807, 37.788262],
	        [-122.38796, 37.788838],
	        [-122.38801, 37.788993],
	        [-122.388079, 37.789155],
	        [-122.388158, 37.789301],
	        [-122.388231, 37.789419],
	        [-122.388321, 37.789534],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "54-61": {
	    "distance": 0.9292339411335342,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388309, 37.783373],
	        [-122.388376, 37.782545],
	        [-122.388424, 37.781908],
	        [-122.388431, 37.781791],
	        [-122.388464, 37.781351],
	        [-122.388485, 37.781222],
	        [-122.388522, 37.781102],
	        [-122.388573, 37.780974],
	        [-122.388646, 37.780845],
	        [-122.388733, 37.780723],
	        [-122.388854, 37.780588],
	        [-122.388991, 37.780472],
	        [-122.389683, 37.779916],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "54-62": {
	    "distance": 1.0187340893580332,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "54-63": {
	    "distance": 1.2347928594183892,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.390985, 37.787632],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392994, 37.787515],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "54-65": {
	    "distance": 2.4444304590225365,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "54-66": {
	    "distance": 4.012848752460823,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.398365, 37.781794],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407609, 37.773817],
	        [-122.40771, 37.773783],
	        [-122.407822, 37.773761],
	        [-122.408286, 37.773712],
	        [-122.408445, 37.773688],
	        [-122.408666, 37.773656],
	        [-122.408922, 37.773454],
	        [-122.409693, 37.772845],
	        [-122.410083, 37.772537],
	        [-122.410692, 37.773024],
	        [-122.411074, 37.77333],
	        [-122.411627, 37.773773],
	        [-122.412165, 37.774203],
	        [-122.412622, 37.774568],
	        [-122.413157, 37.774996],
	        [-122.413714, 37.775439],
	        [-122.414171, 37.775802],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "54-64": {
	    "distance": 0.8140642235590267,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "54-67": {
	    "distance": 3.6642552161239483,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "54-68": {
	    "distance": 1.5794474862801415,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.390985, 37.787632],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392949, 37.786077],
	        [-122.393426, 37.7857],
	        [-122.394038, 37.785216],
	        [-122.394414, 37.784922],
	        [-122.394809, 37.784606],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "54-69": {
	    "distance": 1.6132617675766756,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "54-70": {
	    "distance": 1.5864092475938343,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388043, 37.786995],
	        [-122.388177, 37.785055],
	        [-122.388186, 37.784917],
	        [-122.388198, 37.784748],
	        [-122.388318, 37.784753],
	        [-122.388408, 37.784743],
	        [-122.388483, 37.784703],
	        [-122.389855, 37.783619],
	        [-122.39131, 37.782469],
	        [-122.391673, 37.782182],
	        [-122.391988, 37.781933],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "54-71": {
	    "distance": 2.461212238759108,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "54-74": {
	    "distance": 1.2150868572167324,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "54-72": {
	    "distance": 3.0929383254724563,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "54-73": {
	    "distance": 2.5513892253491974,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.387737, 37.78708],
	        [-122.387728, 37.787179],
	        [-122.387716, 37.787311],
	        [-122.38771, 37.787469],
	        [-122.387712, 37.787615],
	        [-122.387722, 37.787775],
	        [-122.387741, 37.787933],
	        [-122.387769, 37.788101],
	        [-122.387807, 37.788262],
	        [-122.38796, 37.788838],
	        [-122.38801, 37.788993],
	        [-122.388079, 37.789155],
	        [-122.388158, 37.789301],
	        [-122.388231, 37.789419],
	        [-122.388321, 37.789534],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "54-75": {
	    "distance": 1.370567437300224,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "54-76": {
	    "distance": 2.132598667907249,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "54-77": {
	    "distance": 1.6120669971976862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "54-82": {
	    "distance": 1.9814405441405814,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388036, 37.787094],
	        [-122.387737, 37.78708],
	        [-122.387728, 37.787179],
	        [-122.387716, 37.787311],
	        [-122.38771, 37.787469],
	        [-122.387712, 37.787615],
	        [-122.387722, 37.787775],
	        [-122.387741, 37.787933],
	        [-122.387769, 37.788101],
	        [-122.387807, 37.788262],
	        [-122.38796, 37.788838],
	        [-122.38801, 37.788993],
	        [-122.388079, 37.789155],
	        [-122.388158, 37.789301],
	        [-122.388231, 37.789419],
	        [-122.388321, 37.789534],
	        [-122.388411, 37.78964],
	        [-122.388512, 37.789741],
	        [-122.388623, 37.789839],
	        [-122.389433, 37.790495],
	        [-122.389827, 37.790813],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.392024, 37.793466],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "55-57": {
	    "distance": 1.3222029239548292,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "55-56": {
	    "distance": 0.6117877798535523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397159, 37.790837],
	        [-122.397244, 37.790905],
	        [-122.397548, 37.791147],
	        [-122.398234, 37.791694],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "55-58": {
	    "distance": 3.0048542360522696,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "55-59": {
	    "distance": 2.957163522241951,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "55-60": {
	    "distance": 2.2661450024682197,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "55-61": {
	    "distance": 1.4457426154148976,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "55-62": {
	    "distance": 0.7006645894945523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "55-63": {
	    "distance": 0.43437556209774236,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "55-64": {
	    "distance": 1.157488114955093,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "55-65": {
	    "distance": 2.932379447958204,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "55-66": {
	    "distance": 3.172397802687818,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402156, 37.786195],
	        [-122.402493, 37.785928],
	        [-122.402608, 37.785836],
	        [-122.402768, 37.785709],
	        [-122.403264, 37.785321],
	        [-122.403515, 37.785123],
	        [-122.404156, 37.784618],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.407177, 37.782192],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.412205, 37.77822],
	        [-122.412419, 37.77805],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "55-68": {
	    "distance": 0.779942502968668,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "55-67": {
	    "distance": 2.8709691531236365,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "55-69": {
	    "distance": 2.101210756512343,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "55-70": {
	    "distance": 2.074358236529502,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "55-71": {
	    "distance": 1.7111373794095277,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "55-72": {
	    "distance": 2.2996522624721445,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "55-74": {
	    "distance": 0.7025115407392745,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "55-73": {
	    "distance": 1.8996494747800767,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397159, 37.790837],
	        [-122.397244, 37.790905],
	        [-122.397548, 37.791147],
	        [-122.398234, 37.791694],
	        [-122.398297, 37.791734],
	        [-122.398375, 37.791778],
	        [-122.398423, 37.79181],
	        [-122.398482, 37.79189],
	        [-122.398588, 37.792408],
	        [-122.399763, 37.792258],
	        [-122.400933, 37.792108],
	        [-122.401638, 37.792018],
	        [-122.401769, 37.792001],
	        [-122.401885, 37.791986],
	        [-122.402196, 37.791946],
	        [-122.402571, 37.791899],
	        [-122.40388, 37.791733],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "55-75": {
	    "distance": 0.8323941884031351,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397159, 37.790837],
	        [-122.397244, 37.790905],
	        [-122.397548, 37.791147],
	        [-122.398234, 37.791694],
	        [-122.398297, 37.791734],
	        [-122.398375, 37.791778],
	        [-122.398423, 37.79181],
	        [-122.398482, 37.79189],
	        [-122.398588, 37.792408],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "55-77": {
	    "distance": 0.9142890715265019,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "55-76": {
	    "distance": 1.3393126049069373,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "55-82": {
	    "distance": 1.5038023482455387,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "56-57": {
	    "distance": 1.787927358098714,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402156, 37.786195],
	        [-122.402493, 37.785928],
	        [-122.402608, 37.785836],
	        [-122.402768, 37.785709],
	        [-122.403264, 37.785321],
	        [-122.403515, 37.785123],
	        [-122.404156, 37.784618],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406579, 37.783514],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "56-58": {
	    "distance": 3.0132435235766843,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "56-59": {
	    "distance": 2.965552809766366,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "56-60": {
	    "distance": 2.2030857980217755,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "56-61": {
	    "distance": 1.8386919121899326,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "56-62": {
	    "distance": 1.0936138862695874,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "56-63": {
	    "distance": 0.8273248588727774,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "56-64": {
	    "distance": 1.550437411730128,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "56-65": {
	    "distance": 3.3253287447332394,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "56-66": {
	    "distance": 3.1807870902122333,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402156, 37.786195],
	        [-122.402493, 37.785928],
	        [-122.402608, 37.785836],
	        [-122.402768, 37.785709],
	        [-122.403264, 37.785321],
	        [-122.403515, 37.785123],
	        [-122.404156, 37.784618],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.407177, 37.782192],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.412205, 37.77822],
	        [-122.412419, 37.77805],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "56-67": {
	    "distance": 2.8793584406480512,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "56-68": {
	    "distance": 1.1728917997437032,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "56-69": {
	    "distance": 2.4941600532873784,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "56-70": {
	    "distance": 2.4673075333045373,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "56-71": {
	    "distance": 1.7195266669339422,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "56-72": {
	    "distance": 2.308041549996559,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "56-73": {
	    "distance": 1.9048358162173806,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "56-74": {
	    "distance": 0.6394523362928304,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "56-75": {
	    "distance": 0.7949329163763215,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "56-76": {
	    "distance": 1.3477018924313517,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "56-77": {
	    "distance": 0.9226783590509167,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "56-82": {
	    "distance": 1.4407431437990945,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "57-58": {
	    "distance": 1.6527347796520484,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406731, 37.781691],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "57-59": {
	    "distance": 1.6050440658417298,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406731, 37.781691],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "57-61": {
	    "distance": 1.8496551230303542,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.398087, 37.779565],
	        [-122.39755, 37.779134],
	        [-122.397068, 37.778752],
	        [-122.396953, 37.77866],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "57-60": {
	    "distance": 3.5331995281196966,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "57-62": {
	    "distance": 1.1032864331694945,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.398748, 37.783941],
	        [-122.397841, 37.784657],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "57-63": {
	    "distance": 1.7168621377815139,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404091, 37.784559],
	        [-122.403448, 37.785072],
	        [-122.403196, 37.785269],
	        [-122.402704, 37.785659],
	        [-122.402094, 37.786142],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "57-64": {
	    "distance": 1.560109958630035,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.398748, 37.783941],
	        [-122.397841, 37.784657],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "57-65": {
	    "distance": 1.6734531560470816,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "57-66": {
	    "distance": 1.8511787130893873,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406731, 37.781691],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.412205, 37.77822],
	        [-122.412419, 37.77805],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "57-67": {
	    "distance": 1.5188496967234155,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406731, 37.781691],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "57-68": {
	    "distance": 1.0139257523353553,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "57-69": {
	    "distance": 1.1477136606648666,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "57-70": {
	    "distance": 1.174566376818058,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "57-71": {
	    "distance": 0.9436266435516089,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "57-72": {
	    "distance": 0.9475328060719229,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406731, 37.781691],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "57-73": {
	    "distance": 2.510220062009856,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408034, 37.786431],
	        [-122.406409, 37.786637],
	        [-122.405363, 37.786769],
	        [-122.404855, 37.786835],
	        [-122.404972, 37.787418],
	        [-122.405045, 37.787766],
	        [-122.405132, 37.788238],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "57-74": {
	    "distance": 2.057263136556922,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "57-75": {
	    "distance": 1.4965448766140228,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "57-77": {
	    "distance": 1.2550446155960497,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "57-76": {
	    "distance": 0.7345125928622978,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "57-82": {
	    "distance": 2.784523636930739,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408034, 37.786431],
	        [-122.406409, 37.786637],
	        [-122.405363, 37.786769],
	        [-122.404855, 37.786835],
	        [-122.404972, 37.787418],
	        [-122.405045, 37.787766],
	        [-122.405132, 37.788238],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "58-59": {
	    "distance": 0.3109687071831879,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418419, 37.779388],
	        [-122.418567, 37.780129],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "58-60": {
	    "distance": 4.3400203528083265,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "58-61": {
	    "distance": 3.377307770421015,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "58-62": {
	    "distance": 2.632229864322477,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "58-63": {
	    "distance": 2.9209378684168263,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "58-64": {
	    "distance": 3.0890532699612105,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "58-65": {
	    "distance": 1.9356050750063083,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.414157, 37.778244],
	        [-122.413171, 37.777454],
	        [-122.412625, 37.777019],
	        [-122.412166, 37.776654],
	        [-122.411614, 37.776214],
	        [-122.411078, 37.775786],
	        [-122.410619, 37.775421],
	        [-122.410082, 37.774993],
	        [-122.409524, 37.774548],
	        [-122.409093, 37.774203],
	        [-122.408535, 37.77376],
	        [-122.408445, 37.773688],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "58-66": {
	    "distance": 0.9677278779801884,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.418139, 37.777971],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "58-67": {
	    "distance": 0.6670566923735765,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "58-68": {
	    "distance": 2.5488704826963104,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "58-69": {
	    "distance": 2.6755941442547986,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "58-71": {
	    "distance": 1.9625959748019586,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418419, 37.779388],
	        [-122.418567, 37.780129],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416982, 37.780604],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.417527, 37.78331],
	        [-122.417622, 37.783777],
	        [-122.417715, 37.784234],
	        [-122.417812, 37.784709],
	        [-122.417907, 37.785176],
	        [-122.416261, 37.785382],
	        [-122.415916, 37.785426],
	        [-122.415675, 37.785457],
	        [-122.415024, 37.78554],
	        [-122.414619, 37.785591],
	        [-122.412979, 37.7858],
	        [-122.412147, 37.785909],
	        [-122.411334, 37.78601],
	        [-122.411516, 37.78694],
	        [-122.411572, 37.78722],
	        [-122.411642, 37.787567],
	        [-122.411699, 37.787873],
	        [-122.410071, 37.78808],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "58-70": {
	    "distance": 2.70244686040799,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "58-72": {
	    "distance": 0.5809938459789856,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "58-73": {
	    "distance": 3.5289081638688926,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418419, 37.779388],
	        [-122.418567, 37.780129],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416982, 37.780604],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.417527, 37.78331],
	        [-122.417622, 37.783777],
	        [-122.417715, 37.784234],
	        [-122.417812, 37.784709],
	        [-122.417907, 37.785176],
	        [-122.416261, 37.785382],
	        [-122.415916, 37.785426],
	        [-122.415675, 37.785457],
	        [-122.415024, 37.78554],
	        [-122.414619, 37.785591],
	        [-122.412979, 37.7858],
	        [-122.412147, 37.785909],
	        [-122.411334, 37.78601],
	        [-122.409848, 37.786199],
	        [-122.409701, 37.786218],
	        [-122.409335, 37.786264],
	        [-122.408951, 37.786313],
	        [-122.408068, 37.786425],
	        [-122.406409, 37.786637],
	        [-122.405363, 37.786769],
	        [-122.404855, 37.786835],
	        [-122.404972, 37.787418],
	        [-122.405045, 37.787766],
	        [-122.405132, 37.788238],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "58-74": {
	    "distance": 2.8640839612455506,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "58-75": {
	    "distance": 2.3033657013026505,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "58-76": {
	    "distance": 1.5413334175509246,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "58-77": {
	    "distance": 2.061865440284677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "58-82": {
	    "distance": 3.577677698585644,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "59-60": {
	    "distance": 4.376904786473483,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "59-61": {
	    "distance": 3.4141922040861727,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "59-62": {
	    "distance": 2.6691142979876346,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "59-63": {
	    "distance": 2.957822302081984,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "59-64": {
	    "distance": 3.1259377036263682,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "59-65": {
	    "distance": 2.2073846644795925,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.415167, 37.779959],
	        [-122.415133, 37.779795],
	        [-122.415102, 37.77964],
	        [-122.414964, 37.778942],
	        [-122.414902, 37.778846],
	        [-122.414757, 37.778725],
	        [-122.414157, 37.778244],
	        [-122.413171, 37.777454],
	        [-122.412625, 37.777019],
	        [-122.412166, 37.776654],
	        [-122.411614, 37.776214],
	        [-122.411078, 37.775786],
	        [-122.410619, 37.775421],
	        [-122.410082, 37.774993],
	        [-122.409524, 37.774548],
	        [-122.409093, 37.774203],
	        [-122.408535, 37.77376],
	        [-122.408445, 37.773688],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "59-66": {
	    "distance": 1.6680101641975997,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.415167, 37.779959],
	        [-122.415133, 37.779795],
	        [-122.415102, 37.77964],
	        [-122.414964, 37.778942],
	        [-122.414902, 37.778846],
	        [-122.414757, 37.778725],
	        [-122.414157, 37.778244],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "59-67": {
	    "distance": 0.9388362818468604,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.415167, 37.779959],
	        [-122.415133, 37.779795],
	        [-122.415102, 37.77964],
	        [-122.414964, 37.778942],
	        [-122.414902, 37.778846],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "59-68": {
	    "distance": 2.585754916361468,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "59-69": {
	    "distance": 2.7124785779199563,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "59-70": {
	    "distance": 2.7393312940731476,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "59-71": {
	    "distance": 1.6536280649501807,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.417527, 37.78331],
	        [-122.417622, 37.783777],
	        [-122.417715, 37.784234],
	        [-122.417812, 37.784709],
	        [-122.417907, 37.785176],
	        [-122.416261, 37.785382],
	        [-122.415916, 37.785426],
	        [-122.415675, 37.785457],
	        [-122.415024, 37.78554],
	        [-122.414619, 37.785591],
	        [-122.412979, 37.7858],
	        [-122.412147, 37.785909],
	        [-122.411334, 37.78601],
	        [-122.411516, 37.78694],
	        [-122.411572, 37.78722],
	        [-122.411642, 37.787567],
	        [-122.411699, 37.787873],
	        [-122.410071, 37.78808],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "59-72": {
	    "distance": 0.6869017894745546,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "59-73": {
	    "distance": 3.2199402540171147,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.417527, 37.78331],
	        [-122.417622, 37.783777],
	        [-122.417715, 37.784234],
	        [-122.417812, 37.784709],
	        [-122.417907, 37.785176],
	        [-122.416261, 37.785382],
	        [-122.415916, 37.785426],
	        [-122.415675, 37.785457],
	        [-122.415024, 37.78554],
	        [-122.414619, 37.785591],
	        [-122.412979, 37.7858],
	        [-122.412147, 37.785909],
	        [-122.411334, 37.78601],
	        [-122.409848, 37.786199],
	        [-122.409701, 37.786218],
	        [-122.409335, 37.786264],
	        [-122.408951, 37.786313],
	        [-122.408068, 37.786425],
	        [-122.406409, 37.786637],
	        [-122.405363, 37.786769],
	        [-122.404855, 37.786835],
	        [-122.404972, 37.787418],
	        [-122.405045, 37.787766],
	        [-122.405132, 37.788238],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "59-74": {
	    "distance": 2.9009683949107083,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "59-76": {
	    "distance": 1.5782178512160823,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "59-75": {
	    "distance": 2.340250134967808,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "59-77": {
	    "distance": 2.098749873949835,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "59-82": {
	    "distance": 3.494243828937998,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.417527, 37.78331],
	        [-122.417622, 37.783777],
	        [-122.417715, 37.784234],
	        [-122.417812, 37.784709],
	        [-122.417907, 37.785176],
	        [-122.416261, 37.785382],
	        [-122.415916, 37.785426],
	        [-122.415675, 37.785457],
	        [-122.415024, 37.78554],
	        [-122.414619, 37.785591],
	        [-122.412979, 37.7858],
	        [-122.412147, 37.785909],
	        [-122.411334, 37.78601],
	        [-122.409848, 37.786199],
	        [-122.409701, 37.786218],
	        [-122.409335, 37.786264],
	        [-122.408951, 37.786313],
	        [-122.408068, 37.786425],
	        [-122.406409, 37.786637],
	        [-122.405363, 37.786769],
	        [-122.404855, 37.786835],
	        [-122.404972, 37.787418],
	        [-122.405045, 37.787766],
	        [-122.405132, 37.788238],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "60-61": {
	    "distance": 3.2683636300649432,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "60-62": {
	    "distance": 2.523285604144599,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "60-63": {
	    "distance": 2.2569965767477886,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "60-64": {
	    "distance": 2.9801091296051387,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "60-65": {
	    "distance": 5.075946471028847,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "60-66": {
	    "distance": 4.6946715526237215,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "60-67": {
	    "distance": 3.848470099853285,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "60-68": {
	    "distance": 2.6883190549275047,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "60-69": {
	    "distance": 3.9238317711623885,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "60-70": {
	    "distance": 3.8969792511795474,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "60-71": {
	    "distance": 2.6454271224884445,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "60-72": {
	    "distance": 3.277153209201793,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "60-73": {
	    "distance": 1.3450297510416134,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.406256, 37.79792],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "60-74": {
	    "distance": 1.7763535500938472,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.401927, 37.803854],
	        [-122.401465, 37.803332],
	        [-122.401022, 37.802851],
	        [-122.400705, 37.802491],
	        [-122.400371, 37.802109],
	        [-122.40008, 37.801777],
	        [-122.39932, 37.800915],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "60-75": {
	    "distance": 1.6394244096336128,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "60-76": {
	    "distance": 2.3168135516365855,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "60-77": {
	    "distance": 1.7962818809270227,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "60-82": {
	    "distance": 0.7633323782611868,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "61-62": {
	    "distance": 0.7450781430942388,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "61-63": {
	    "distance": 1.9018553076201756,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "61-64": {
	    "distance": 0.2882550879075677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "61-65": {
	    "distance": 1.5295772842624706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.390632, 37.780548],
	        [-122.39108, 37.780194],
	        [-122.391662, 37.779735],
	        [-122.392231, 37.779287],
	        [-122.392679, 37.778932],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "61-67": {
	    "distance": 3.400933001644084,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "61-66": {
	    "distance": 3.7402992414577114,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.398365, 37.781794],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407609, 37.773817],
	        [-122.40771, 37.773783],
	        [-122.407822, 37.773761],
	        [-122.408286, 37.773712],
	        [-122.408445, 37.773688],
	        [-122.408666, 37.773656],
	        [-122.408922, 37.773454],
	        [-122.409693, 37.772845],
	        [-122.410083, 37.772537],
	        [-122.410692, 37.773024],
	        [-122.411074, 37.77333],
	        [-122.411627, 37.773773],
	        [-122.412165, 37.774203],
	        [-122.412622, 37.774568],
	        [-122.413157, 37.774996],
	        [-122.413714, 37.775439],
	        [-122.414171, 37.775802],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "61-68": {
	    "distance": 1.3068979590949037,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "61-69": {
	    "distance": 0.6984085928166098,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.390632, 37.780548],
	        [-122.39108, 37.780194],
	        [-122.391662, 37.779735],
	        [-122.392231, 37.779287],
	        [-122.392679, 37.778932],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "61-70": {
	    "distance": 0.6715560728337687,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.390632, 37.780548],
	        [-122.39108, 37.780194],
	        [-122.391662, 37.779735],
	        [-122.392231, 37.779287],
	        [-122.392679, 37.778932],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "61-71": {
	    "distance": 2.241101227929976,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "61-72": {
	    "distance": 2.829616110992592,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "61-73": {
	    "distance": 2.965283642444325,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "61-74": {
	    "distance": 2.244098696475578,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "61-75": {
	    "distance": 1.683380436532678,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "61-76": {
	    "distance": 1.869276453427385,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "61-77": {
	    "distance": 1.441880175514705,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "61-82": {
	    "distance": 2.957692433815671,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "62-63": {
	    "distance": 1.156777401521637,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "62-64": {
	    "distance": 0.45682364263443453,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "62-65": {
	    "distance": 2.2317149756375447,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "62-66": {
	    "distance": 2.9549110005774826,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402156, 37.786195],
	        [-122.402493, 37.785928],
	        [-122.402608, 37.785836],
	        [-122.402768, 37.785709],
	        [-122.403264, 37.785321],
	        [-122.403515, 37.785123],
	        [-122.404156, 37.784618],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.407177, 37.782192],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.412205, 37.77822],
	        [-122.412419, 37.77805],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "62-67": {
	    "distance": 2.653482351013301,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "62-68": {
	    "distance": 0.5615029260769977,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "62-69": {
	    "distance": 1.4005462841916838,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "62-70": {
	    "distance": 1.3736937642088425,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "62-72": {
	    "distance": 2.082165460361809,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "62-73": {
	    "distance": 2.2178329918135424,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "62-74": {
	    "distance": 1.4990207903770385,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "62-75": {
	    "distance": 0.9383025304341396,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "62-76": {
	    "distance": 1.1218258027966015,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "62-77": {
	    "distance": 0.6968022694161664,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "62-82": {
	    "distance": 2.2126145277171325,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "63-64": {
	    "distance": 0.7231144989008096,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "63-65": {
	    "distance": 2.49800583190392,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "63-66": {
	    "distance": 2.73897696141487,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402156, 37.786195],
	        [-122.402493, 37.785928],
	        [-122.402608, 37.785836],
	        [-122.402768, 37.785709],
	        [-122.403264, 37.785321],
	        [-122.403515, 37.785123],
	        [-122.404156, 37.784618],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.407177, 37.782192],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.410944, 37.779218],
	        [-122.412205, 37.77822],
	        [-122.412419, 37.77805],
	        [-122.413171, 37.777454],
	        [-122.414119, 37.776705],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "63-67": {
	    "distance": 2.437548311850689,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "63-68": {
	    "distance": 0.34556888691438487,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "62-71": {
	    "distance": 1.4936505772991922,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "63-69": {
	    "distance": 1.666837140458059,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "63-70": {
	    "distance": 1.639984620475218,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "63-71": {
	    "distance": 1.2777165381365796,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "63-72": {
	    "distance": 1.8662314211991968,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "63-73": {
	    "distance": 2.0018989526509294,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "63-74": {
	    "distance": 1.283086751214426,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "63-75": {
	    "distance": 0.722368491271527,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "63-76": {
	    "distance": 0.9058917636339888,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "63-77": {
	    "distance": 0.4808682302535538,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "63-82": {
	    "distance": 1.9966804885545197,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "64-65": {
	    "distance": 1.7748919204508733,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "64-67": {
	    "distance": 3.1103057566520356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "64-66": {
	    "distance": 3.450938305737227,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.398365, 37.781794],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407609, 37.773817],
	        [-122.40771, 37.773783],
	        [-122.407822, 37.773761],
	        [-122.408286, 37.773712],
	        [-122.408445, 37.773688],
	        [-122.408666, 37.773656],
	        [-122.408922, 37.773454],
	        [-122.409693, 37.772845],
	        [-122.410083, 37.772537],
	        [-122.410692, 37.773024],
	        [-122.411074, 37.77333],
	        [-122.411627, 37.773773],
	        [-122.412165, 37.774203],
	        [-122.412622, 37.774568],
	        [-122.413157, 37.774996],
	        [-122.413714, 37.775439],
	        [-122.414171, 37.775802],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "64-68": {
	    "distance": 1.0175370233744179,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395714, 37.78389],
	        [-122.396301, 37.783425],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "64-69": {
	    "distance": 0.9437232290050128,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "64-70": {
	    "distance": 0.9168707090221717,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "64-71": {
	    "distance": 1.9504739829379265,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "64-72": {
	    "distance": 2.5389888660005435,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "64-73": {
	    "distance": 2.6746563974522766,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "64-74": {
	    "distance": 1.9558441960157726,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "64-75": {
	    "distance": 1.3951259360728736,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "64-76": {
	    "distance": 1.578649208435336,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "64-77": {
	    "distance": 1.1536256750549005,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "64-82": {
	    "distance": 2.6694379333558667,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "65-66": {
	    "distance": 2.1745190594800365,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405549, 37.771224],
	        [-122.406301, 37.770631],
	        [-122.406997, 37.77007],
	        [-122.408536, 37.7713],
	        [-122.409081, 37.771736],
	        [-122.410083, 37.772537],
	        [-122.410692, 37.773024],
	        [-122.411074, 37.77333],
	        [-122.411627, 37.773773],
	        [-122.412165, 37.774203],
	        [-122.412622, 37.774568],
	        [-122.413157, 37.774996],
	        [-122.413714, 37.775439],
	        [-122.414171, 37.775802],
	        [-122.414716, 37.776233],
	        [-122.415145, 37.775891],
	        [-122.415508, 37.775602],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "65-67": {
	    "distance": 1.8410907163645711,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405549, 37.771224],
	        [-122.406301, 37.770631],
	        [-122.406997, 37.77007],
	        [-122.408536, 37.7713],
	        [-122.409081, 37.771736],
	        [-122.410083, 37.772537],
	        [-122.410692, 37.773024],
	        [-122.411074, 37.77333],
	        [-122.411627, 37.773773],
	        [-122.412165, 37.774203],
	        [-122.412622, 37.774568],
	        [-122.413157, 37.774996],
	        [-122.413714, 37.775439],
	        [-122.414171, 37.775802],
	        [-122.414716, 37.776233],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "65-68": {
	    "distance": 2.2379286017061246,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.402681, 37.773481],
	        [-122.402275, 37.773802],
	        [-122.402109, 37.773934],
	        [-122.40206, 37.773973],
	        [-122.401546, 37.774377],
	        [-122.400995, 37.774814],
	        [-122.400875, 37.774909],
	        [-122.400197, 37.775445],
	        [-122.398769, 37.776574],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "65-69": {
	    "distance": 0.8311688845555099,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "65-70": {
	    "distance": 0.8580216007087011,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "65-71": {
	    "distance": 2.616750785347765,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.404354, 37.774608],
	        [-122.404226, 37.77471],
	        [-122.403646, 37.775168],
	        [-122.403086, 37.775611],
	        [-122.402537, 37.776045],
	        [-122.401989, 37.776478],
	        [-122.401432, 37.776919],
	        [-122.400799, 37.77742],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "65-72": {
	    "distance": 1.51495915574954,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "65-73": {
	    "distance": 3.896314285055546,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.402681, 37.773481],
	        [-122.402275, 37.773802],
	        [-122.402109, 37.773934],
	        [-122.40206, 37.773973],
	        [-122.401546, 37.774377],
	        [-122.400995, 37.774814],
	        [-122.400875, 37.774909],
	        [-122.400197, 37.775445],
	        [-122.398769, 37.776574],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "65-74": {
	    "distance": 3.729025761185694,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "65-75": {
	    "distance": 3.168307501242794,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "65-76": {
	    "distance": 2.4062752174910678,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "65-77": {
	    "distance": 2.9268072402248206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "65-82": {
	    "distance": 4.170617859976429,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.402681, 37.773481],
	        [-122.402275, 37.773802],
	        [-122.402109, 37.773934],
	        [-122.40206, 37.773973],
	        [-122.401546, 37.774377],
	        [-122.400995, 37.774814],
	        [-122.400875, 37.774909],
	        [-122.400197, 37.775445],
	        [-122.398769, 37.776574],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "66-67": {
	    "distance": 0.7882357502155515,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "66-68": {
	    "distance": 3.0564628886299112,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "66-69": {
	    "distance": 3.2495724724678063,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.415384, 37.774852],
	        [-122.414921, 37.774484],
	        [-122.414368, 37.774043],
	        [-122.413763, 37.77356],
	        [-122.412834, 37.77282],
	        [-122.412235, 37.773293],
	        [-122.411627, 37.773773],
	        [-122.410082, 37.774993],
	        [-122.409524, 37.774548],
	        [-122.409093, 37.774203],
	        [-122.408535, 37.77376],
	        [-122.408445, 37.773688],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.406967, 37.77254],
	        [-122.406665, 37.77278],
	        [-122.406643, 37.773105],
	        [-122.406635, 37.77337],
	        [-122.406627, 37.773563],
	        [-122.406609, 37.773723],
	        [-122.406571, 37.77389],
	        [-122.406516, 37.774071],
	        [-122.406443, 37.774242],
	        [-122.406357, 37.774406],
	        [-122.40624, 37.774592],
	        [-122.406128, 37.774755],
	        [-122.406007, 37.774917],
	        [-122.405882, 37.77507],
	        [-122.405753, 37.775215],
	        [-122.405611, 37.775358],
	        [-122.405438, 37.775523],
	        [-122.40525, 37.7757],
	        [-122.405083, 37.775847],
	        [-122.404909, 37.775985],
	        [-122.404736, 37.77611],
	        [-122.404336, 37.77638],
	        [-122.404113, 37.776528],
	        [-122.403907, 37.776647],
	        [-122.403668, 37.776775],
	        [-122.401613, 37.777839],
	        [-122.401166, 37.778025],
	        [-122.400968, 37.778122],
	        [-122.400778, 37.778231],
	        [-122.400508, 37.778409],
	        [-122.39954, 37.779081],
	        [-122.399342, 37.779217],
	        [-122.399152, 37.779335],
	        [-122.398986, 37.779423],
	        [-122.398863, 37.779474],
	        [-122.398722, 37.779517],
	        [-122.398571, 37.779546],
	        [-122.39841, 37.779566],
	        [-122.398265, 37.779576],
	        [-122.398087, 37.779565],
	        [-122.39755, 37.779134],
	        [-122.397068, 37.778752],
	        [-122.396953, 37.77866],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "66-70": {
	    "distance": 3.2227199524849652,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.415384, 37.774852],
	        [-122.414921, 37.774484],
	        [-122.414368, 37.774043],
	        [-122.413763, 37.77356],
	        [-122.412834, 37.77282],
	        [-122.412235, 37.773293],
	        [-122.411627, 37.773773],
	        [-122.410082, 37.774993],
	        [-122.409524, 37.774548],
	        [-122.409093, 37.774203],
	        [-122.408535, 37.77376],
	        [-122.408445, 37.773688],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.406967, 37.77254],
	        [-122.406665, 37.77278],
	        [-122.406643, 37.773105],
	        [-122.406635, 37.77337],
	        [-122.406627, 37.773563],
	        [-122.406609, 37.773723],
	        [-122.406571, 37.77389],
	        [-122.406516, 37.774071],
	        [-122.406443, 37.774242],
	        [-122.406357, 37.774406],
	        [-122.40624, 37.774592],
	        [-122.406128, 37.774755],
	        [-122.406007, 37.774917],
	        [-122.405882, 37.77507],
	        [-122.405753, 37.775215],
	        [-122.405611, 37.775358],
	        [-122.405438, 37.775523],
	        [-122.40525, 37.7757],
	        [-122.405083, 37.775847],
	        [-122.404909, 37.775985],
	        [-122.404736, 37.77611],
	        [-122.404336, 37.77638],
	        [-122.404113, 37.776528],
	        [-122.403907, 37.776647],
	        [-122.403668, 37.776775],
	        [-122.401613, 37.777839],
	        [-122.401166, 37.778025],
	        [-122.400968, 37.778122],
	        [-122.400778, 37.778231],
	        [-122.400508, 37.778409],
	        [-122.39954, 37.779081],
	        [-122.399342, 37.779217],
	        [-122.399152, 37.779335],
	        [-122.398986, 37.779423],
	        [-122.398863, 37.779474],
	        [-122.398722, 37.779517],
	        [-122.398571, 37.779546],
	        [-122.39841, 37.779566],
	        [-122.398265, 37.779576],
	        [-122.398087, 37.779565],
	        [-122.39755, 37.779134],
	        [-122.397068, 37.778752],
	        [-122.396953, 37.77866],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "66-71": {
	    "distance": 2.4026277036841885,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.410138, 37.782111],
	        [-122.409703, 37.781763],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "66-72": {
	    "distance": 1.088586251912586,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "66-73": {
	    "distance": 4.328989658166904,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "66-74": {
	    "distance": 3.3716763671791514,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "66-75": {
	    "distance": 2.8109581072362513,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "66-76": {
	    "distance": 2.048925823484525,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "66-77": {
	    "distance": 2.569457846218278,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "66-82": {
	    "distance": 4.085270104519244,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "67-68": {
	    "distance": 2.5391936133620856,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "67-69": {
	    "distance": 2.6659172749205737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "67-70": {
	    "distance": 2.692769991073765,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "67-71": {
	    "distance": 1.885358428416364,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.410138, 37.782111],
	        [-122.409703, 37.781763],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "67-72": {
	    "distance": 0.5713169766447611,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "67-73": {
	    "distance": 3.8117203828990793,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "67-75": {
	    "distance": 2.2936888319684257,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "67-74": {
	    "distance": 2.854407091911326,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "67-76": {
	    "distance": 1.5316565482167,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "67-77": {
	    "distance": 2.0521885709504524,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "67-82": {
	    "distance": 3.568000829251419,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "68-69": {
	    "distance": 1.6255797478117089,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "68-70": {
	    "distance": 1.6524324639649004,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "68-71": {
	    "distance": 1.4858857855115042,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "68-72": {
	    "distance": 1.4901200277926805,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405723, 37.780875],
	        [-122.407162, 37.779736],
	        [-122.407705, 37.779298],
	        [-122.408275, 37.778851],
	        [-122.408839, 37.778409],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "68-73": {
	    "distance": 2.5959106860251686,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "68-74": {
	    "distance": 2.414162664647865,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "68-75": {
	    "distance": 1.8534444047049652,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "68-76": {
	    "distance": 1.2767717348221925,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "68-77": {
	    "distance": 1.6119441436869921,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "69-71": {
	    "distance": 2.342298185749182,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "68-82": {
	    "distance": 2.8702142609460517,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "69-70": {
	    "distance": 0.02685272608766316,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "69-73": {
	    "distance": 3.0664806002635303,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "69-72": {
	    "distance": 2.095736248755355,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "69-74": {
	    "distance": 2.8847325788862284,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "69-75": {
	    "distance": 2.324014318943328,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "69-76": {
	    "distance": 1.9704734112465905,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "69-77": {
	    "distance": 2.082514057925355,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "69-82": {
	    "distance": 3.3407841751844134,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "70-71": {
	    "distance": 2.3154456657663403,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.405045, 37.787766],
	        [-122.406589, 37.787566],
	        [-122.407063, 37.787517],
	        [-122.407205, 37.7875],
	        [-122.40733, 37.787484],
	        [-122.407493, 37.787464],
	        [-122.407649, 37.787445],
	        [-122.407786, 37.787428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "70-72": {
	    "distance": 2.122588964908546,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.404762, 37.774286],
	        [-122.4049, 37.774396],
	        [-122.405251, 37.774676],
	        [-122.405447, 37.774832],
	        [-122.406308, 37.775519],
	        [-122.407305, 37.776315],
	        [-122.407519, 37.776485],
	        [-122.407854, 37.776752],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "70-73": {
	    "distance": 3.0396280802806896,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "70-74": {
	    "distance": 2.8578800589033873,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "70-75": {
	    "distance": 2.297161798960487,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "70-76": {
	    "distance": 1.9436208912637494,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "70-77": {
	    "distance": 2.055661537942514,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "70-82": {
	    "distance": 3.3139316552015727,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.39354, 37.779474],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "71-72": {
	    "distance": 1.3625240422715557,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.407866, 37.785495],
	        [-122.407789, 37.785505],
	        [-122.406229, 37.785713],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "71-73": {
	    "distance": 1.6033611495623319,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408329, 37.788301],
	        [-122.407762, 37.788373],
	        [-122.407518, 37.788404],
	        [-122.407426, 37.788415],
	        [-122.406771, 37.788499],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "71-74": {
	    "distance": 1.564222989338402,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408329, 37.788301],
	        [-122.407762, 37.788373],
	        [-122.407518, 37.788404],
	        [-122.407426, 37.788415],
	        [-122.406771, 37.788499],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "71-75": {
	    "distance": 1.0035047293955028,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408329, 37.788301],
	        [-122.407762, 37.788373],
	        [-122.407518, 37.788404],
	        [-122.407426, 37.788415],
	        [-122.406771, 37.788499],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "71-76": {
	    "distance": 0.6104310980173367,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.407866, 37.785495],
	        [-122.407789, 37.785505],
	        [-122.406229, 37.785713],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "71-77": {
	    "distance": 0.7620044683775298,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408329, 37.788301],
	        [-122.407762, 37.788373],
	        [-122.407518, 37.788404],
	        [-122.407426, 37.788415],
	        [-122.406771, 37.788499],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.402845, 37.788996],
	        [-122.402632, 37.789023],
	        [-122.40214, 37.789085],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "71-82": {
	    "distance": 1.8776647244832154,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408329, 37.788301],
	        [-122.407762, 37.788373],
	        [-122.407518, 37.788404],
	        [-122.407426, 37.788415],
	        [-122.406771, 37.788499],
	        [-122.405221, 37.788694],
	        [-122.404371, 37.788802],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "72-74": {
	    "distance": 2.283090201259833,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "72-75": {
	    "distance": 1.7223719413169332,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "72-73": {
	    "distance": 3.2404034922475877,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "72-76": {
	    "distance": 0.9603396575652077,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "72-77": {
	    "distance": 1.48087168029896,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "72-82": {
	    "distance": 2.9966839385999258,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "73-74": {
	    "distance": 1.7754044437232737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.40722, 37.79877],
	        [-122.40788, 37.798686],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40704, 37.798072],
	        [-122.406733, 37.797863],
	        [-122.406307, 37.797566],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "73-75": {
	    "distance": 1.4587855267503325,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.40722, 37.79877],
	        [-122.40788, 37.798686],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40704, 37.798072],
	        [-122.406733, 37.797863],
	        [-122.406307, 37.797566],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "73-76": {
	    "distance": 1.7588257568616446,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.40722, 37.79877],
	        [-122.40788, 37.798686],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40704, 37.798072],
	        [-122.406733, 37.797863],
	        [-122.406307, 37.797566],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "73-77": {
	    "distance": 1.5160534198843687,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.40722, 37.79877],
	        [-122.40788, 37.798686],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40704, 37.798072],
	        [-122.406733, 37.797863],
	        [-122.406307, 37.797566],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "73-82": {
	    "distance": 0.8545144526877436,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.40722, 37.79877],
	        [-122.40788, 37.798686],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40704, 37.798072],
	        [-122.406733, 37.797863],
	        [-122.406307, 37.797566],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.406256, 37.79792],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "74-75": {
	    "distance": 0.5607193130875997,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "74-76": {
	    "distance": 1.3227505436946247,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "74-77": {
	    "distance": 0.8022188729850622,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "74-82": {
	    "distance": 1.3019052424016848,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392512, 37.793786],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "75-76": {
	    "distance": 0.7620322837517254,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "75-77": {
	    "distance": 0.24150061304216297,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "76-77": {
	    "distance": 0.5205320227337523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "75-82": {
	    "distance": 1.2743130504276932,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "76-82": {
	    "distance": 2.0363442810347188,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "77-82": {
	    "distance": 1.5158126103251555,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "46-41": {
	    "distance": 0.6927055673263851,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "46-47": {
	    "distance": 1.3638754487186506,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "46-45": {
	    "distance": 0.7428488314795862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401404, 37.794427],
	        [-122.402282, 37.794314],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "46-48": {
	    "distance": 1.2448876979986347,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.399891, 37.798833],
	        [-122.400061, 37.799678],
	        [-122.400249, 37.800617],
	        [-122.39954, 37.800707],
	        [-122.399475, 37.800725],
	        [-122.399427, 37.800744],
	        [-122.399337, 37.800794],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "46-42": {
	    "distance": 0.7479278361308588,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.403501, 37.796427],
	        [-122.40292, 37.7965],
	        [-122.402412, 37.796565],
	        [-122.40186, 37.796634],
	        [-122.401295, 37.796706],
	        [-122.400693, 37.796782],
	        [-122.400079, 37.79686],
	        [-122.399511, 37.796931],
	        [-122.399348, 37.796954],
	        [-122.399192, 37.796975],
	        [-122.398738, 37.797035],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "46-49": {
	    "distance": 1.984344699993521,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "46-51": {
	    "distance": 1.910943141576527,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "46-50": {
	    "distance": 1.678137670812615,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395452, 37.796517],
	        [-122.39508, 37.796081],
	        [-122.394968, 37.795946],
	        [-122.394881, 37.795826],
	        [-122.394809, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393362, 37.794385],
	        [-122.393258, 37.794377],
	        [-122.393198, 37.794411],
	        [-122.393177, 37.794466],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "46-55": {
	    "distance": 1.6236253773382925,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "46-56": {
	    "distance": 1.2306772049974144,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "46-53": {
	    "distance": 1.8592205553915184,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "46-54": {
	    "distance": 2.466331529176279,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "46-58": {
	    "distance": 3.119349292519417,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "46-57": {
	    "distance": 2.263155178994174,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "46-59": {
	    "distance": 3.071658578709098,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "46-62": {
	    "distance": 1.7813997484346074,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "46-60": {
	    "distance": 1.4137328777287368,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.402419, 37.799377],
	        [-122.40261, 37.800315],
	        [-122.402804, 37.801267],
	        [-122.402891, 37.801696],
	        [-122.402989, 37.802174],
	        [-122.403156, 37.803014],
	        [-122.403174, 37.803104],
	        [-122.403189, 37.803176],
	        [-122.403345, 37.803964],
	        [-122.403358, 37.804032],
	        [-122.403376, 37.804122],
	        [-122.403525, 37.804897],
	        [-122.403542, 37.804989],
	        [-122.403561, 37.805122],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "46-61": {
	    "distance": 2.526477654533146,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "46-64": {
	    "distance": 2.2382231540733417,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "46-63": {
	    "distance": 1.7713395983769475,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399042, 37.790954],
	        [-122.398576, 37.790581],
	        [-122.398148, 37.790238],
	        [-122.398107, 37.790206],
	        [-122.397927, 37.790062],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "46-67": {
	    "distance": 2.9854642095907837,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "46-66": {
	    "distance": 3.8316656623612206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416945, 37.777652],
	        [-122.417475, 37.777584],
	        [-122.417586, 37.777568],
	        [-122.418049, 37.777505],
	        [-122.417916, 37.776859],
	        [-122.417889, 37.776816],
	        [-122.417839, 37.77677],
	        [-122.417784, 37.776729],
	        [-122.417677, 37.776665],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.417125, 37.774325],
	        [-122.417233, 37.774269],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "46-68": {
	    "distance": 1.6980403668084425,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "46-65": {
	    "distance": 4.212940580766346,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.400621, 37.781581],
	        [-122.400376, 37.781387],
	        [-122.400158, 37.781211],
	        [-122.399635, 37.780791],
	        [-122.399619, 37.780658],
	        [-122.39963, 37.78056],
	        [-122.399649, 37.780466],
	        [-122.39968, 37.780359],
	        [-122.399726, 37.780249],
	        [-122.399786, 37.78014],
	        [-122.399869, 37.780029],
	        [-122.399974, 37.779903],
	        [-122.400086, 37.779781],
	        [-122.400219, 37.779645],
	        [-122.400369, 37.7795],
	        [-122.400526, 37.779359],
	        [-122.400991, 37.77897],
	        [-122.401106, 37.778873],
	        [-122.40129, 37.778716],
	        [-122.401954, 37.778094],
	        [-122.402207, 37.777903],
	        [-122.402476, 37.777712],
	        [-122.402737, 37.777532],
	        [-122.402994, 37.777365],
	        [-122.403258, 37.777202],
	        [-122.405095, 37.776113],
	        [-122.405315, 37.776008],
	        [-122.405467, 37.775927],
	        [-122.405602, 37.775839],
	        [-122.405758, 37.775723],
	        [-122.405907, 37.775601],
	        [-122.406057, 37.775469],
	        [-122.406219, 37.775314],
	        [-122.406378, 37.775151],
	        [-122.406518, 37.774999],
	        [-122.406654, 37.774836],
	        [-122.406787, 37.774665],
	        [-122.407086, 37.774261],
	        [-122.407156, 37.774174],
	        [-122.407231, 37.774093],
	        [-122.407311, 37.774021],
	        [-122.407407, 37.773944],
	        [-122.407502, 37.773872],
	        [-122.407736, 37.77371],
	        [-122.407792, 37.77365],
	        [-122.407832, 37.773582],
	        [-122.407859, 37.773513],
	        [-122.407872, 37.773448],
	        [-122.407866, 37.773373],
	        [-122.407848, 37.773298],
	        [-122.407773, 37.773152],
	        [-122.407267, 37.77272],
	        [-122.407044, 37.772488],
	        [-122.406939, 37.772376],
	        [-122.406797, 37.772255],
	        [-122.406473, 37.771951],
	        [-122.405964, 37.771631],
	        [-122.405569, 37.77135],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.404048, 37.770007],
	        [-122.404085, 37.769951],
	        [-122.404078, 37.769861],
	        [-122.404031, 37.769808],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "46-69": {
	    "distance": 3.1819457956305914,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "46-70": {
	    "distance": 3.1550932756477503,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.39577, 37.777717],
	        [-122.395196, 37.777261],
	        [-122.395097, 37.777181],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "46-74": {
	    "distance": 1.4703863482357131,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "46-72": {
	    "distance": 2.4141473189392917,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "46-73": {
	    "distance": 0.4582198089716706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "46-71": {
	    "distance": 1.1504192861979472,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.405665, 37.795244],
	        [-122.405847, 37.795226],
	        [-122.406065, 37.795203],
	        [-122.406493, 37.795153],
	        [-122.407013, 37.795085],
	        [-122.40682, 37.794196],
	        [-122.406639, 37.793309],
	        [-122.407145, 37.793245],
	        [-122.407272, 37.793229],
	        [-122.407385, 37.793215],
	        [-122.40772, 37.793173],
	        [-122.407644, 37.792738],
	        [-122.40714, 37.790283],
	        [-122.407038, 37.789698],
	        [-122.406986, 37.789429],
	        [-122.407752, 37.789333],
	        [-122.408615, 37.789226],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "46-75": {
	    "distance": 1.1537674312627715,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399451, 37.791282],
	        [-122.399271, 37.791137],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "46-76": {
	    "distance": 1.453807661374084,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "46-77": {
	    "distance": 1.2110353243968082,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.402671, 37.792385],
	        [-122.402571, 37.791899],
	        [-122.40238, 37.790969],
	        [-122.40219, 37.790039],
	        [-122.402013, 37.789184],
	        [-122.401997, 37.789103],
	        [-122.401994, 37.78903],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.788895],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "46-82": {
	    "distance": 0.732523383892554,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.400876, 37.798602]
	      ]
	    }
	  },
	  "42-41": {
	    "distance": 0.6203002822520967,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "49-41": {
	    "distance": 1.2916391726432206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "47-41": {
	    "distance": 1.3666266037514234,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "48-41": {
	    "distance": 1.246979222990658,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399144, 37.800912],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "45-41": {
	    "distance": 0.7785930868720814,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.402282, 37.794314],
	        [-122.4022, 37.793868],
	        [-122.401311, 37.793981],
	        [-122.400141, 37.794129],
	        [-122.398966, 37.794278],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "50-41": {
	    "distance": 0.9854321434623146,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393177, 37.794466],
	        [-122.393198, 37.794411],
	        [-122.393258, 37.794377],
	        [-122.393362, 37.794385],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "51-41": {
	    "distance": 1.218237614226226,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "53-41": {
	    "distance": 1.8619717104242905,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "55-41": {
	    "distance": 0.930919849987992,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "54-41": {
	    "distance": 1.7736260018259786,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "57-41": {
	    "distance": 2.265906334026946,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "56-41": {
	    "distance": 0.5379716776471142,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "58-41": {
	    "distance": 3.12210044755219,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "59-41": {
	    "distance": 3.0744097337418714,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "60-41": {
	    "distance": 1.756974782596591,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "61-41": {
	    "distance": 2.6172538493666053,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "62-41": {
	    "distance": 1.8721759432680667,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "63-41": {
	    "distance": 1.3652948524996538,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "64-41": {
	    "distance": 2.328999348906801,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "65-41": {
	    "distance": 4.215691735799121,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "66-41": {
	    "distance": 3.834416817393993,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "67-41": {
	    "distance": 2.988215364623557,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "68-41": {
	    "distance": 1.7888165616419012,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "69-41": {
	    "distance": 3.3492256506432025,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "70-41": {
	    "distance": 3.24586947048121,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "71-41": {
	    "distance": 1.7851723872587155,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "72-41": {
	    "distance": 2.416898473972064,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "73-41": {
	    "distance": 1.458724800792195,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "74-41": {
	    "distance": 0.7776808208854129,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "75-41": {
	    "distance": 0.6945275857998316,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "76-41": {
	    "distance": 1.4565588164068566,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "77-41": {
	    "distance": 0.936027145697294,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "82-41": {
	    "distance": 0.9946321283739088,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.39999, 37.795079]
	      ]
	    }
	  },
	  "45-42": {
	    "distance": 0.9301495255545978,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.402282, 37.794314],
	        [-122.401404, 37.794427],
	        [-122.401491, 37.794864],
	        [-122.401582, 37.795306],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "47-42": {
	    "distance": 1.5678301456144892,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "48-42": {
	    "distance": 0.6676520683522735,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399144, 37.800912],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "49-42": {
	    "distance": 1.3419059695033846,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "50-42": {
	    "distance": 0.8459474385061305,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393177, 37.794466],
	        [-122.393198, 37.794411],
	        [-122.393258, 37.794377],
	        [-122.393362, 37.794385],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "51-42": {
	    "distance": 1.0787529092700416,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "53-42": {
	    "distance": 2.0631752522873565,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "54-42": {
	    "distance": 1.650840817197063,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "55-42": {
	    "distance": 1.1831105592865758,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793494],
	        [-122.397792, 37.794428],
	        [-122.396732, 37.794568],
	        [-122.396649, 37.794578],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "56-42": {
	    "distance": 0.7901623869456978,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793494],
	        [-122.397792, 37.794428],
	        [-122.396732, 37.794568],
	        [-122.396649, 37.794578],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "57-42": {
	    "distance": 2.467109875890012,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "58-42": {
	    "distance": 3.3233039894152565,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "59-42": {
	    "distance": 3.275613275604938,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "60-42": {
	    "distance": 1.1776476279582064,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397882, 37.799145],
	        [-122.397961, 37.799103],
	        [-122.398026, 37.799069],
	        [-122.398097, 37.799039],
	        [-122.398222, 37.798989],
	        [-122.398334, 37.798957],
	        [-122.398615, 37.798906],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "61-42": {
	    "distance": 2.8184573912296713,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "62-42": {
	    "distance": 2.0733794851311327,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "65-42": {
	    "distance": 4.416895277662187,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "63-42": {
	    "distance": 1.7153058730662893,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.398588, 37.792408],
	        [-122.397552, 37.792541],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "64-42": {
	    "distance": 2.530202890769867,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "66-42": {
	    "distance": 4.035620359257059,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "67-42": {
	    "distance": 3.1894189064866234,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "68-42": {
	    "distance": 1.9900201035049672,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "69-42": {
	    "distance": 3.550429192506269,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "71-42": {
	    "distance": 1.9863759291217815,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "70-42": {
	    "distance": 3.4470730123442763,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "72-42": {
	    "distance": 2.61810201583513,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "73-42": {
	    "distance": 0.987343323807693,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406256, 37.79792],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "74-42": {
	    "distance": 0.8279476177455772,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "75-42": {
	    "distance": 0.8957311276628979,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "76-42": {
	    "distance": 1.6577623582699226,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "77-42": {
	    "distance": 1.13723068756036,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "82-42": {
	    "distance": 0.3743336480929386,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398382, 37.797284]
	      ]
	    }
	  },
	  "47-45": {
	    "distance": 0.9122632606979215,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "48-45": {
	    "distance": 1.633127320078912,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399337, 37.800794],
	        [-122.399427, 37.800744],
	        [-122.399475, 37.800725],
	        [-122.39954, 37.800707],
	        [-122.400249, 37.800617],
	        [-122.400061, 37.799678],
	        [-122.399891, 37.798833],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404012, 37.79364],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "49-45": {
	    "distance": 1.5342540662846418,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "50-45": {
	    "distance": 1.7232604017487843,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393177, 37.794466],
	        [-122.393198, 37.794411],
	        [-122.393258, 37.794377],
	        [-122.393362, 37.794385],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404012, 37.79364],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "51-45": {
	    "distance": 1.536198744580889,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "53-45": {
	    "distance": 1.407608367370789,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "54-45": {
	    "distance": 2.0162408954673996,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "55-45": {
	    "distance": 1.1735343694861349,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "56-45": {
	    "distance": 0.7805861971452568,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "57-45": {
	    "distance": 1.8115429909734444,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "58-45": {
	    "distance": 2.6677371044986877,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "59-45": {
	    "distance": 2.620046390688369,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "60-45": {
	    "distance": 1.8019724998090139,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403561, 37.805122],
	        [-122.403542, 37.804989],
	        [-122.403525, 37.804897],
	        [-122.403376, 37.804122],
	        [-122.403358, 37.804032],
	        [-122.403345, 37.803964],
	        [-122.403189, 37.803176],
	        [-122.403174, 37.803104],
	        [-122.403156, 37.803014],
	        [-122.402989, 37.802174],
	        [-122.402891, 37.801696],
	        [-122.402804, 37.801267],
	        [-122.40261, 37.800315],
	        [-122.402419, 37.799377],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404012, 37.79364],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "61-45": {
	    "distance": 2.074865466512417,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "62-45": {
	    "distance": 1.3297875604138785,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "63-45": {
	    "distance": 1.3191081610526474,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399707, 37.791309],
	        [-122.400744, 37.791177],
	        [-122.40113, 37.791128],
	        [-122.402005, 37.791016],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "64-45": {
	    "distance": 1.7866109660526126,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "65-45": {
	    "distance": 3.7613283927456176,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "66-45": {
	    "distance": 3.3800534743404906,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "67-45": {
	    "distance": 2.5338520215700546,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "68-45": {
	    "distance": 1.246428178787713,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "69-45": {
	    "distance": 2.730333607609862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "70-45": {
	    "distance": 2.7034810876270208,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "71-45": {
	    "distance": 1.1405005941778625,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408615, 37.789226],
	        [-122.407752, 37.789333],
	        [-122.406986, 37.789429],
	        [-122.405404, 37.78962],
	        [-122.40459, 37.789735],
	        [-122.404208, 37.789783],
	        [-122.403866, 37.789826],
	        [-122.40303, 37.789932],
	        [-122.402552, 37.789995],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "72-45": {
	    "distance": 1.9625351309185626,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "73-45": {
	    "distance": 0.8464594310519479,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404012, 37.79364],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "74-45": {
	    "distance": 1.0202957145268345,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "75-45": {
	    "distance": 0.7015359939384715,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399707, 37.791309],
	        [-122.400744, 37.791177],
	        [-122.40113, 37.791128],
	        [-122.402005, 37.791016],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "76-45": {
	    "distance": 1.002195473353355,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "77-45": {
	    "distance": 0.759423136376079,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "82-45": {
	    "distance": 1.120763005972831,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404012, 37.79364],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "48-47": {
	    "distance": 2.0695308939177868,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399144, 37.800912],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "49-47": {
	    "distance": 1.6175484137187517,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "50-47": {
	    "distance": 1.5758556860713495,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392512, 37.793786],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "51-47": {
	    "distance": 1.6194930920149988,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "53-47": {
	    "distance": 0.9495567719947818,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "54-47": {
	    "distance": 2.09953524290151,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "55-47": {
	    "distance": 1.1627341147688568,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "56-47": {
	    "distance": 0.7697859424279787,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "57-47": {
	    "distance": 1.353491395597437,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "58-47": {
	    "distance": 2.209685509122681,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "59-47": {
	    "distance": 2.161994795312362,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "60-47": {
	    "distance": 2.5524529321006226,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403561, 37.805122],
	        [-122.403542, 37.804989],
	        [-122.403525, 37.804897],
	        [-122.403376, 37.804122],
	        [-122.403358, 37.804032],
	        [-122.403345, 37.803964],
	        [-122.403189, 37.803176],
	        [-122.403174, 37.803104],
	        [-122.403156, 37.803014],
	        [-122.402989, 37.802174],
	        [-122.402891, 37.801696],
	        [-122.402804, 37.801267],
	        [-122.40261, 37.800315],
	        [-122.402419, 37.799377],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "61-47": {
	    "distance": 1.6168138711364097,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "62-47": {
	    "distance": 0.8717359650378712,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "63-47": {
	    "distance": 1.1604439691322206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "65-47": {
	    "distance": 3.3032767973696107,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "66-47": {
	    "distance": 2.9220018789644837,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "64-47": {
	    "distance": 1.3285593706766052,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "67-47": {
	    "distance": 2.0758004261940473,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "68-47": {
	    "distance": 0.7883765834117057,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "69-47": {
	    "distance": 2.272282012233855,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "71-47": {
	    "distance": 0.8727574488292068,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "70-47": {
	    "distance": 2.245429492251014,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "72-47": {
	    "distance": 1.5044835355425552,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "73-47": {
	    "distance": 1.5969398633435556,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "74-47": {
	    "distance": 1.1035900619609444,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "77-47": {
	    "distance": 0.3013715410000719,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "76-47": {
	    "distance": 0.5441438779773476,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "75-47": {
	    "distance": 0.5428718020180451,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "82-47": {
	    "distance": 1.8712434382644392,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403446, 37.78892]
	      ]
	    }
	  },
	  "49-48": {
	    "distance": 1.4591094275378496,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395523, 37.7966],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "50-48": {
	    "distance": 0.9338776812012867,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393177, 37.794466],
	        [-122.393198, 37.794411],
	        [-122.393258, 37.794377],
	        [-122.393362, 37.794385],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395523, 37.7966],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "51-48": {
	    "distance": 1.1666869713211792,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "53-48": {
	    "distance": 2.4149832777220146,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "54-48": {
	    "distance": 1.7387748792482005,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "55-48": {
	    "distance": 1.5349185847212339,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793494],
	        [-122.397792, 37.794428],
	        [-122.396732, 37.794568],
	        [-122.396649, 37.794578],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "56-48": {
	    "distance": 1.141970412380356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793494],
	        [-122.397792, 37.794428],
	        [-122.396732, 37.794568],
	        [-122.396649, 37.794578],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "57-48": {
	    "distance": 2.8189179013246695,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "58-48": {
	    "distance": 3.675112014849914,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "59-48": {
	    "distance": 3.6274213010395955,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "60-48": {
	    "distance": 1.0165841501620876,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "61-48": {
	    "distance": 2.667975484929823,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.389683, 37.779916],
	        [-122.388991, 37.780472],
	        [-122.388854, 37.780588],
	        [-122.388733, 37.780723],
	        [-122.388646, 37.780845],
	        [-122.388573, 37.780974],
	        [-122.388522, 37.781102],
	        [-122.388485, 37.781222],
	        [-122.388464, 37.781351],
	        [-122.388431, 37.781791],
	        [-122.388424, 37.781908],
	        [-122.388376, 37.782545],
	        [-122.388309, 37.783373],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "62-48": {
	    "distance": 2.179403100324523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "63-48": {
	    "distance": 1.913114072927713,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "64-48": {
	    "distance": 2.6362266257850635,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "65-48": {
	    "distance": 4.768703303096845,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "66-48": {
	    "distance": 4.3874283846917175,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "67-48": {
	    "distance": 3.541226931921281,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "68-48": {
	    "distance": 2.3418281289396248,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "69-48": {
	    "distance": 3.352003311372965,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "70-48": {
	    "distance": 3.3251507913901235,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "71-48": {
	    "distance": 2.338183954556439,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "72-48": {
	    "distance": 2.969910041269788,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "73-48": {
	    "distance": 1.0011472472215381,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406256, 37.79792],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "74-48": {
	    "distance": 1.0960533155075791,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "75-48": {
	    "distance": 1.247539153097556,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "76-48": {
	    "distance": 2.0095703837045806,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "77-48": {
	    "distance": 1.4890387129950178,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "82-48": {
	    "distance": 0.388137571506784,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.398487, 37.799976]
	      ]
	    }
	  },
	  "50-49": {
	    "distance": 1.0610941227988973,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "51-49": {
	    "distance": 0.7610112027779683,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "53-49": {
	    "distance": 2.489810948221332,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "54-49": {
	    "distance": 0.4819872650875055,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "55-49": {
	    "distance": 0.8981644022818197,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.392994, 37.787515],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "56-49": {
	    "distance": 1.3294418798470382,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "57-49": {
	    "distance": 2.073507277380827,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "58-49": {
	    "distance": 3.7499396853492306,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "59-49": {
	    "distance": 3.702248971538912,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "60-49": {
	    "distance": 2.467353596339898,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "61-49": {
	    "distance": 1.4111878707691285,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.389683, 37.779916],
	        [-122.388991, 37.780472],
	        [-122.388854, 37.780588],
	        [-122.388733, 37.780723],
	        [-122.388646, 37.780845],
	        [-122.388573, 37.780974],
	        [-122.388522, 37.781102],
	        [-122.388485, 37.781222],
	        [-122.388464, 37.781351],
	        [-122.388431, 37.781791],
	        [-122.388424, 37.781908],
	        [-122.388376, 37.782545],
	        [-122.388309, 37.783373],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "62-49": {
	    "distance": 0.9705334756546822,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "63-49": {
	    "distance": 1.186592229532913,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.392994, 37.787515],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "64-49": {
	    "distance": 1.1397907160295566,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "65-49": {
	    "distance": 2.926384388658131,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "66-49": {
	    "distance": 3.9646481387574726,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414171, 37.775802],
	        [-122.413714, 37.775439],
	        [-122.413157, 37.774996],
	        [-122.412622, 37.774568],
	        [-122.412165, 37.774203],
	        [-122.411627, 37.773773],
	        [-122.411074, 37.77333],
	        [-122.410692, 37.773024],
	        [-122.410083, 37.772537],
	        [-122.409693, 37.772845],
	        [-122.408922, 37.773454],
	        [-122.408666, 37.773656],
	        [-122.408445, 37.773688],
	        [-122.408286, 37.773712],
	        [-122.407822, 37.773761],
	        [-122.40771, 37.773783],
	        [-122.407609, 37.773817],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.398365, 37.781794],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "67-49": {
	    "distance": 3.6160546024205975,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "68-49": {
	    "distance": 1.531246856394665,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "69-49": {
	    "distance": 2.0952156972122697,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "70-49": {
	    "distance": 2.0683631772294286,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "71-49": {
	    "distance": 2.413011625055757,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "72-49": {
	    "distance": 3.0447377117691046,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "74-49": {
	    "distance": 1.166886243513381,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "73-49": {
	    "distance": 2.460682381579206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "75-49": {
	    "distance": 1.3223668235968724,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "76-49": {
	    "distance": 2.084398054203898,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "77-49": {
	    "distance": 1.5638663834943347,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "82-49": {
	    "distance": 1.8907326429412532,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "53-50": {
	    "distance": 2.1749747919621263,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "51-50": {
	    "distance": 0.723240782247018,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "54-50": {
	    "distance": 1.2953286901740395,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "55-50": {
	    "distance": 1.0597948825842305,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "56-50": {
	    "distance": 0.9019619266204677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793494],
	        [-122.397792, 37.794428],
	        [-122.396732, 37.794568],
	        [-122.396649, 37.794578],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "57-50": {
	    "distance": 2.5789094155647816,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "58-50": {
	    "distance": 3.4351035290900263,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "59-50": {
	    "distance": 3.3874128152797076,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "60-50": {
	    "distance": 1.406259582794957,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "61-50": {
	    "distance": 2.224529295855662,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.389683, 37.779916],
	        [-122.388991, 37.780472],
	        [-122.388854, 37.780588],
	        [-122.388733, 37.780723],
	        [-122.388646, 37.780845],
	        [-122.388573, 37.780974],
	        [-122.388522, 37.781102],
	        [-122.388485, 37.781222],
	        [-122.388464, 37.781351],
	        [-122.388431, 37.781791],
	        [-122.388424, 37.781908],
	        [-122.388376, 37.782545],
	        [-122.388309, 37.783373],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "62-50": {
	    "distance": 1.7604589124927024,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "63-50": {
	    "distance": 1.4941698850958924,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "64-50": {
	    "distance": 2.109359578281155,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "65-50": {
	    "distance": 4.528694817336955,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "66-50": {
	    "distance": 4.147419898931829,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "67-50": {
	    "distance": 3.301218446161393,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "68-50": {
	    "distance": 2.101819643179737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.400543, 37.79026],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "69-50": {
	    "distance": 2.9085571222988036,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "70-50": {
	    "distance": 2.8817046023159625,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "71-50": {
	    "distance": 2.0981754687965513,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "72-50": {
	    "distance": 2.7299015555099,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "73-50": {
	    "distance": 1.3995883680342653,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "74-50": {
	    "distance": 0.6526071264334178,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "75-50": {
	    "distance": 1.0075306673376676,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "77-50": {
	    "distance": 1.2490302272351295,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "76-50": {
	    "distance": 1.7695618979446923,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "53-51": {
	    "distance": 2.3956711681058196,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "82-50": {
	    "distance": 0.8296386293963132,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.394076, 37.795463]
	      ]
	    }
	  },
	  "58-51": {
	    "distance": 3.6557999052337182,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "54-51": {
	    "distance": 0.572079519809044,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "57-51": {
	    "distance": 1.9809069523944667,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.393333, 37.788225],
	        [-122.393209, 37.788323],
	        [-122.392739, 37.788691],
	        [-122.391895, 37.789356],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "55-51": {
	    "distance": 0.8046517632862871,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.393333, 37.788225],
	        [-122.393209, 37.788323],
	        [-122.392739, 37.788691],
	        [-122.391895, 37.789356],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "56-51": {
	    "distance": 1.2353020997315254,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "59-51": {
	    "distance": 3.6081091914233996,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "60-51": {
	    "distance": 2.636379925126815,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "63-51": {
	    "distance": 1.0930795905373802,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.393333, 37.788225],
	        [-122.393209, 37.788323],
	        [-122.392739, 37.788691],
	        [-122.391895, 37.789356],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "61-51": {
	    "distance": 1.5012801254906671,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.389683, 37.779916],
	        [-122.388991, 37.780472],
	        [-122.388854, 37.780588],
	        [-122.388733, 37.780723],
	        [-122.388646, 37.780845],
	        [-122.388573, 37.780974],
	        [-122.388522, 37.781102],
	        [-122.388485, 37.781222],
	        [-122.388464, 37.781351],
	        [-122.388431, 37.781791],
	        [-122.388424, 37.781908],
	        [-122.388376, 37.782545],
	        [-122.388309, 37.783373],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "62-51": {
	    "distance": 1.2629509272046096,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "64-51": {
	    "distance": 1.3861104079161597,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "65-51": {
	    "distance": 3.01647664337967,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "67-51": {
	    "distance": 3.521914822305085,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "66-51": {
	    "distance": 3.832123699508959,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.412419, 37.77805],
	        [-122.412205, 37.77822],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.407177, 37.782192],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404156, 37.784618],
	        [-122.403515, 37.785123],
	        [-122.403264, 37.785321],
	        [-122.402768, 37.785709],
	        [-122.402608, 37.785836],
	        [-122.402493, 37.785928],
	        [-122.402156, 37.786195],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "68-51": {
	    "distance": 1.4386465314083063,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.393333, 37.788225],
	        [-122.393209, 37.788323],
	        [-122.392739, 37.788691],
	        [-122.391895, 37.789356],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "69-51": {
	    "distance": 2.1853079519338086,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "70-51": {
	    "distance": 2.1584554319509675,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.388714, 37.789582],
	        [-122.388824, 37.789684],
	        [-122.389257, 37.790028],
	        [-122.390033, 37.790645],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "71-51": {
	    "distance": 2.3188718449402446,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "72-51": {
	    "distance": 2.950597931653592,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "73-51": {
	    "distance": 2.3381299433224196,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "74-51": {
	    "distance": 1.0727464633978685,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "75-51": {
	    "distance": 1.2282270434813596,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "76-51": {
	    "distance": 1.9902582740883852,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "77-51": {
	    "distance": 1.469726603378822,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "82-51": {
	    "distance": 1.8740372709041329,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390896, 37.791517]
	      ]
	    }
	  },
	  "54-53": {
	    "distance": 2.7241086186526244,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "55-53": {
	    "distance": 1.7873074905199717,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "56-53": {
	    "distance": 1.3943593181790934,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "57-53": {
	    "distance": 0.39196124929200027,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "58-53": {
	    "distance": 1.2601310671907893,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "59-53": {
	    "distance": 1.2124403533804706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "60-53": {
	    "distance": 3.2040998292748353,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "61-53": {
	    "distance": 2.241387246887524,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "62-53": {
	    "distance": 1.496309340788986,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "63-53": {
	    "distance": 1.7850173448833357,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "64-53": {
	    "distance": 1.9531327464277204,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "65-53": {
	    "distance": 2.0654131161035236,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "66-53": {
	    "distance": 1.972447437032592,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "67-53": {
	    "distance": 1.1262459842621564,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "68-53": {
	    "distance": 1.4129499591628205,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "69-53": {
	    "distance": 1.5396736207213089,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "70-53": {
	    "distance": 1.5665263368745002,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "71-53": {
	    "distance": 1.064926225356679,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.410071, 37.78808],
	        [-122.411699, 37.787873],
	        [-122.411642, 37.787567],
	        [-122.411572, 37.78722],
	        [-122.411516, 37.78694],
	        [-122.411334, 37.78601],
	        [-122.41114, 37.785075],
	        [-122.410953, 37.784148],
	        [-122.410765, 37.783214],
	        [-122.409144, 37.78342],
	        [-122.408849, 37.783458],
	        [-122.408802, 37.78347],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "72-53": {
	    "distance": 0.5549290936106642,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "73-53": {
	    "distance": 2.6854767286998142,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "74-53": {
	    "distance": 1.7281634377120592,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "75-53": {
	    "distance": 1.16744517776916,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "76-53": {
	    "distance": 0.4054128940174344,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "77-53": {
	    "distance": 0.9259449167511867,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "82-53": {
	    "distance": 2.4417571750521523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "55-54": {
	    "distance": 0.9463650321672956,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.392994, 37.787515],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390985, 37.787632],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "56-54": {
	    "distance": 1.3776424935503895,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397611, 37.79352],
	        [-122.39648, 37.793664],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "57-54": {
	    "distance": 2.1217079072663036,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390985, 37.787632],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "58-54": {
	    "distance": 3.798140299052582,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "59-54": {
	    "distance": 3.7504495852422632,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "60-54": {
	    "distance": 2.558060440109889,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388321, 37.789534],
	        [-122.388231, 37.789419],
	        [-122.388158, 37.789301],
	        [-122.388079, 37.789155],
	        [-122.38801, 37.788993],
	        [-122.38796, 37.788838],
	        [-122.387807, 37.788262],
	        [-122.387769, 37.788101],
	        [-122.387741, 37.787933],
	        [-122.387722, 37.787775],
	        [-122.387712, 37.787615],
	        [-122.38771, 37.787469],
	        [-122.387716, 37.787311],
	        [-122.387728, 37.787179],
	        [-122.387737, 37.78708],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "61-54": {
	    "distance": 0.9292339411335344,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.389683, 37.779916],
	        [-122.388991, 37.780472],
	        [-122.388854, 37.780588],
	        [-122.388733, 37.780723],
	        [-122.388646, 37.780845],
	        [-122.388573, 37.780974],
	        [-122.388522, 37.781102],
	        [-122.388485, 37.781222],
	        [-122.388464, 37.781351],
	        [-122.388431, 37.781791],
	        [-122.388424, 37.781908],
	        [-122.388376, 37.782545],
	        [-122.388309, 37.783373],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "62-54": {
	    "distance": 1.0187340893580334,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "63-54": {
	    "distance": 1.234792859418389,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.392994, 37.787515],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390985, 37.787632],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "65-54": {
	    "distance": 2.4444304590225365,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "66-54": {
	    "distance": 4.012848752460824,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414171, 37.775802],
	        [-122.413714, 37.775439],
	        [-122.413157, 37.774996],
	        [-122.412622, 37.774568],
	        [-122.412165, 37.774203],
	        [-122.411627, 37.773773],
	        [-122.411074, 37.77333],
	        [-122.410692, 37.773024],
	        [-122.410083, 37.772537],
	        [-122.409693, 37.772845],
	        [-122.408922, 37.773454],
	        [-122.408666, 37.773656],
	        [-122.408445, 37.773688],
	        [-122.408286, 37.773712],
	        [-122.407822, 37.773761],
	        [-122.40771, 37.773783],
	        [-122.407609, 37.773817],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.398365, 37.781794],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "64-54": {
	    "distance": 0.8140642235590269,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "67-54": {
	    "distance": 3.6642552161239488,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "68-54": {
	    "distance": 1.5794474862801415,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394809, 37.784606],
	        [-122.394414, 37.784922],
	        [-122.394038, 37.785216],
	        [-122.393426, 37.7857],
	        [-122.392949, 37.786077],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390985, 37.787632],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "69-54": {
	    "distance": 1.6132617675766754,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "70-54": {
	    "distance": 1.5864092475938343,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391988, 37.781933],
	        [-122.391673, 37.782182],
	        [-122.39131, 37.782469],
	        [-122.389855, 37.783619],
	        [-122.388483, 37.784703],
	        [-122.388408, 37.784743],
	        [-122.388318, 37.784753],
	        [-122.388198, 37.784748],
	        [-122.388186, 37.784917],
	        [-122.388177, 37.785055],
	        [-122.388043, 37.786995],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "71-54": {
	    "distance": 2.461212238759108,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "74-54": {
	    "distance": 1.2150868572167324,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "72-54": {
	    "distance": 3.092938325472456,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "73-54": {
	    "distance": 2.551389225349197,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388321, 37.789534],
	        [-122.388231, 37.789419],
	        [-122.388158, 37.789301],
	        [-122.388079, 37.789155],
	        [-122.38801, 37.788993],
	        [-122.38796, 37.788838],
	        [-122.387807, 37.788262],
	        [-122.387769, 37.788101],
	        [-122.387741, 37.787933],
	        [-122.387722, 37.787775],
	        [-122.387712, 37.787615],
	        [-122.38771, 37.787469],
	        [-122.387716, 37.787311],
	        [-122.387728, 37.787179],
	        [-122.387737, 37.78708],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "75-54": {
	    "distance": 1.3705674373002237,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "76-54": {
	    "distance": 2.1325986679072497,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "77-54": {
	    "distance": 1.6120669971976862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "82-54": {
	    "distance": 1.9814405441405816,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.392024, 37.793466],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.389827, 37.790813],
	        [-122.389433, 37.790495],
	        [-122.388623, 37.789839],
	        [-122.388512, 37.789741],
	        [-122.388411, 37.78964],
	        [-122.388321, 37.789534],
	        [-122.388231, 37.789419],
	        [-122.388158, 37.789301],
	        [-122.388079, 37.789155],
	        [-122.38801, 37.788993],
	        [-122.38796, 37.788838],
	        [-122.387807, 37.788262],
	        [-122.387769, 37.788101],
	        [-122.387741, 37.787933],
	        [-122.387722, 37.787775],
	        [-122.387712, 37.787615],
	        [-122.38771, 37.787469],
	        [-122.387716, 37.787311],
	        [-122.387728, 37.787179],
	        [-122.387737, 37.78708],
	        [-122.388036, 37.787094],
	        [-122.388026, 37.787152]
	      ]
	    }
	  },
	  "57-55": {
	    "distance": 1.3222029239548287,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "56-55": {
	    "distance": 0.6117877798535523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398234, 37.791694],
	        [-122.397548, 37.791147],
	        [-122.397244, 37.790905],
	        [-122.397159, 37.790837],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "58-55": {
	    "distance": 3.0048542360522696,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "59-55": {
	    "distance": 2.9571635222419506,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "60-55": {
	    "distance": 2.2661450024682206,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "61-55": {
	    "distance": 1.4457426154148967,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "62-55": {
	    "distance": 0.7006645894945523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "63-55": {
	    "distance": 0.4343755620977423,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "64-55": {
	    "distance": 1.1574881149550926,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "65-55": {
	    "distance": 2.9323794479582035,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "66-55": {
	    "distance": 3.1723978026878177,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.412419, 37.77805],
	        [-122.412205, 37.77822],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.407177, 37.782192],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404156, 37.784618],
	        [-122.403515, 37.785123],
	        [-122.403264, 37.785321],
	        [-122.402768, 37.785709],
	        [-122.402608, 37.785836],
	        [-122.402493, 37.785928],
	        [-122.402156, 37.786195],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "68-55": {
	    "distance": 0.7799425029686681,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "67-55": {
	    "distance": 2.8709691531236365,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "69-55": {
	    "distance": 2.1012107565123417,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "70-55": {
	    "distance": 2.0743582365295006,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "71-55": {
	    "distance": 1.711137379409528,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "72-55": {
	    "distance": 2.299652262472144,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "74-55": {
	    "distance": 0.7025115407392745,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "73-55": {
	    "distance": 1.8996494747800765,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.40388, 37.791733],
	        [-122.402571, 37.791899],
	        [-122.402196, 37.791946],
	        [-122.401885, 37.791986],
	        [-122.401769, 37.792001],
	        [-122.401638, 37.792018],
	        [-122.400933, 37.792108],
	        [-122.399763, 37.792258],
	        [-122.398588, 37.792408],
	        [-122.398482, 37.79189],
	        [-122.398423, 37.79181],
	        [-122.398375, 37.791778],
	        [-122.398297, 37.791734],
	        [-122.398234, 37.791694],
	        [-122.397548, 37.791147],
	        [-122.397244, 37.790905],
	        [-122.397159, 37.790837],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "75-55": {
	    "distance": 0.832394188403135,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.398588, 37.792408],
	        [-122.398482, 37.79189],
	        [-122.398423, 37.79181],
	        [-122.398375, 37.791778],
	        [-122.398297, 37.791734],
	        [-122.398234, 37.791694],
	        [-122.397548, 37.791147],
	        [-122.397244, 37.790905],
	        [-122.397159, 37.790837],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "77-55": {
	    "distance": 0.914289071526502,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "76-55": {
	    "distance": 1.339312604906937,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "82-55": {
	    "distance": 1.503802348245539,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696]
	      ]
	    }
	  },
	  "57-56": {
	    "distance": 1.7879273580987136,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.406579, 37.783514],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404156, 37.784618],
	        [-122.403515, 37.785123],
	        [-122.403264, 37.785321],
	        [-122.402768, 37.785709],
	        [-122.402608, 37.785836],
	        [-122.402493, 37.785928],
	        [-122.402156, 37.786195],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "58-56": {
	    "distance": 3.013243523576685,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "59-56": {
	    "distance": 2.9655528097663657,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "60-56": {
	    "distance": 2.203085798021777,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "61-56": {
	    "distance": 1.8386919121899319,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "62-56": {
	    "distance": 1.0936138862695877,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "63-56": {
	    "distance": 0.8273248588727776,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "64-56": {
	    "distance": 1.5504374117301278,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "65-56": {
	    "distance": 3.3253287447332385,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "66-56": {
	    "distance": 3.180787090212233,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.412419, 37.77805],
	        [-122.412205, 37.77822],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.407177, 37.782192],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404156, 37.784618],
	        [-122.403515, 37.785123],
	        [-122.403264, 37.785321],
	        [-122.402768, 37.785709],
	        [-122.402608, 37.785836],
	        [-122.402493, 37.785928],
	        [-122.402156, 37.786195],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "67-56": {
	    "distance": 2.8793584406480517,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "68-56": {
	    "distance": 1.1728917997437034,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "69-56": {
	    "distance": 2.4941600532873767,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "70-56": {
	    "distance": 2.4673075333045356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "71-56": {
	    "distance": 1.7195266669339428,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "72-56": {
	    "distance": 2.308041549996559,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "73-56": {
	    "distance": 1.904835816217381,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "74-56": {
	    "distance": 0.6394523362928304,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "75-56": {
	    "distance": 0.7949329163763216,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "76-56": {
	    "distance": 1.347701892431352,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "77-56": {
	    "distance": 0.9226783590509168,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "82-56": {
	    "distance": 1.4407431437990947,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397147, 37.792201]
	      ]
	    }
	  },
	  "58-57": {
	    "distance": 1.6527347796520484,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.406731, 37.781691],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "59-57": {
	    "distance": 1.6050440658417295,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.406731, 37.781691],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "61-57": {
	    "distance": 1.8496551230303537,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.396953, 37.77866],
	        [-122.397068, 37.778752],
	        [-122.39755, 37.779134],
	        [-122.398087, 37.779565],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "60-57": {
	    "distance": 3.5331995281196984,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "62-57": {
	    "distance": 1.1032864331694945,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.397841, 37.784657],
	        [-122.398748, 37.783941],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "63-57": {
	    "distance": 1.716862137781514,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402094, 37.786142],
	        [-122.402704, 37.785659],
	        [-122.403196, 37.785269],
	        [-122.403448, 37.785072],
	        [-122.404091, 37.784559],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "64-57": {
	    "distance": 1.5601099586300349,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.397841, 37.784657],
	        [-122.398748, 37.783941],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "65-57": {
	    "distance": 1.673453156047082,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "66-57": {
	    "distance": 1.8511787130893878,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.412419, 37.77805],
	        [-122.412205, 37.77822],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.406731, 37.781691],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "67-57": {
	    "distance": 1.5188496967234155,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.406731, 37.781691],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "68-57": {
	    "distance": 1.0139257523353553,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "69-57": {
	    "distance": 1.1477136606648668,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "70-57": {
	    "distance": 1.174566376818058,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "71-57": {
	    "distance": 0.9436266435516091,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "72-57": {
	    "distance": 0.9475328060719229,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.406731, 37.781691],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "73-57": {
	    "distance": 2.510220062009855,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.405132, 37.788238],
	        [-122.405045, 37.787766],
	        [-122.404972, 37.787418],
	        [-122.404855, 37.786835],
	        [-122.405363, 37.786769],
	        [-122.406409, 37.786637],
	        [-122.408034, 37.786431],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "74-57": {
	    "distance": 2.0572631365569225,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "75-57": {
	    "distance": 1.4965448766140232,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "77-57": {
	    "distance": 1.2550446155960502,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "76-57": {
	    "distance": 0.7345125928622976,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "82-57": {
	    "distance": 2.784523636930737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.405132, 37.788238],
	        [-122.405045, 37.787766],
	        [-122.404972, 37.787418],
	        [-122.404855, 37.786835],
	        [-122.405363, 37.786769],
	        [-122.406409, 37.786637],
	        [-122.408034, 37.786431],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405201, 37.781697]
	      ]
	    }
	  },
	  "59-58": {
	    "distance": 0.31096870718318786,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418567, 37.780129],
	        [-122.418419, 37.779388],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "60-58": {
	    "distance": 4.3400203528083265,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "61-58": {
	    "distance": 3.3773077704210146,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "62-58": {
	    "distance": 2.632229864322476,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "63-58": {
	    "distance": 2.920937868416826,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "64-58": {
	    "distance": 3.0890532699612105,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "65-58": {
	    "distance": 1.9356050750063085,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.408445, 37.773688],
	        [-122.408535, 37.77376],
	        [-122.409093, 37.774203],
	        [-122.409524, 37.774548],
	        [-122.410082, 37.774993],
	        [-122.410619, 37.775421],
	        [-122.411078, 37.775786],
	        [-122.411614, 37.776214],
	        [-122.412166, 37.776654],
	        [-122.412625, 37.777019],
	        [-122.413171, 37.777454],
	        [-122.414157, 37.778244],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "66-58": {
	    "distance": 0.9677278779801886,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.418139, 37.777971],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "67-58": {
	    "distance": 0.6670566923735765,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "68-58": {
	    "distance": 2.548870482696311,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "69-58": {
	    "distance": 2.6755941442547986,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "71-58": {
	    "distance": 1.9625959748019586,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.410071, 37.78808],
	        [-122.411699, 37.787873],
	        [-122.411642, 37.787567],
	        [-122.411572, 37.78722],
	        [-122.411516, 37.78694],
	        [-122.411334, 37.78601],
	        [-122.412147, 37.785909],
	        [-122.412979, 37.7858],
	        [-122.414619, 37.785591],
	        [-122.415024, 37.78554],
	        [-122.415675, 37.785457],
	        [-122.415916, 37.785426],
	        [-122.416261, 37.785382],
	        [-122.417907, 37.785176],
	        [-122.417812, 37.784709],
	        [-122.417715, 37.784234],
	        [-122.417622, 37.783777],
	        [-122.417527, 37.78331],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.416982, 37.780604],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418567, 37.780129],
	        [-122.418419, 37.779388],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "70-58": {
	    "distance": 2.70244686040799,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "72-58": {
	    "distance": 0.5809938459789856,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "73-58": {
	    "distance": 3.5289081638688926,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.405132, 37.788238],
	        [-122.405045, 37.787766],
	        [-122.404972, 37.787418],
	        [-122.404855, 37.786835],
	        [-122.405363, 37.786769],
	        [-122.406409, 37.786637],
	        [-122.408068, 37.786425],
	        [-122.408951, 37.786313],
	        [-122.409335, 37.786264],
	        [-122.409701, 37.786218],
	        [-122.409848, 37.786199],
	        [-122.411334, 37.78601],
	        [-122.412147, 37.785909],
	        [-122.412979, 37.7858],
	        [-122.414619, 37.785591],
	        [-122.415024, 37.78554],
	        [-122.415675, 37.785457],
	        [-122.415916, 37.785426],
	        [-122.416261, 37.785382],
	        [-122.417907, 37.785176],
	        [-122.417812, 37.784709],
	        [-122.417715, 37.784234],
	        [-122.417622, 37.783777],
	        [-122.417527, 37.78331],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.416982, 37.780604],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418567, 37.780129],
	        [-122.418419, 37.779388],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "74-58": {
	    "distance": 2.864083961245549,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "75-58": {
	    "distance": 2.3033657013026496,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "76-58": {
	    "distance": 1.5413334175509248,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "77-58": {
	    "distance": 2.061865440284677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "82-58": {
	    "distance": 3.5776776985856427,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643]
	      ]
	    }
	  },
	  "60-59": {
	    "distance": 4.376904786473483,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "61-59": {
	    "distance": 3.4141922040861714,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "62-59": {
	    "distance": 2.6691142979876328,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "63-59": {
	    "distance": 2.9578223020819827,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "64-59": {
	    "distance": 3.1259377036263674,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "65-59": {
	    "distance": 2.207384664479592,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.408445, 37.773688],
	        [-122.408535, 37.77376],
	        [-122.409093, 37.774203],
	        [-122.409524, 37.774548],
	        [-122.410082, 37.774993],
	        [-122.410619, 37.775421],
	        [-122.411078, 37.775786],
	        [-122.411614, 37.776214],
	        [-122.412166, 37.776654],
	        [-122.412625, 37.777019],
	        [-122.413171, 37.777454],
	        [-122.414157, 37.778244],
	        [-122.414757, 37.778725],
	        [-122.414902, 37.778846],
	        [-122.414964, 37.778942],
	        [-122.415102, 37.77964],
	        [-122.415133, 37.779795],
	        [-122.415167, 37.779959],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "66-59": {
	    "distance": 1.6680101641976,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.414157, 37.778244],
	        [-122.414757, 37.778725],
	        [-122.414902, 37.778846],
	        [-122.414964, 37.778942],
	        [-122.415102, 37.77964],
	        [-122.415133, 37.779795],
	        [-122.415167, 37.779959],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "67-59": {
	    "distance": 0.9388362818468605,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.414902, 37.778846],
	        [-122.414964, 37.778942],
	        [-122.415102, 37.77964],
	        [-122.415133, 37.779795],
	        [-122.415167, 37.779959],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "68-59": {
	    "distance": 2.5857549163614673,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "69-59": {
	    "distance": 2.7124785779199554,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "70-59": {
	    "distance": 2.7393312940731467,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "71-59": {
	    "distance": 1.6536280649501802,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.410071, 37.78808],
	        [-122.411699, 37.787873],
	        [-122.411642, 37.787567],
	        [-122.411572, 37.78722],
	        [-122.411516, 37.78694],
	        [-122.411334, 37.78601],
	        [-122.412147, 37.785909],
	        [-122.412979, 37.7858],
	        [-122.414619, 37.785591],
	        [-122.415024, 37.78554],
	        [-122.415675, 37.785457],
	        [-122.415916, 37.785426],
	        [-122.416261, 37.785382],
	        [-122.417907, 37.785176],
	        [-122.417812, 37.784709],
	        [-122.417715, 37.784234],
	        [-122.417622, 37.783777],
	        [-122.417527, 37.78331],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "72-59": {
	    "distance": 0.6869017894745545,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "73-59": {
	    "distance": 3.2199402540171147,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.405132, 37.788238],
	        [-122.405045, 37.787766],
	        [-122.404972, 37.787418],
	        [-122.404855, 37.786835],
	        [-122.405363, 37.786769],
	        [-122.406409, 37.786637],
	        [-122.408068, 37.786425],
	        [-122.408951, 37.786313],
	        [-122.409335, 37.786264],
	        [-122.409701, 37.786218],
	        [-122.409848, 37.786199],
	        [-122.411334, 37.78601],
	        [-122.412147, 37.785909],
	        [-122.412979, 37.7858],
	        [-122.414619, 37.785591],
	        [-122.415024, 37.78554],
	        [-122.415675, 37.785457],
	        [-122.415916, 37.785426],
	        [-122.416261, 37.785382],
	        [-122.417907, 37.785176],
	        [-122.417812, 37.784709],
	        [-122.417715, 37.784234],
	        [-122.417622, 37.783777],
	        [-122.417527, 37.78331],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "74-59": {
	    "distance": 2.9009683949107057,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "76-59": {
	    "distance": 1.5782178512160825,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "75-59": {
	    "distance": 2.340250134967807,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "77-59": {
	    "distance": 2.098749873949835,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "82-59": {
	    "distance": 3.4942438289379982,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.405132, 37.788238],
	        [-122.405045, 37.787766],
	        [-122.404972, 37.787418],
	        [-122.404855, 37.786835],
	        [-122.405363, 37.786769],
	        [-122.406409, 37.786637],
	        [-122.408068, 37.786425],
	        [-122.408951, 37.786313],
	        [-122.409335, 37.786264],
	        [-122.409701, 37.786218],
	        [-122.409848, 37.786199],
	        [-122.411334, 37.78601],
	        [-122.412147, 37.785909],
	        [-122.412979, 37.7858],
	        [-122.414619, 37.785591],
	        [-122.415024, 37.78554],
	        [-122.415675, 37.785457],
	        [-122.415916, 37.785426],
	        [-122.416261, 37.785382],
	        [-122.417907, 37.785176],
	        [-122.417812, 37.784709],
	        [-122.417715, 37.784234],
	        [-122.417622, 37.783777],
	        [-122.417527, 37.78331],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "61-60": {
	    "distance": 3.268363630064943,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "62-60": {
	    "distance": 2.5232856041445983,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "63-60": {
	    "distance": 2.2569965767477878,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "64-60": {
	    "distance": 2.9801091296051383,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "65-60": {
	    "distance": 5.075946471028846,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "66-60": {
	    "distance": 4.69467155262372,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "67-60": {
	    "distance": 3.8484700998532846,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "68-60": {
	    "distance": 2.6883190549275047,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "69-60": {
	    "distance": 3.9238317711623876,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "70-60": {
	    "distance": 3.8969792511795465,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "71-60": {
	    "distance": 2.6454271224884436,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "72-60": {
	    "distance": 3.2771532092017925,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "73-60": {
	    "distance": 1.3450297510416136,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406256, 37.79792],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "74-60": {
	    "distance": 1.776353550093847,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.39932, 37.800915],
	        [-122.40008, 37.801777],
	        [-122.400371, 37.802109],
	        [-122.400705, 37.802491],
	        [-122.401022, 37.802851],
	        [-122.401465, 37.803332],
	        [-122.401927, 37.803854],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "75-60": {
	    "distance": 1.639424409633613,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "76-60": {
	    "distance": 2.3168135516365846,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "77-60": {
	    "distance": 1.7962818809270225,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "82-60": {
	    "distance": 0.763332378261187,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403159, 37.804828]
	      ]
	    }
	  },
	  "62-61": {
	    "distance": 0.7450781430942389,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "63-61": {
	    "distance": 1.9018553076201759,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "64-61": {
	    "distance": 0.2882550879075677,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "65-61": {
	    "distance": 1.5295772842624706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.392679, 37.778932],
	        [-122.392231, 37.779287],
	        [-122.391662, 37.779735],
	        [-122.39108, 37.780194],
	        [-122.390632, 37.780548],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "67-61": {
	    "distance": 3.400933001644084,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "66-61": {
	    "distance": 3.74029924145771,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414171, 37.775802],
	        [-122.413714, 37.775439],
	        [-122.413157, 37.774996],
	        [-122.412622, 37.774568],
	        [-122.412165, 37.774203],
	        [-122.411627, 37.773773],
	        [-122.411074, 37.77333],
	        [-122.410692, 37.773024],
	        [-122.410083, 37.772537],
	        [-122.409693, 37.772845],
	        [-122.408922, 37.773454],
	        [-122.408666, 37.773656],
	        [-122.408445, 37.773688],
	        [-122.408286, 37.773712],
	        [-122.407822, 37.773761],
	        [-122.40771, 37.773783],
	        [-122.407609, 37.773817],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.398365, 37.781794],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "68-61": {
	    "distance": 1.306897959094904,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "69-61": {
	    "distance": 0.6984085928166097,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.392679, 37.778932],
	        [-122.392231, 37.779287],
	        [-122.391662, 37.779735],
	        [-122.39108, 37.780194],
	        [-122.390632, 37.780548],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "70-61": {
	    "distance": 0.6715560728337686,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.392679, 37.778932],
	        [-122.392231, 37.779287],
	        [-122.391662, 37.779735],
	        [-122.39108, 37.780194],
	        [-122.390632, 37.780548],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "71-61": {
	    "distance": 2.241101227929976,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "72-61": {
	    "distance": 2.8296161109925917,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "73-61": {
	    "distance": 2.965283642444324,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "74-61": {
	    "distance": 2.244098696475578,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "75-61": {
	    "distance": 1.6833804365326788,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "76-61": {
	    "distance": 1.8692764534273854,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "77-61": {
	    "distance": 1.4418801755147057,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "82-61": {
	    "distance": 2.9576924338156707,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "63-62": {
	    "distance": 1.1567774015216368,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "64-62": {
	    "distance": 0.4568236426344345,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "65-62": {
	    "distance": 2.231714975637545,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "66-62": {
	    "distance": 2.954911000577483,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.412419, 37.77805],
	        [-122.412205, 37.77822],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.407177, 37.782192],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404156, 37.784618],
	        [-122.403515, 37.785123],
	        [-122.403264, 37.785321],
	        [-122.402768, 37.785709],
	        [-122.402608, 37.785836],
	        [-122.402493, 37.785928],
	        [-122.402156, 37.786195],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "67-62": {
	    "distance": 2.653482351013302,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "68-62": {
	    "distance": 0.5615029260769975,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "69-62": {
	    "distance": 1.4005462841916838,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "70-62": {
	    "distance": 1.3736937642088427,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "72-62": {
	    "distance": 2.082165460361809,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "73-62": {
	    "distance": 2.2178329918135415,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "74-62": {
	    "distance": 1.499020790377039,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "75-62": {
	    "distance": 0.9383025304341395,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "76-62": {
	    "distance": 1.1218258027966015,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "77-62": {
	    "distance": 0.6968022694161664,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "82-62": {
	    "distance": 2.212614527717132,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "64-63": {
	    "distance": 0.7231144989008095,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "65-63": {
	    "distance": 2.4980058319039204,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "66-63": {
	    "distance": 2.7389769614148705,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414119, 37.776705],
	        [-122.413171, 37.777454],
	        [-122.412419, 37.77805],
	        [-122.412205, 37.77822],
	        [-122.410944, 37.779218],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.407177, 37.782192],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404156, 37.784618],
	        [-122.403515, 37.785123],
	        [-122.403264, 37.785321],
	        [-122.402768, 37.785709],
	        [-122.402608, 37.785836],
	        [-122.402493, 37.785928],
	        [-122.402156, 37.786195],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "67-63": {
	    "distance": 2.4375483118506893,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "68-63": {
	    "distance": 0.34556888691438487,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "71-62": {
	    "distance": 1.4936505772991924,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785231]
	      ]
	    }
	  },
	  "69-63": {
	    "distance": 1.6668371404580586,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "70-63": {
	    "distance": 1.6399846204752175,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "71-63": {
	    "distance": 1.2777165381365798,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "72-63": {
	    "distance": 1.8662314211991962,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "73-63": {
	    "distance": 2.001898952650929,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "74-63": {
	    "distance": 1.2830867512144264,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "75-63": {
	    "distance": 0.7223684912715268,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "76-63": {
	    "distance": 0.9058917636339888,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "77-63": {
	    "distance": 0.4808682302535538,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "82-63": {
	    "distance": 1.9966804885545193,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "65-64": {
	    "distance": 1.774891920450874,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "67-64": {
	    "distance": 3.1103057566520356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "66-64": {
	    "distance": 3.4509383057372247,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414171, 37.775802],
	        [-122.413714, 37.775439],
	        [-122.413157, 37.774996],
	        [-122.412622, 37.774568],
	        [-122.412165, 37.774203],
	        [-122.411627, 37.773773],
	        [-122.411074, 37.77333],
	        [-122.410692, 37.773024],
	        [-122.410083, 37.772537],
	        [-122.409693, 37.772845],
	        [-122.408922, 37.773454],
	        [-122.408666, 37.773656],
	        [-122.408445, 37.773688],
	        [-122.408286, 37.773712],
	        [-122.407822, 37.773761],
	        [-122.40771, 37.773783],
	        [-122.407609, 37.773817],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.398365, 37.781794],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "68-64": {
	    "distance": 1.0175370233744176,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396301, 37.783425],
	        [-122.395714, 37.78389],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "69-64": {
	    "distance": 0.9437232290050126,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "70-64": {
	    "distance": 0.9168707090221715,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "71-64": {
	    "distance": 1.950473982937927,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "72-64": {
	    "distance": 2.538988866000543,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "73-64": {
	    "distance": 2.6746563974522757,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "74-64": {
	    "distance": 1.9558441960157735,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "75-64": {
	    "distance": 1.3951259360728743,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "76-64": {
	    "distance": 1.578649208435336,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "77-64": {
	    "distance": 1.1536256750549012,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "82-64": {
	    "distance": 2.669437933355866,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232]
	      ]
	    }
	  },
	  "66-65": {
	    "distance": 2.174519059480036,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.415508, 37.775602],
	        [-122.415145, 37.775891],
	        [-122.414716, 37.776233],
	        [-122.414171, 37.775802],
	        [-122.413714, 37.775439],
	        [-122.413157, 37.774996],
	        [-122.412622, 37.774568],
	        [-122.412165, 37.774203],
	        [-122.411627, 37.773773],
	        [-122.411074, 37.77333],
	        [-122.410692, 37.773024],
	        [-122.410083, 37.772537],
	        [-122.409081, 37.771736],
	        [-122.408536, 37.7713],
	        [-122.406997, 37.77007],
	        [-122.406301, 37.770631],
	        [-122.405549, 37.771224],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "67-65": {
	    "distance": 1.8410907163645704,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.414716, 37.776233],
	        [-122.414171, 37.775802],
	        [-122.413714, 37.775439],
	        [-122.413157, 37.774996],
	        [-122.412622, 37.774568],
	        [-122.412165, 37.774203],
	        [-122.411627, 37.773773],
	        [-122.411074, 37.77333],
	        [-122.410692, 37.773024],
	        [-122.410083, 37.772537],
	        [-122.409081, 37.771736],
	        [-122.408536, 37.7713],
	        [-122.406997, 37.77007],
	        [-122.406301, 37.770631],
	        [-122.405549, 37.771224],
	        [-122.405451, 37.771303],
	        [-122.405357, 37.771232],
	        [-122.404957, 37.770906],
	        [-122.404749, 37.770735],
	        [-122.404014, 37.770133],
	        [-122.403939, 37.770055],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "68-65": {
	    "distance": 2.2379286017061246,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.398769, 37.776574],
	        [-122.400197, 37.775445],
	        [-122.400875, 37.774909],
	        [-122.400995, 37.774814],
	        [-122.401546, 37.774377],
	        [-122.40206, 37.773973],
	        [-122.402109, 37.773934],
	        [-122.402275, 37.773802],
	        [-122.402681, 37.773481],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "69-65": {
	    "distance": 0.8311688845555096,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "70-65": {
	    "distance": 0.858021600708701,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "71-65": {
	    "distance": 2.6167507853477665,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.400799, 37.77742],
	        [-122.401432, 37.776919],
	        [-122.401989, 37.776478],
	        [-122.402537, 37.776045],
	        [-122.403086, 37.775611],
	        [-122.403646, 37.775168],
	        [-122.404226, 37.77471],
	        [-122.404354, 37.774608],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "72-65": {
	    "distance": 1.51495915574954,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "73-65": {
	    "distance": 3.8963142850555443,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.398769, 37.776574],
	        [-122.400197, 37.775445],
	        [-122.400875, 37.774909],
	        [-122.400995, 37.774814],
	        [-122.401546, 37.774377],
	        [-122.40206, 37.773973],
	        [-122.402109, 37.773934],
	        [-122.402275, 37.773802],
	        [-122.402681, 37.773481],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "74-65": {
	    "distance": 3.7290257611856914,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "75-65": {
	    "distance": 3.168307501242793,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "76-65": {
	    "distance": 2.4062752174910673,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "77-65": {
	    "distance": 2.92680724022482,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "82-65": {
	    "distance": 4.170617859976428,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.398769, 37.776574],
	        [-122.400197, 37.775445],
	        [-122.400875, 37.774909],
	        [-122.400995, 37.774814],
	        [-122.401546, 37.774377],
	        [-122.40206, 37.773973],
	        [-122.402109, 37.773934],
	        [-122.402275, 37.773802],
	        [-122.402681, 37.773481],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "67-66": {
	    "distance": 0.7882357502155514,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "68-66": {
	    "distance": 3.0564628886299112,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "69-66": {
	    "distance": 3.2495724724678063,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396953, 37.77866],
	        [-122.397068, 37.778752],
	        [-122.39755, 37.779134],
	        [-122.398087, 37.779565],
	        [-122.398265, 37.779576],
	        [-122.39841, 37.779566],
	        [-122.398571, 37.779546],
	        [-122.398722, 37.779517],
	        [-122.398863, 37.779474],
	        [-122.398986, 37.779423],
	        [-122.399152, 37.779335],
	        [-122.399342, 37.779217],
	        [-122.39954, 37.779081],
	        [-122.400508, 37.778409],
	        [-122.400778, 37.778231],
	        [-122.400968, 37.778122],
	        [-122.401166, 37.778025],
	        [-122.401613, 37.777839],
	        [-122.403668, 37.776775],
	        [-122.403907, 37.776647],
	        [-122.404113, 37.776528],
	        [-122.404336, 37.77638],
	        [-122.404736, 37.77611],
	        [-122.404909, 37.775985],
	        [-122.405083, 37.775847],
	        [-122.40525, 37.7757],
	        [-122.405438, 37.775523],
	        [-122.405611, 37.775358],
	        [-122.405753, 37.775215],
	        [-122.405882, 37.77507],
	        [-122.406007, 37.774917],
	        [-122.406128, 37.774755],
	        [-122.40624, 37.774592],
	        [-122.406357, 37.774406],
	        [-122.406443, 37.774242],
	        [-122.406516, 37.774071],
	        [-122.406571, 37.77389],
	        [-122.406609, 37.773723],
	        [-122.406627, 37.773563],
	        [-122.406635, 37.77337],
	        [-122.406643, 37.773105],
	        [-122.406665, 37.77278],
	        [-122.406967, 37.77254],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.408445, 37.773688],
	        [-122.408535, 37.77376],
	        [-122.409093, 37.774203],
	        [-122.409524, 37.774548],
	        [-122.410082, 37.774993],
	        [-122.411627, 37.773773],
	        [-122.412235, 37.773293],
	        [-122.412834, 37.77282],
	        [-122.413763, 37.77356],
	        [-122.414368, 37.774043],
	        [-122.414921, 37.774484],
	        [-122.415384, 37.774852],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "70-66": {
	    "distance": 3.2227199524849652,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396953, 37.77866],
	        [-122.397068, 37.778752],
	        [-122.39755, 37.779134],
	        [-122.398087, 37.779565],
	        [-122.398265, 37.779576],
	        [-122.39841, 37.779566],
	        [-122.398571, 37.779546],
	        [-122.398722, 37.779517],
	        [-122.398863, 37.779474],
	        [-122.398986, 37.779423],
	        [-122.399152, 37.779335],
	        [-122.399342, 37.779217],
	        [-122.39954, 37.779081],
	        [-122.400508, 37.778409],
	        [-122.400778, 37.778231],
	        [-122.400968, 37.778122],
	        [-122.401166, 37.778025],
	        [-122.401613, 37.777839],
	        [-122.403668, 37.776775],
	        [-122.403907, 37.776647],
	        [-122.404113, 37.776528],
	        [-122.404336, 37.77638],
	        [-122.404736, 37.77611],
	        [-122.404909, 37.775985],
	        [-122.405083, 37.775847],
	        [-122.40525, 37.7757],
	        [-122.405438, 37.775523],
	        [-122.405611, 37.775358],
	        [-122.405753, 37.775215],
	        [-122.405882, 37.77507],
	        [-122.406007, 37.774917],
	        [-122.406128, 37.774755],
	        [-122.40624, 37.774592],
	        [-122.406357, 37.774406],
	        [-122.406443, 37.774242],
	        [-122.406516, 37.774071],
	        [-122.406571, 37.77389],
	        [-122.406609, 37.773723],
	        [-122.406627, 37.773563],
	        [-122.406635, 37.77337],
	        [-122.406643, 37.773105],
	        [-122.406665, 37.77278],
	        [-122.406967, 37.77254],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.408445, 37.773688],
	        [-122.408535, 37.77376],
	        [-122.409093, 37.774203],
	        [-122.409524, 37.774548],
	        [-122.410082, 37.774993],
	        [-122.411627, 37.773773],
	        [-122.412235, 37.773293],
	        [-122.412834, 37.77282],
	        [-122.413763, 37.77356],
	        [-122.414368, 37.774043],
	        [-122.414921, 37.774484],
	        [-122.415384, 37.774852],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "71-66": {
	    "distance": 2.4026277036841894,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.409703, 37.781763],
	        [-122.410138, 37.782111],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "72-66": {
	    "distance": 1.0885862519125862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "73-66": {
	    "distance": 4.328989658166905,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "74-66": {
	    "distance": 3.3716763671791496,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "75-66": {
	    "distance": 2.810958107236251,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "76-66": {
	    "distance": 2.048925823484525,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "77-66": {
	    "distance": 2.569457846218278,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "82-66": {
	    "distance": 4.0852701045192426,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "68-67": {
	    "distance": 2.539193613362086,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "69-67": {
	    "distance": 2.6659172749205737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "70-67": {
	    "distance": 2.692769991073765,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "71-67": {
	    "distance": 1.8853584284163643,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.409703, 37.781763],
	        [-122.410138, 37.782111],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "72-67": {
	    "distance": 0.5713169766447611,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "73-67": {
	    "distance": 3.8117203828990798,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "75-67": {
	    "distance": 2.293688831968425,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "74-67": {
	    "distance": 2.854407091911324,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "76-67": {
	    "distance": 1.5316565482167004,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "77-67": {
	    "distance": 2.052188570950453,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "82-67": {
	    "distance": 3.568000829251418,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417403, 37.776636]
	      ]
	    }
	  },
	  "69-68": {
	    "distance": 1.6255797478117087,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "70-68": {
	    "distance": 1.6524324639649,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "71-68": {
	    "distance": 1.485885785511504,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "72-68": {
	    "distance": 1.4901200277926803,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.408839, 37.778409],
	        [-122.408275, 37.778851],
	        [-122.407705, 37.779298],
	        [-122.407162, 37.779736],
	        [-122.405723, 37.780875],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "73-68": {
	    "distance": 2.5959106860251686,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "74-68": {
	    "distance": 2.4141626646478653,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "75-68": {
	    "distance": 1.8534444047049656,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "76-68": {
	    "distance": 1.2767717348221925,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "77-68": {
	    "distance": 1.6119441436869923,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "71-69": {
	    "distance": 2.3422981857491805,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "82-68": {
	    "distance": 2.870214260946052,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "70-69": {
	    "distance": 0.02685272608766316,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "73-69": {
	    "distance": 3.0664806002635294,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "72-69": {
	    "distance": 2.095736248755356,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "74-69": {
	    "distance": 2.884732578886226,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "75-69": {
	    "distance": 2.3240143189433273,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "76-69": {
	    "distance": 1.9704734112465903,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "77-69": {
	    "distance": 2.0825140579253545,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "82-69": {
	    "distance": 3.3407841751844134,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395997, 37.776315]
	      ]
	    }
	  },
	  "71-70": {
	    "distance": 2.3154456657663394,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.407786, 37.787428],
	        [-122.407649, 37.787445],
	        [-122.407493, 37.787464],
	        [-122.40733, 37.787484],
	        [-122.407205, 37.7875],
	        [-122.407063, 37.787517],
	        [-122.406589, 37.787566],
	        [-122.405045, 37.787766],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "72-70": {
	    "distance": 2.122588964908547,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.407854, 37.776752],
	        [-122.407519, 37.776485],
	        [-122.407305, 37.776315],
	        [-122.406308, 37.775519],
	        [-122.405447, 37.774832],
	        [-122.405251, 37.774676],
	        [-122.4049, 37.774396],
	        [-122.404762, 37.774286],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "73-70": {
	    "distance": 3.0396280802806883,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "74-70": {
	    "distance": 2.857880058903385,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "75-70": {
	    "distance": 2.2971617989604862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "76-70": {
	    "distance": 1.943620891263749,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "77-70": {
	    "distance": 2.0556615379425134,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "82-70": {
	    "distance": 3.3139316552015723,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.39354, 37.779474],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.39578, 37.776485]
	      ]
	    }
	  },
	  "72-71": {
	    "distance": 1.3625240422715554,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.406229, 37.785713],
	        [-122.407789, 37.785505],
	        [-122.407866, 37.785495],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "73-71": {
	    "distance": 1.6033611495623319,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.406771, 37.788499],
	        [-122.407426, 37.788415],
	        [-122.407518, 37.788404],
	        [-122.407762, 37.788373],
	        [-122.408329, 37.788301],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "74-71": {
	    "distance": 1.5642229893384023,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.406771, 37.788499],
	        [-122.407426, 37.788415],
	        [-122.407518, 37.788404],
	        [-122.407762, 37.788373],
	        [-122.408329, 37.788301],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "75-71": {
	    "distance": 1.0035047293955028,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.406771, 37.788499],
	        [-122.407426, 37.788415],
	        [-122.407518, 37.788404],
	        [-122.407762, 37.788373],
	        [-122.408329, 37.788301],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "76-71": {
	    "distance": 0.6104310980173367,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.406229, 37.785713],
	        [-122.407789, 37.785505],
	        [-122.407866, 37.785495],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "77-71": {
	    "distance": 0.7620044683775296,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401991, 37.788963],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.40214, 37.789085],
	        [-122.402632, 37.789023],
	        [-122.402845, 37.788996],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.406771, 37.788499],
	        [-122.407426, 37.788415],
	        [-122.407518, 37.788404],
	        [-122.407762, 37.788373],
	        [-122.408329, 37.788301],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "82-71": {
	    "distance": 1.8776647244832154,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.404371, 37.788802],
	        [-122.405221, 37.788694],
	        [-122.406771, 37.788499],
	        [-122.407426, 37.788415],
	        [-122.407518, 37.788404],
	        [-122.407762, 37.788373],
	        [-122.408329, 37.788301],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788453]
	      ]
	    }
	  },
	  "74-72": {
	    "distance": 2.283090201259832,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "75-72": {
	    "distance": 1.7223719413169332,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "73-72": {
	    "distance": 3.2404034922475877,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "76-72": {
	    "distance": 0.9603396575652077,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "77-72": {
	    "distance": 1.4808716802989603,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "82-72": {
	    "distance": 2.9966839385999258,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412805, 37.780268]
	      ]
	    }
	  },
	  "74-73": {
	    "distance": 1.7754044437232743,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406307, 37.797566],
	        [-122.406733, 37.797863],
	        [-122.40704, 37.798072],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.40788, 37.798686],
	        [-122.40722, 37.79877],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "75-73": {
	    "distance": 1.4587855267503322,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406307, 37.797566],
	        [-122.406733, 37.797863],
	        [-122.40704, 37.798072],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.40788, 37.798686],
	        [-122.40722, 37.79877],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "76-73": {
	    "distance": 1.758825756861645,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406307, 37.797566],
	        [-122.406733, 37.797863],
	        [-122.40704, 37.798072],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.40788, 37.798686],
	        [-122.40722, 37.79877],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "77-73": {
	    "distance": 1.5160534198843687,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406307, 37.797566],
	        [-122.406733, 37.797863],
	        [-122.40704, 37.798072],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.40788, 37.798686],
	        [-122.40722, 37.79877],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "82-73": {
	    "distance": 0.8545144526877435,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.406256, 37.79792],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.406307, 37.797566],
	        [-122.406733, 37.797863],
	        [-122.40704, 37.798072],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.40788, 37.798686],
	        [-122.40722, 37.79877],
	        [-122.407172, 37.798528]
	      ]
	    }
	  },
	  "75-74": {
	    "distance": 0.5607193130875997,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "76-74": {
	    "distance": 1.3227505436946247,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "77-74": {
	    "distance": 0.8022188729850621,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "82-74": {
	    "distance": 1.301905242401685,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398615, 37.798906],
	        [-122.398334, 37.798957],
	        [-122.398222, 37.798989],
	        [-122.398097, 37.799039],
	        [-122.398026, 37.799069],
	        [-122.397961, 37.799103],
	        [-122.397882, 37.799145],
	        [-122.397792, 37.799184],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392512, 37.793786],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "76-75": {
	    "distance": 0.7620322837517256,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "77-75": {
	    "distance": 0.241500613042163,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "77-76": {
	    "distance": 0.5205320227337523,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "82-75": {
	    "distance": 1.2743130504276934,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398945, 37.79122]
	      ]
	    }
	  },
	  "82-76": {
	    "distance": 2.0363442810347183,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "82-77": {
	    "distance": 1.5158126103251557,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "41-46": {
	    "distance": 0.6927055673263851,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39999, 37.795079],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "47-46": {
	    "distance": 1.3638754487186506,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403446, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "45-46": {
	    "distance": 0.7428488314795862,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.402282, 37.794314],
	        [-122.401404, 37.794427],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "48-46": {
	    "distance": 1.244887697998635,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399337, 37.800794],
	        [-122.399427, 37.800744],
	        [-122.399475, 37.800725],
	        [-122.39954, 37.800707],
	        [-122.400249, 37.800617],
	        [-122.400061, 37.799678],
	        [-122.399891, 37.798833],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "42-46": {
	    "distance": 0.7479278361308588,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.398738, 37.797035],
	        [-122.399192, 37.796975],
	        [-122.399348, 37.796954],
	        [-122.399511, 37.796931],
	        [-122.400079, 37.79686],
	        [-122.400693, 37.796782],
	        [-122.401295, 37.796706],
	        [-122.40186, 37.796634],
	        [-122.402412, 37.796565],
	        [-122.40292, 37.7965],
	        [-122.403501, 37.796427],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "49-46": {
	    "distance": 1.9843446999935213,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "51-46": {
	    "distance": 1.9109431415765266,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "50-46": {
	    "distance": 1.6781376708126152,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394076, 37.795463],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393177, 37.794466],
	        [-122.393198, 37.794411],
	        [-122.393258, 37.794377],
	        [-122.393362, 37.794385],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.394809, 37.795712],
	        [-122.394881, 37.795826],
	        [-122.394968, 37.795946],
	        [-122.39508, 37.796081],
	        [-122.395452, 37.796517],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "55-46": {
	    "distance": 1.6236253773382927,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "56-46": {
	    "distance": 1.2306772049974144,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397147, 37.792201],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "53-46": {
	    "distance": 1.8592205553915184,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "54-46": {
	    "distance": 2.4663315291762786,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "58-46": {
	    "distance": 3.1193492925194164,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "57-46": {
	    "distance": 2.263155178994173,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405201, 37.781697],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "59-46": {
	    "distance": 3.0716585787090978,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "62-46": {
	    "distance": 1.7813997484346078,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785231],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "60-46": {
	    "distance": 1.4137328777287368,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403561, 37.805122],
	        [-122.403542, 37.804989],
	        [-122.403525, 37.804897],
	        [-122.403376, 37.804122],
	        [-122.403358, 37.804032],
	        [-122.403345, 37.803964],
	        [-122.403189, 37.803176],
	        [-122.403174, 37.803104],
	        [-122.403156, 37.803014],
	        [-122.402989, 37.802174],
	        [-122.402891, 37.801696],
	        [-122.402804, 37.801267],
	        [-122.40261, 37.800315],
	        [-122.402419, 37.799377],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "61-46": {
	    "distance": 2.5264776545331458,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "64-46": {
	    "distance": 2.2382231540733413,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "63-46": {
	    "distance": 1.7713395983769478,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.397927, 37.790062],
	        [-122.398107, 37.790206],
	        [-122.398148, 37.790238],
	        [-122.398576, 37.790581],
	        [-122.399042, 37.790954],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "67-46": {
	    "distance": 2.9854642095907833,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417403, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "66-46": {
	    "distance": 3.8316656623612193,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.417233, 37.774269],
	        [-122.417125, 37.774325],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.417677, 37.776665],
	        [-122.417784, 37.776729],
	        [-122.417839, 37.77677],
	        [-122.417889, 37.776816],
	        [-122.417916, 37.776859],
	        [-122.418049, 37.777505],
	        [-122.417586, 37.777568],
	        [-122.417475, 37.777584],
	        [-122.416945, 37.777652],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "68-46": {
	    "distance": 1.6980403668084423,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "65-46": {
	    "distance": 4.212940580766348,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404031, 37.769808],
	        [-122.404078, 37.769861],
	        [-122.404085, 37.769951],
	        [-122.404048, 37.770007],
	        [-122.403939, 37.770055],
	        [-122.404014, 37.770133],
	        [-122.404749, 37.770735],
	        [-122.404957, 37.770906],
	        [-122.405357, 37.771232],
	        [-122.405451, 37.771303],
	        [-122.405569, 37.77135],
	        [-122.405964, 37.771631],
	        [-122.406473, 37.771951],
	        [-122.406797, 37.772255],
	        [-122.406939, 37.772376],
	        [-122.407044, 37.772488],
	        [-122.407267, 37.77272],
	        [-122.407773, 37.773152],
	        [-122.407848, 37.773298],
	        [-122.407866, 37.773373],
	        [-122.407872, 37.773448],
	        [-122.407859, 37.773513],
	        [-122.407832, 37.773582],
	        [-122.407792, 37.77365],
	        [-122.407736, 37.77371],
	        [-122.407502, 37.773872],
	        [-122.407407, 37.773944],
	        [-122.407311, 37.774021],
	        [-122.407231, 37.774093],
	        [-122.407156, 37.774174],
	        [-122.407086, 37.774261],
	        [-122.406787, 37.774665],
	        [-122.406654, 37.774836],
	        [-122.406518, 37.774999],
	        [-122.406378, 37.775151],
	        [-122.406219, 37.775314],
	        [-122.406057, 37.775469],
	        [-122.405907, 37.775601],
	        [-122.405758, 37.775723],
	        [-122.405602, 37.775839],
	        [-122.405467, 37.775927],
	        [-122.405315, 37.776008],
	        [-122.405095, 37.776113],
	        [-122.403258, 37.777202],
	        [-122.402994, 37.777365],
	        [-122.402737, 37.777532],
	        [-122.402476, 37.777712],
	        [-122.402207, 37.777903],
	        [-122.401954, 37.778094],
	        [-122.40129, 37.778716],
	        [-122.401106, 37.778873],
	        [-122.400991, 37.77897],
	        [-122.400526, 37.779359],
	        [-122.400369, 37.7795],
	        [-122.400219, 37.779645],
	        [-122.400086, 37.779781],
	        [-122.399974, 37.779903],
	        [-122.399869, 37.780029],
	        [-122.399786, 37.78014],
	        [-122.399726, 37.780249],
	        [-122.39968, 37.780359],
	        [-122.399649, 37.780466],
	        [-122.39963, 37.78056],
	        [-122.399619, 37.780658],
	        [-122.399635, 37.780791],
	        [-122.400158, 37.781211],
	        [-122.400376, 37.781387],
	        [-122.400621, 37.781581],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "69-46": {
	    "distance": 3.1819457956305905,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395997, 37.776315],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "70-46": {
	    "distance": 3.1550932756477494,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39578, 37.776485],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.395097, 37.777181],
	        [-122.395196, 37.777261],
	        [-122.39577, 37.777717],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "74-46": {
	    "distance": 1.4703863482357136,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.397611, 37.79352],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "72-46": {
	    "distance": 2.4141473189392912,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412805, 37.780268],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "73-46": {
	    "distance": 0.4582198089716706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798528],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "71-46": {
	    "distance": 1.1504192861979472,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408451, 37.788453],
	        [-122.408615, 37.789226],
	        [-122.407752, 37.789333],
	        [-122.406986, 37.789429],
	        [-122.407038, 37.789698],
	        [-122.40714, 37.790283],
	        [-122.407644, 37.792738],
	        [-122.40772, 37.793173],
	        [-122.407385, 37.793215],
	        [-122.407272, 37.793229],
	        [-122.407145, 37.793245],
	        [-122.406639, 37.793309],
	        [-122.40682, 37.794196],
	        [-122.407013, 37.795085],
	        [-122.406493, 37.795153],
	        [-122.406065, 37.795203],
	        [-122.405847, 37.795226],
	        [-122.405665, 37.795244],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "75-46": {
	    "distance": 1.1537674312627717,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398945, 37.79122],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399271, 37.791137],
	        [-122.399451, 37.791282],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "76-46": {
	    "distance": 1.4538076613740842,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "77-46": {
	    "distance": 1.2110353243968082,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.401994, 37.788895],
	        [-122.401992, 37.788988],
	        [-122.401994, 37.78903],
	        [-122.401997, 37.789103],
	        [-122.402013, 37.789184],
	        [-122.40219, 37.790039],
	        [-122.40238, 37.790969],
	        [-122.402571, 37.791899],
	        [-122.402671, 37.792385],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "82-46": {
	    "distance": 0.732523383892554,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400876, 37.798602],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "41-41s": {
	    "distance": 1.2934432875393558,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.399994, 37.795079],
	        [-122.399994, 37.795079],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088]
	      ]
	    }
	  },
	  "41-41m": {
	    "distance": 1.384719861936007,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401337, 37.794864],
	        [-122.400335, 37.795029],
	        [-122.399994, 37.795079],
	        [-122.399994, 37.795079],
	        [-122.400335, 37.795029],
	        [-122.401337, 37.794864],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "42-42m": {
	    "distance": 0.8768646667498633,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.401674, 37.795719],
	        [-122.40186, 37.796634],
	        [-122.401295, 37.796706],
	        [-122.400693, 37.796782],
	        [-122.400079, 37.79686],
	        [-122.399511, 37.796931],
	        [-122.399348, 37.796954],
	        [-122.399192, 37.796975],
	        [-122.398738, 37.797035],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284],
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.398738, 37.797035],
	        [-122.399192, 37.796975],
	        [-122.399348, 37.796954],
	        [-122.399511, 37.796931],
	        [-122.400079, 37.79686],
	        [-122.400693, 37.796782],
	        [-122.401295, 37.796706],
	        [-122.40186, 37.796634],
	        [-122.401674, 37.795719]
	      ]
	    }
	  },
	  "42-42s": {
	    "distance": 1.3241459803245461,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402282, 37.794314],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401582, 37.795306],
	        [-122.401674, 37.795719],
	        [-122.40186, 37.796634],
	        [-122.401295, 37.796706],
	        [-122.400693, 37.796782],
	        [-122.400079, 37.79686],
	        [-122.399511, 37.796931],
	        [-122.399348, 37.796954],
	        [-122.399192, 37.796975],
	        [-122.398738, 37.797035],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284],
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.398738, 37.797035],
	        [-122.399192, 37.796975],
	        [-122.399348, 37.796954],
	        [-122.399511, 37.796931],
	        [-122.400079, 37.79686],
	        [-122.400693, 37.796782],
	        [-122.401295, 37.796706],
	        [-122.40186, 37.796634],
	        [-122.401674, 37.795719],
	        [-122.401582, 37.795306],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.402282, 37.794314]
	      ]
	    }
	  },
	  "45-45s": {
	    "distance": 2.2097612936177606,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401404, 37.794427],
	        [-122.402282, 37.794314],
	        [-122.402923, 37.794231],
	        [-122.402923, 37.794231],
	        [-122.402282, 37.794314],
	        [-122.401404, 37.794427],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891]
	      ]
	    }
	  },
	  "45-45m": {
	    "distance": 1.4856976629591725,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.403221, 37.795066],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401404, 37.794427],
	        [-122.402282, 37.794314],
	        [-122.402923, 37.794231],
	        [-122.402923, 37.794231],
	        [-122.402282, 37.794314],
	        [-122.401404, 37.794427],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.403221, 37.795066],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "46-46s": {
	    "distance": 2.249603012429865,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.404754, 37.795349],
	        [-122.404754, 37.795349],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029]
	      ]
	    }
	  },
	  "46-46m": {
	    "distance": 1.4946402979249327,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.407172, 37.798525],
	        [-122.40722, 37.79877],
	        [-122.40788, 37.798686],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40704, 37.798072],
	        [-122.406733, 37.797863],
	        [-122.406307, 37.797566],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.404754, 37.795349],
	        [-122.404754, 37.795349],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406307, 37.797566],
	        [-122.406733, 37.797863],
	        [-122.40704, 37.798072],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.40788, 37.798686],
	        [-122.40722, 37.79877],
	        [-122.407172, 37.798525]
	      ]
	    }
	  },
	  "47-47l": {
	    "distance": 4.052876334962268,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.39918, 37.800768],
	        [-122.398436, 37.799913],
	        [-122.398143, 37.799592],
	        [-122.397869, 37.799273],
	        [-122.397792, 37.799184],
	        [-122.397691, 37.799069],
	        [-122.397531, 37.798883],
	        [-122.397452, 37.798793],
	        [-122.397263, 37.79858],
	        [-122.396624, 37.797859],
	        [-122.39604, 37.797201],
	        [-122.395682, 37.796785],
	        [-122.395556, 37.796634],
	        [-122.395692, 37.796622],
	        [-122.39584, 37.796606],
	        [-122.396197, 37.79656],
	        [-122.39648, 37.796506],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.39697, 37.796221],
	        [-122.396834, 37.795467],
	        [-122.396727, 37.795],
	        [-122.396661, 37.794645],
	        [-122.39664, 37.794536],
	        [-122.396491, 37.793786],
	        [-122.396485, 37.793737],
	        [-122.39648, 37.793664],
	        [-122.396471, 37.793606],
	        [-122.396442, 37.793458],
	        [-122.396421, 37.793353],
	        [-122.396419, 37.79327],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403375, 37.787978],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403449, 37.78892],
	        [-122.403449, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403375, 37.787978],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396419, 37.79327],
	        [-122.396421, 37.793353],
	        [-122.396442, 37.793458],
	        [-122.396471, 37.793606],
	        [-122.39648, 37.793664],
	        [-122.396485, 37.793737],
	        [-122.396491, 37.793786],
	        [-122.39664, 37.794536],
	        [-122.396661, 37.794645],
	        [-122.396727, 37.795],
	        [-122.396834, 37.795467],
	        [-122.39697, 37.796221],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.39648, 37.796506],
	        [-122.396197, 37.79656],
	        [-122.39584, 37.796606],
	        [-122.395692, 37.796622],
	        [-122.395556, 37.796634],
	        [-122.395682, 37.796785],
	        [-122.39604, 37.797201],
	        [-122.396624, 37.797859],
	        [-122.397263, 37.79858],
	        [-122.397452, 37.798793],
	        [-122.397531, 37.798883],
	        [-122.397691, 37.799069],
	        [-122.397792, 37.799184],
	        [-122.397869, 37.799273],
	        [-122.398143, 37.799592],
	        [-122.398436, 37.799913],
	        [-122.39918, 37.800768]
	      ]
	    }
	  },
	  "47-47m": {
	    "distance": 2.2741505842960055,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403449, 37.78892],
	        [-122.403449, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375]
	      ]
	    }
	  },
	  "47-47s": {
	    "distance": 3.022114821883737,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.403449, 37.78892],
	        [-122.403449, 37.78892],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999]
	      ]
	    }
	  },
	  "48-48s": {
	    "distance": 0.8664997399199117,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.399891, 37.798833],
	        [-122.400061, 37.799678],
	        [-122.400249, 37.800617],
	        [-122.39954, 37.800707],
	        [-122.399475, 37.800725],
	        [-122.399427, 37.800744],
	        [-122.399337, 37.800794],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976],
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399337, 37.800794],
	        [-122.399427, 37.800744],
	        [-122.399475, 37.800725],
	        [-122.39954, 37.800707],
	        [-122.400249, 37.800617],
	        [-122.400061, 37.799678],
	        [-122.399891, 37.798833],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871]
	      ]
	    }
	  },
	  "48-48m": {
	    "distance": 2.7494332844792257,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.392024, 37.793466],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399144, 37.800912],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976],
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399144, 37.800912],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.392024, 37.793466],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562]
	      ]
	    }
	  },
	  "48-48l": {
	    "distance": 3.3095999887860157,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.389934, 37.790912],
	        [-122.39002, 37.791001],
	        [-122.390133, 37.791127],
	        [-122.390237, 37.791261],
	        [-122.390326, 37.791396],
	        [-122.39041, 37.791547],
	        [-122.390482, 37.791701],
	        [-122.390594, 37.791942],
	        [-122.390661, 37.792078],
	        [-122.390735, 37.79221],
	        [-122.390811, 37.792323],
	        [-122.390901, 37.792437],
	        [-122.390976, 37.792533],
	        [-122.391053, 37.792627],
	        [-122.391192, 37.792766],
	        [-122.391994, 37.793441],
	        [-122.39218, 37.793603],
	        [-122.392341, 37.793754],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.39501, 37.796491],
	        [-122.395175, 37.796671],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399144, 37.800912],
	        [-122.399253, 37.80084],
	        [-122.39918, 37.800768],
	        [-122.398487, 37.799976],
	        [-122.398487, 37.799976],
	        [-122.39918, 37.800768],
	        [-122.399253, 37.80084],
	        [-122.399144, 37.800912],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395175, 37.796671],
	        [-122.39501, 37.796491],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392341, 37.793754],
	        [-122.39218, 37.793603],
	        [-122.391994, 37.793441],
	        [-122.391192, 37.792766],
	        [-122.391053, 37.792627],
	        [-122.390976, 37.792533],
	        [-122.390901, 37.792437],
	        [-122.390811, 37.792323],
	        [-122.390735, 37.79221],
	        [-122.390661, 37.792078],
	        [-122.390594, 37.791942],
	        [-122.390482, 37.791701],
	        [-122.39041, 37.791547],
	        [-122.390326, 37.791396],
	        [-122.390237, 37.791261],
	        [-122.390133, 37.791127],
	        [-122.39002, 37.791001],
	        [-122.389934, 37.790912],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082]
	      ]
	    }
	  },
	  "49-49s": {
	    "distance": 1.3171151353211692,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391364, 37.789777],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569],
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.391364, 37.789777],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198]
	      ]
	    }
	  },
	  "49-49m": {
	    "distance": 1.4456171218996787,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.393228, 37.791868],
	        [-122.393119, 37.791781],
	        [-122.392525, 37.79131],
	        [-122.392008, 37.790899],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569],
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.392008, 37.790899],
	        [-122.392525, 37.79131],
	        [-122.393119, 37.791781],
	        [-122.393228, 37.791868],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "50-50s": {
	    "distance": 1.6855387026888902,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395023, 37.791767],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392512, 37.793786],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394078, 37.795465],
	        [-122.394078, 37.795465],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392512, 37.793786],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.395023, 37.791767],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361]
	      ]
	    }
	  },
	  "49-49l": {
	    "distance": 2.0850106791520724,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.393896, 37.795268],
	        [-122.394582, 37.796015],
	        [-122.394751, 37.796031],
	        [-122.394811, 37.796018],
	        [-122.394849, 37.795943],
	        [-122.394822, 37.795875],
	        [-122.39474, 37.795712],
	        [-122.394649, 37.795438],
	        [-122.39458, 37.795318],
	        [-122.394515, 37.795222],
	        [-122.394445, 37.795131],
	        [-122.394352, 37.795023],
	        [-122.394255, 37.794926],
	        [-122.394156, 37.794836],
	        [-122.394051, 37.794749],
	        [-122.393943, 37.794667],
	        [-122.393829, 37.794587],
	        [-122.393678, 37.794494],
	        [-122.393399, 37.794333],
	        [-122.393263, 37.794255],
	        [-122.393135, 37.794173],
	        [-122.393, 37.794076],
	        [-122.392864, 37.793965],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390907, 37.791534],
	        [-122.390823, 37.791399],
	        [-122.390736, 37.791278],
	        [-122.390627, 37.791149],
	        [-122.390519, 37.791036],
	        [-122.390394, 37.790923],
	        [-122.390264, 37.79082],
	        [-122.390154, 37.790737],
	        [-122.390591, 37.790389],
	        [-122.390979, 37.790082],
	        [-122.390335, 37.789569],
	        [-122.390335, 37.789569],
	        [-122.390979, 37.790082],
	        [-122.390591, 37.790389],
	        [-122.390154, 37.790737],
	        [-122.390264, 37.79082],
	        [-122.390394, 37.790923],
	        [-122.390519, 37.791036],
	        [-122.390627, 37.791149],
	        [-122.390736, 37.791278],
	        [-122.390823, 37.791399],
	        [-122.390907, 37.791534],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.392864, 37.793965],
	        [-122.393, 37.794076],
	        [-122.393135, 37.794173],
	        [-122.393263, 37.794255],
	        [-122.393399, 37.794333],
	        [-122.393678, 37.794494],
	        [-122.393829, 37.794587],
	        [-122.393943, 37.794667],
	        [-122.394051, 37.794749],
	        [-122.394156, 37.794836],
	        [-122.394255, 37.794926],
	        [-122.394352, 37.795023],
	        [-122.394445, 37.795131],
	        [-122.394515, 37.795222],
	        [-122.39458, 37.795318],
	        [-122.394649, 37.795438],
	        [-122.39474, 37.795712],
	        [-122.394822, 37.795875],
	        [-122.394849, 37.795943],
	        [-122.394811, 37.796018],
	        [-122.394751, 37.796031],
	        [-122.394582, 37.796015],
	        [-122.393896, 37.795268]
	      ]
	    }
	  },
	  "50-50m": {
	    "distance": 2.67597260317942,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392512, 37.793786],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394078, 37.795465],
	        [-122.394078, 37.795465],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392512, 37.793786],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283]
	      ]
	    }
	  },
	  "50-50l": {
	    "distance": 4.33856304085629,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392512, 37.793786],
	        [-122.392443, 37.793844],
	        [-122.392777, 37.794156],
	        [-122.393072, 37.79443],
	        [-122.393181, 37.794532],
	        [-122.393351, 37.794689],
	        [-122.393473, 37.79481],
	        [-122.393586, 37.79493],
	        [-122.393704, 37.795059],
	        [-122.393896, 37.795268],
	        [-122.394078, 37.795465],
	        [-122.394078, 37.795465],
	        [-122.393896, 37.795268],
	        [-122.393704, 37.795059],
	        [-122.393586, 37.79493],
	        [-122.393473, 37.79481],
	        [-122.393351, 37.794689],
	        [-122.393181, 37.794532],
	        [-122.393072, 37.79443],
	        [-122.392777, 37.794156],
	        [-122.392443, 37.793844],
	        [-122.392512, 37.793786],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999]
	      ]
	    }
	  },
	  "51-51s": {
	    "distance": 1.0663305004441663,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.393437, 37.790589],
	        [-122.392944, 37.790979],
	        [-122.392525, 37.79131],
	        [-122.391651, 37.792],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517],
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.391651, 37.792],
	        [-122.392525, 37.79131],
	        [-122.392944, 37.790979],
	        [-122.393437, 37.790589],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581]
	      ]
	    }
	  },
	  "51-51m": {
	    "distance": 2.8780228023840753,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517],
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917]
	      ]
	    }
	  },
	  "51-51l": {
	    "distance": 4.42527138508509,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.392595, 37.793719],
	        [-122.392275, 37.793439],
	        [-122.39211, 37.793295],
	        [-122.391736, 37.792985],
	        [-122.391587, 37.792853],
	        [-122.391485, 37.792754],
	        [-122.391405, 37.792664],
	        [-122.391326, 37.792562],
	        [-122.39126, 37.792458],
	        [-122.3912, 37.792356],
	        [-122.391153, 37.792233],
	        [-122.39103, 37.791798],
	        [-122.390973, 37.791666],
	        [-122.390896, 37.791517],
	        [-122.390896, 37.791517],
	        [-122.390973, 37.791666],
	        [-122.39103, 37.791798],
	        [-122.391153, 37.792233],
	        [-122.3912, 37.792356],
	        [-122.39126, 37.792458],
	        [-122.391326, 37.792562],
	        [-122.391405, 37.792664],
	        [-122.391485, 37.792754],
	        [-122.391587, 37.792853],
	        [-122.391736, 37.792985],
	        [-122.39211, 37.793295],
	        [-122.392275, 37.793439],
	        [-122.392595, 37.793719],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999]
	      ]
	    }
	  },
	  "53-53s": {
	    "distance": 1.7034725177333097,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406731, 37.781691],
	        [-122.40727, 37.782119],
	        [-122.408721, 37.780977],
	        [-122.409258, 37.781409],
	        [-122.409703, 37.781763],
	        [-122.410138, 37.782111],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838],
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.410138, 37.782111],
	        [-122.409703, 37.781763],
	        [-122.409258, 37.781409],
	        [-122.408721, 37.780977],
	        [-122.40727, 37.782119],
	        [-122.406731, 37.781691],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927]
	      ]
	    }
	  },
	  "53-53m": {
	    "distance": 1.8518898335023735,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838],
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684]
	      ]
	    }
	  },
	  "53-53l": {
	    "distance": 5.086187895826131,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.388027, 37.787198],
	        [-122.388036, 37.787094],
	        [-122.388115, 37.787098],
	        [-122.388283, 37.787107],
	        [-122.388393, 37.787105],
	        [-122.388513, 37.787075],
	        [-122.388604, 37.787027],
	        [-122.388753, 37.786915],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.396404, 37.793004],
	        [-122.39645, 37.793103],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838],
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.39645, 37.793103],
	        [-122.396404, 37.793004],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.388753, 37.786915],
	        [-122.388604, 37.787027],
	        [-122.388513, 37.787075],
	        [-122.388393, 37.787105],
	        [-122.388283, 37.787107],
	        [-122.388115, 37.787098],
	        [-122.388036, 37.787094],
	        [-122.388027, 37.787198]
	      ]
	    }
	  },
	  "54-54s": {
	    "distance": 2.052585680811126,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.393437, 37.790589],
	        [-122.392944, 37.790979],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152],
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.392944, 37.790979],
	        [-122.393437, 37.790589],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581]
	      ]
	    }
	  },
	  "55-55s": {
	    "distance": 0.8365327024453474,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397352, 37.792361],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696],
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397352, 37.792361]
	      ]
	    }
	  },
	  "54-54m": {
	    "distance": 2.503067271744856,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.393437, 37.790589],
	        [-122.392944, 37.790979],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152],
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.392944, 37.790979],
	        [-122.393437, 37.790589],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167]
	      ]
	    }
	  },
	  "55-55m": {
	    "distance": 1.7963288045636394,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.390971, 37.787643],
	        [-122.391407, 37.787297],
	        [-122.39207, 37.786773],
	        [-122.392994, 37.787515],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394561, 37.789696],
	        [-122.394561, 37.789696],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.392994, 37.787515],
	        [-122.39207, 37.786773],
	        [-122.391407, 37.787297],
	        [-122.390971, 37.787643],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "55-55l": {
	    "distance": 3.49858475870002,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404941, 37.781493],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.406041, 37.783085],
	        [-122.405437, 37.783556],
	        [-122.404868, 37.783999],
	        [-122.404256, 37.784489],
	        [-122.404091, 37.784559],
	        [-122.403448, 37.785072],
	        [-122.403196, 37.785269],
	        [-122.402704, 37.785659],
	        [-122.402094, 37.786142],
	        [-122.402041, 37.786261],
	        [-122.401272, 37.78686],
	        [-122.400508, 37.787455],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.396688, 37.790461],
	        [-122.396238, 37.790817],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394561, 37.789696],
	        [-122.394561, 37.789696],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396238, 37.790817],
	        [-122.396688, 37.790461],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.400508, 37.787455],
	        [-122.401272, 37.78686],
	        [-122.402041, 37.786261],
	        [-122.402094, 37.786142],
	        [-122.402704, 37.785659],
	        [-122.403196, 37.785269],
	        [-122.403448, 37.785072],
	        [-122.404091, 37.784559],
	        [-122.404256, 37.784489],
	        [-122.404868, 37.783999],
	        [-122.405437, 37.783556],
	        [-122.406041, 37.783085],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.404941, 37.781493]
	      ]
	    }
	  },
	  "56-56s": {
	    "distance": 2.2361017476760856,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396719, 37.785543],
	        [-122.395932, 37.786164],
	        [-122.395817, 37.786255],
	        [-122.395623, 37.786408],
	        [-122.395559, 37.786459],
	        [-122.395274, 37.786684],
	        [-122.394485, 37.787307],
	        [-122.394133, 37.787589],
	        [-122.393995, 37.787691],
	        [-122.393616, 37.788003],
	        [-122.393758, 37.788167],
	        [-122.394094, 37.788442],
	        [-122.394207, 37.788531],
	        [-122.394467, 37.788691],
	        [-122.395147, 37.789231],
	        [-122.395361, 37.789402],
	        [-122.395702, 37.789671],
	        [-122.396038, 37.789941],
	        [-122.39617, 37.790047],
	        [-122.396297, 37.790148],
	        [-122.396688, 37.790461],
	        [-122.397159, 37.790837],
	        [-122.397244, 37.790905],
	        [-122.397548, 37.791147],
	        [-122.398234, 37.791694],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397141, 37.792197],
	        [-122.397141, 37.792197],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398234, 37.791694],
	        [-122.397548, 37.791147],
	        [-122.397244, 37.790905],
	        [-122.397159, 37.790837],
	        [-122.396688, 37.790461],
	        [-122.396297, 37.790148],
	        [-122.39617, 37.790047],
	        [-122.396038, 37.789941],
	        [-122.395702, 37.789671],
	        [-122.395361, 37.789402],
	        [-122.395147, 37.789231],
	        [-122.394467, 37.788691],
	        [-122.394207, 37.788531],
	        [-122.394094, 37.788442],
	        [-122.393758, 37.788167],
	        [-122.393616, 37.788003],
	        [-122.393995, 37.787691],
	        [-122.394133, 37.787589],
	        [-122.394485, 37.787307],
	        [-122.395274, 37.786684],
	        [-122.395559, 37.786459],
	        [-122.395623, 37.786408],
	        [-122.395817, 37.786255],
	        [-122.395932, 37.786164],
	        [-122.396719, 37.785543]
	      ]
	    }
	  },
	  "56-56m": {
	    "distance": 1.5625478231050747,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402923, 37.794231],
	        [-122.403047, 37.794216],
	        [-122.402953, 37.793774],
	        [-122.402767, 37.792851],
	        [-122.401958, 37.792954],
	        [-122.401128, 37.793073],
	        [-122.399959, 37.793209],
	        [-122.398903, 37.79335],
	        [-122.398783, 37.793366],
	        [-122.398706, 37.793376],
	        [-122.397611, 37.79352],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397141, 37.792197],
	        [-122.397141, 37.792197],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.397611, 37.79352],
	        [-122.398706, 37.793376],
	        [-122.398783, 37.793366],
	        [-122.398903, 37.79335],
	        [-122.399959, 37.793209],
	        [-122.401128, 37.793073],
	        [-122.401958, 37.792954],
	        [-122.402767, 37.792851],
	        [-122.402953, 37.793774],
	        [-122.403047, 37.794216],
	        [-122.402923, 37.794231]
	      ]
	    }
	  },
	  "56-56l": {
	    "distance": 3.37657693603288,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397352, 37.792361],
	        [-122.397141, 37.792197],
	        [-122.397141, 37.792197],
	        [-122.397352, 37.792361],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927]
	      ]
	    }
	  },
	  "57-57m": {
	    "distance": 1.0838333161028633,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40083, 37.784731],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405198, 37.781695],
	        [-122.405198, 37.781695],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.40083, 37.784731]
	      ]
	    }
	  },
	  "57-57s": {
	    "distance": 3.0114935196001973,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405198, 37.781695],
	        [-122.405198, 37.781695],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444]
	      ]
	    }
	  },
	  "58-58s": {
	    "distance": 1.592915866490774,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.4188, 37.781236],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.41899, 37.782169],
	        [-122.418896, 37.781705],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418567, 37.780129],
	        [-122.418419, 37.779388],
	        [-122.418274, 37.778643],
	        [-122.418274, 37.778643],
	        [-122.418419, 37.779388],
	        [-122.418567, 37.780129],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418896, 37.781705],
	        [-122.41899, 37.782169],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.4188, 37.781236]
	      ]
	    }
	  },
	  "58-58m": {
	    "distance": 2.5202621343815785,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444],
	        [-122.418274, 37.778643],
	        [-122.418274, 37.778643],
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "59-59s": {
	    "distance": 2.2944680043603882,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.416539, 37.777316],
	        [-122.417385, 37.776653],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419246, 37.775362],
	        [-122.419434, 37.776385],
	        [-122.419618, 37.777309],
	        [-122.419712, 37.77777],
	        [-122.41978, 37.778168],
	        [-122.419793, 37.778243],
	        [-122.419826, 37.778409],
	        [-122.420127, 37.779932],
	        [-122.42016, 37.780081],
	        [-122.420061, 37.780093],
	        [-122.419823, 37.780122],
	        [-122.419002, 37.780221],
	        [-122.418739, 37.780254],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262],
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418739, 37.780254],
	        [-122.419002, 37.780221],
	        [-122.419823, 37.780122],
	        [-122.420061, 37.780093],
	        [-122.42016, 37.780081],
	        [-122.420127, 37.779932],
	        [-122.419826, 37.778409],
	        [-122.419793, 37.778243],
	        [-122.41978, 37.778168],
	        [-122.419712, 37.77777],
	        [-122.419618, 37.777309],
	        [-122.419434, 37.776385],
	        [-122.419246, 37.775362],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417385, 37.776653],
	        [-122.416539, 37.777316]
	      ]
	    }
	  },
	  "59-59m": {
	    "distance": 2.033316501471276,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412807, 37.780266],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416401, 37.777723],
	        [-122.416579, 37.778655],
	        [-122.416748, 37.779416],
	        [-122.416783, 37.779585],
	        [-122.416816, 37.779741],
	        [-122.416944, 37.780404],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262],
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416944, 37.780404],
	        [-122.416816, 37.779741],
	        [-122.416783, 37.779585],
	        [-122.416748, 37.779416],
	        [-122.416579, 37.778655],
	        [-122.416401, 37.777723],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412807, 37.780266]
	      ]
	    }
	  },
	  "60-60s": {
	    "distance": 1.8276285695080743,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.402419, 37.799377],
	        [-122.40261, 37.800315],
	        [-122.402804, 37.801267],
	        [-122.402891, 37.801696],
	        [-122.402989, 37.802174],
	        [-122.403156, 37.803014],
	        [-122.403174, 37.803104],
	        [-122.403189, 37.803176],
	        [-122.403345, 37.803964],
	        [-122.403358, 37.804032],
	        [-122.403376, 37.804122],
	        [-122.403525, 37.804897],
	        [-122.403542, 37.804989],
	        [-122.403561, 37.805122],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828],
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403561, 37.805122],
	        [-122.403542, 37.804989],
	        [-122.403525, 37.804897],
	        [-122.403376, 37.804122],
	        [-122.403358, 37.804032],
	        [-122.403345, 37.803964],
	        [-122.403189, 37.803176],
	        [-122.403174, 37.803104],
	        [-122.403156, 37.803014],
	        [-122.402989, 37.802174],
	        [-122.402891, 37.801696],
	        [-122.402804, 37.801267],
	        [-122.40261, 37.800315],
	        [-122.402419, 37.799377],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591]
	      ]
	    }
	  },
	  "59-59l": {
	    "distance": 7.911380807534143,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403334, 37.804957],
	        [-122.402393, 37.804276],
	        [-122.40228, 37.804196],
	        [-122.402174, 37.804119],
	        [-122.402118, 37.804067],
	        [-122.402032, 37.803972],
	        [-122.402106, 37.803925],
	        [-122.402108, 37.803833],
	        [-122.402029, 37.803445],
	        [-122.401993, 37.803244],
	        [-122.401805, 37.802366],
	        [-122.401794, 37.802311],
	        [-122.401628, 37.801398],
	        [-122.401537, 37.800923],
	        [-122.401446, 37.800459],
	        [-122.401256, 37.799525],
	        [-122.401074, 37.79868],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.41597, 37.780627],
	        [-122.416859, 37.780507],
	        [-122.416961, 37.780493],
	        [-122.417121, 37.780474],
	        [-122.418058, 37.780341],
	        [-122.418482, 37.780286],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418587, 37.781262],
	        [-122.418587, 37.781262],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418482, 37.780286],
	        [-122.418058, 37.780341],
	        [-122.417121, 37.780474],
	        [-122.416961, 37.780493],
	        [-122.416859, 37.780507],
	        [-122.41597, 37.780627],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.401074, 37.79868],
	        [-122.401256, 37.799525],
	        [-122.401446, 37.800459],
	        [-122.401537, 37.800923],
	        [-122.401628, 37.801398],
	        [-122.401794, 37.802311],
	        [-122.401805, 37.802366],
	        [-122.401993, 37.803244],
	        [-122.402029, 37.803445],
	        [-122.402108, 37.803833],
	        [-122.402106, 37.803925],
	        [-122.402032, 37.803972],
	        [-122.402118, 37.804067],
	        [-122.402174, 37.804119],
	        [-122.40228, 37.804196],
	        [-122.402393, 37.804276],
	        [-122.403334, 37.804957]
	      ]
	    }
	  },
	  "60-60m": {
	    "distance": 5.8685783437640895,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398258, 37.786773],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.4012, 37.785587],
	        [-122.401495, 37.785825],
	        [-122.402041, 37.786261],
	        [-122.402475, 37.786602],
	        [-122.402572, 37.786679],
	        [-122.403019, 37.787031],
	        [-122.403358, 37.7873],
	        [-122.403394, 37.787342],
	        [-122.403418, 37.78739],
	        [-122.403433, 37.787441],
	        [-122.403438, 37.787491],
	        [-122.403436, 37.787675],
	        [-122.403443, 37.787728],
	        [-122.403464, 37.787825],
	        [-122.403491, 37.787963],
	        [-122.403586, 37.788434],
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.404877, 37.794859],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405331, 37.797092],
	        [-122.405411, 37.797563],
	        [-122.405481, 37.797903],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.402419, 37.799377],
	        [-122.40261, 37.800315],
	        [-122.402804, 37.801267],
	        [-122.402891, 37.801696],
	        [-122.402989, 37.802174],
	        [-122.403156, 37.803014],
	        [-122.403174, 37.803104],
	        [-122.403189, 37.803176],
	        [-122.403345, 37.803964],
	        [-122.403358, 37.804032],
	        [-122.403376, 37.804122],
	        [-122.403525, 37.804897],
	        [-122.403542, 37.804989],
	        [-122.403561, 37.805122],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828],
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403561, 37.805122],
	        [-122.403542, 37.804989],
	        [-122.403525, 37.804897],
	        [-122.403376, 37.804122],
	        [-122.403358, 37.804032],
	        [-122.403345, 37.803964],
	        [-122.403189, 37.803176],
	        [-122.403174, 37.803104],
	        [-122.403156, 37.803014],
	        [-122.402989, 37.802174],
	        [-122.402891, 37.801696],
	        [-122.402804, 37.801267],
	        [-122.40261, 37.800315],
	        [-122.402419, 37.799377],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.405481, 37.797903],
	        [-122.405411, 37.797563],
	        [-122.405331, 37.797092],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404877, 37.794859],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891],
	        [-122.403586, 37.788434],
	        [-122.403491, 37.787963],
	        [-122.403464, 37.787825],
	        [-122.403443, 37.787728],
	        [-122.403436, 37.787675],
	        [-122.403438, 37.787491],
	        [-122.403433, 37.787441],
	        [-122.403418, 37.78739],
	        [-122.403394, 37.787342],
	        [-122.403358, 37.7873],
	        [-122.403019, 37.787031],
	        [-122.402572, 37.786679],
	        [-122.402475, 37.786602],
	        [-122.402041, 37.786261],
	        [-122.401495, 37.785825],
	        [-122.4012, 37.785587],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.398258, 37.786773]
	      ]
	    }
	  },
	  "60-60l": {
	    "distance": 7.396088024688173,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398793, 37.7872],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.400345, 37.78844],
	        [-122.400812, 37.788814],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396596, 37.796376],
	        [-122.396383, 37.796428],
	        [-122.396158, 37.796471],
	        [-122.39584, 37.796525],
	        [-122.395641, 37.796558],
	        [-122.395556, 37.796634],
	        [-122.395289, 37.796796],
	        [-122.395418, 37.796939],
	        [-122.396458, 37.798098],
	        [-122.396924, 37.798616],
	        [-122.39745, 37.799203],
	        [-122.39753, 37.799291],
	        [-122.397632, 37.799406],
	        [-122.398178, 37.80002],
	        [-122.398962, 37.800892],
	        [-122.399049, 37.800992],
	        [-122.399165, 37.801123],
	        [-122.399792, 37.801819],
	        [-122.400448, 37.802547],
	        [-122.400903, 37.803058],
	        [-122.401236, 37.80342],
	        [-122.401794, 37.804076],
	        [-122.401904, 37.804165],
	        [-122.40207, 37.804321],
	        [-122.402155, 37.804399],
	        [-122.402206, 37.804441],
	        [-122.402723, 37.804821],
	        [-122.403174, 37.80514],
	        [-122.403268, 37.805142],
	        [-122.403356, 37.805116],
	        [-122.40345, 37.805041],
	        [-122.403334, 37.804957],
	        [-122.403159, 37.804828],
	        [-122.403159, 37.804828],
	        [-122.403334, 37.804957],
	        [-122.40345, 37.805041],
	        [-122.403356, 37.805116],
	        [-122.403268, 37.805142],
	        [-122.403174, 37.80514],
	        [-122.402723, 37.804821],
	        [-122.402206, 37.804441],
	        [-122.402155, 37.804399],
	        [-122.40207, 37.804321],
	        [-122.401904, 37.804165],
	        [-122.401794, 37.804076],
	        [-122.401236, 37.80342],
	        [-122.400903, 37.803058],
	        [-122.400448, 37.802547],
	        [-122.399792, 37.801819],
	        [-122.399165, 37.801123],
	        [-122.399049, 37.800992],
	        [-122.398962, 37.800892],
	        [-122.398178, 37.80002],
	        [-122.397632, 37.799406],
	        [-122.39753, 37.799291],
	        [-122.39745, 37.799203],
	        [-122.396924, 37.798616],
	        [-122.396458, 37.798098],
	        [-122.395418, 37.796939],
	        [-122.395289, 37.796796],
	        [-122.395556, 37.796634],
	        [-122.395641, 37.796558],
	        [-122.39584, 37.796525],
	        [-122.396158, 37.796471],
	        [-122.396383, 37.796428],
	        [-122.396596, 37.796376],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.400812, 37.788814],
	        [-122.400345, 37.78844],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398793, 37.7872],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607]
	      ]
	    }
	  },
	  "61-61s": {
	    "distance": 1.3879365579606615,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468],
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905]
	      ]
	    }
	  },
	  "62-62m": {
	    "distance": 1.4904722238391936,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785233],
	        [-122.396329, 37.785233],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468]
	      ]
	    }
	  },
	  "61-61m": {
	    "distance": 1.4904722238391939,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396329, 37.785233],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468],
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785233]
	      ]
	    }
	  },
	  "62-62s": {
	    "distance": 0.8629409177621594,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396329, 37.785233],
	        [-122.396329, 37.785233],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484]
	      ]
	    }
	  },
	  "62-62l": {
	    "distance": 0.5617442501385403,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397937, 37.787027],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.396329, 37.785233],
	        [-122.396329, 37.785233],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.397937, 37.787027]
	      ]
	    }
	  },
	  "41-41l": {
	    "distance": 1.2934432875393558,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.397026, 37.796524],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.399994, 37.795079],
	        [-122.399994, 37.795079],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.397026, 37.796524],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088]
	      ]
	    }
	  },
	  "63-63s": {
	    "distance": 3.1761795488069295,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932],
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484]
	      ]
	    }
	  },
	  "42-42l": {
	    "distance": 1.3241459803245461,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402282, 37.794314],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401582, 37.795306],
	        [-122.401674, 37.795719],
	        [-122.40186, 37.796634],
	        [-122.401295, 37.796706],
	        [-122.400693, 37.796782],
	        [-122.400079, 37.79686],
	        [-122.399511, 37.796931],
	        [-122.399348, 37.796954],
	        [-122.399192, 37.796975],
	        [-122.398738, 37.797035],
	        [-122.398341, 37.797088],
	        [-122.398382, 37.797284],
	        [-122.398382, 37.797284],
	        [-122.398341, 37.797088],
	        [-122.398738, 37.797035],
	        [-122.399192, 37.796975],
	        [-122.399348, 37.796954],
	        [-122.399511, 37.796931],
	        [-122.400079, 37.79686],
	        [-122.400693, 37.796782],
	        [-122.401295, 37.796706],
	        [-122.40186, 37.796634],
	        [-122.401674, 37.795719],
	        [-122.401582, 37.795306],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.402282, 37.794314]
	      ]
	    }
	  },
	  "63-63m": {
	    "distance": 1.6532730272558671,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397141, 37.792197],
	        [-122.396783, 37.791925],
	        [-122.396468, 37.791674],
	        [-122.395815, 37.791151],
	        [-122.395297, 37.790737],
	        [-122.395157, 37.790627],
	        [-122.394827, 37.790361],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581],
	        [-122.395147, 37.789231],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932],
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.395147, 37.789231],
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.394827, 37.790361],
	        [-122.395157, 37.790627],
	        [-122.395297, 37.790737],
	        [-122.395815, 37.791151],
	        [-122.396468, 37.791674],
	        [-122.396783, 37.791925],
	        [-122.397141, 37.792197]
	      ]
	    }
	  },
	  "45-45l": {
	    "distance": 2.2097612936177606,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.403678, 37.788891],
	        [-122.40377, 37.789344],
	        [-122.403866, 37.789826],
	        [-122.403958, 37.790283],
	        [-122.404053, 37.790757],
	        [-122.40424, 37.791688],
	        [-122.404346, 37.792217],
	        [-122.404438, 37.792651],
	        [-122.404614, 37.79356],
	        [-122.404709, 37.794021],
	        [-122.404792, 37.79446],
	        [-122.403139, 37.794666],
	        [-122.402363, 37.794756],
	        [-122.402205, 37.794775],
	        [-122.401491, 37.794864],
	        [-122.401404, 37.794427],
	        [-122.402282, 37.794314],
	        [-122.402923, 37.794231],
	        [-122.402923, 37.794231],
	        [-122.402282, 37.794314],
	        [-122.401404, 37.794427],
	        [-122.401491, 37.794864],
	        [-122.402205, 37.794775],
	        [-122.402363, 37.794756],
	        [-122.403139, 37.794666],
	        [-122.404792, 37.79446],
	        [-122.404709, 37.794021],
	        [-122.404614, 37.79356],
	        [-122.404438, 37.792651],
	        [-122.404346, 37.792217],
	        [-122.40424, 37.791688],
	        [-122.404053, 37.790757],
	        [-122.403958, 37.790283],
	        [-122.403866, 37.789826],
	        [-122.40377, 37.789344],
	        [-122.403678, 37.788891]
	      ]
	    }
	  },
	  "64-64s": {
	    "distance": 3.012243377740452,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400649, 37.784873],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.401932, 37.782633],
	        [-122.401703, 37.782447],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.398748, 37.783941],
	        [-122.397841, 37.784657],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232],
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.397841, 37.784657],
	        [-122.398748, 37.783941],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.401703, 37.782447],
	        [-122.401932, 37.782633],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.400649, 37.784873]
	      ]
	    }
	  },
	  "64-64m": {
	    "distance": 1.4462289978016192,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398054, 37.786932],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392661, 37.78232],
	        [-122.392661, 37.78232],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398054, 37.786932]
	      ]
	    }
	  },
	  "64-64l": {
	    "distance": 3.318166709217895,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401787, 37.771905],
	        [-122.402204, 37.772245],
	        [-122.402509, 37.772489],
	        [-122.40322, 37.773055],
	        [-122.402681, 37.773481],
	        [-122.402275, 37.773802],
	        [-122.402109, 37.773934],
	        [-122.40206, 37.773973],
	        [-122.401546, 37.774377],
	        [-122.400995, 37.774814],
	        [-122.400875, 37.774909],
	        [-122.400197, 37.775445],
	        [-122.398769, 37.776574],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.393198, 37.780977],
	        [-122.392623, 37.781431],
	        [-122.392186, 37.781777],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392661, 37.78232],
	        [-122.392661, 37.78232],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.392186, 37.781777],
	        [-122.392623, 37.781431],
	        [-122.393198, 37.780977],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.398769, 37.776574],
	        [-122.400197, 37.775445],
	        [-122.400875, 37.774909],
	        [-122.400995, 37.774814],
	        [-122.401546, 37.774377],
	        [-122.40206, 37.773973],
	        [-122.402109, 37.773934],
	        [-122.402275, 37.773802],
	        [-122.402681, 37.773481],
	        [-122.40322, 37.773055],
	        [-122.402509, 37.772489],
	        [-122.402204, 37.772245],
	        [-122.401787, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759]
	      ]
	    }
	  },
	  "65-65s": {
	    "distance": 1.3801793781228513,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024],
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421]
	      ]
	    }
	  },
	  "65-65m": {
	    "distance": 1.7167308040384268,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395777, 37.776487],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024],
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395777, 37.776487]
	      ]
	    }
	  },
	  "65-65l": {
	    "distance": 4.019703537597152,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419096, 37.774706],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.416447, 37.775699],
	        [-122.415916, 37.775271],
	        [-122.415384, 37.774852],
	        [-122.414921, 37.774484],
	        [-122.414368, 37.774043],
	        [-122.413763, 37.77356],
	        [-122.412834, 37.77282],
	        [-122.411897, 37.772073],
	        [-122.411287, 37.771586],
	        [-122.410904, 37.771281],
	        [-122.409766, 37.770337],
	        [-122.408436, 37.769318],
	        [-122.408334, 37.76921],
	        [-122.407888, 37.769241],
	        [-122.407461, 37.769271],
	        [-122.406882, 37.769299],
	        [-122.406725, 37.769307],
	        [-122.406544, 37.769334],
	        [-122.406398, 37.769371],
	        [-122.406226, 37.769452],
	        [-122.406127, 37.769521],
	        [-122.406034, 37.769591],
	        [-122.405959, 37.769629],
	        [-122.405881, 37.769658],
	        [-122.405801, 37.769671],
	        [-122.40572, 37.769678],
	        [-122.404995, 37.769721],
	        [-122.404433, 37.769754],
	        [-122.404306, 37.769746],
	        [-122.404138, 37.769753],
	        [-122.404047, 37.769763],
	        [-122.40396, 37.769777],
	        [-122.403881, 37.769773],
	        [-122.403774, 37.76982],
	        [-122.403733, 37.769886],
	        [-122.403758, 37.769991],
	        [-122.403857, 37.77005],
	        [-122.403807, 37.770119],
	        [-122.402675, 37.771024],
	        [-122.402675, 37.771024],
	        [-122.403807, 37.770119],
	        [-122.403857, 37.77005],
	        [-122.403758, 37.769991],
	        [-122.403733, 37.769886],
	        [-122.403774, 37.76982],
	        [-122.403881, 37.769773],
	        [-122.40396, 37.769777],
	        [-122.404047, 37.769763],
	        [-122.404138, 37.769753],
	        [-122.404306, 37.769746],
	        [-122.404433, 37.769754],
	        [-122.404995, 37.769721],
	        [-122.40572, 37.769678],
	        [-122.405801, 37.769671],
	        [-122.405881, 37.769658],
	        [-122.405959, 37.769629],
	        [-122.406034, 37.769591],
	        [-122.406127, 37.769521],
	        [-122.406226, 37.769452],
	        [-122.406398, 37.769371],
	        [-122.406544, 37.769334],
	        [-122.406725, 37.769307],
	        [-122.406882, 37.769299],
	        [-122.407461, 37.769271],
	        [-122.407888, 37.769241],
	        [-122.408334, 37.76921],
	        [-122.408436, 37.769318],
	        [-122.409766, 37.770337],
	        [-122.410904, 37.771281],
	        [-122.411287, 37.771586],
	        [-122.411897, 37.772073],
	        [-122.412834, 37.77282],
	        [-122.413763, 37.77356],
	        [-122.414368, 37.774043],
	        [-122.414921, 37.774484],
	        [-122.415384, 37.774852],
	        [-122.415916, 37.775271],
	        [-122.416447, 37.775699],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419096, 37.774706]
	      ]
	    }
	  },
	  "66-66s": {
	    "distance": 2.046592301305151,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.416539, 37.777316],
	        [-122.417385, 37.776653],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419328, 37.775112],
	        [-122.419868, 37.774685],
	        [-122.420333, 37.774413],
	        [-122.420457, 37.774336],
	        [-122.420573, 37.774251],
	        [-122.420663, 37.774181],
	        [-122.420727, 37.77413],
	        [-122.420761, 37.774296],
	        [-122.420457, 37.774336],
	        [-122.420238, 37.774338],
	        [-122.419675, 37.773892],
	        [-122.419165, 37.773478],
	        [-122.418855, 37.77322],
	        [-122.418702, 37.773081],
	        [-122.418631, 37.772841],
	        [-122.418532, 37.772961],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783],
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.418532, 37.772961],
	        [-122.418631, 37.772841],
	        [-122.418702, 37.773081],
	        [-122.418855, 37.77322],
	        [-122.419165, 37.773478],
	        [-122.419675, 37.773892],
	        [-122.420238, 37.774338],
	        [-122.420457, 37.774336],
	        [-122.420761, 37.774296],
	        [-122.420727, 37.77413],
	        [-122.420663, 37.774181],
	        [-122.420573, 37.774251],
	        [-122.420457, 37.774336],
	        [-122.420333, 37.774413],
	        [-122.419868, 37.774685],
	        [-122.419328, 37.775112],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417385, 37.776653],
	        [-122.416539, 37.777316]
	      ]
	    }
	  },
	  "66-66m": {
	    "distance": 1.832527989118305,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.417401, 37.776636],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419328, 37.775112],
	        [-122.419868, 37.774685],
	        [-122.420333, 37.774413],
	        [-122.420457, 37.774336],
	        [-122.420573, 37.774251],
	        [-122.420663, 37.774181],
	        [-122.420727, 37.77413],
	        [-122.420761, 37.774296],
	        [-122.420457, 37.774336],
	        [-122.420238, 37.774338],
	        [-122.419675, 37.773892],
	        [-122.419165, 37.773478],
	        [-122.418855, 37.77322],
	        [-122.418702, 37.773081],
	        [-122.418631, 37.772841],
	        [-122.418532, 37.772961],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783],
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.418532, 37.772961],
	        [-122.418631, 37.772841],
	        [-122.418702, 37.773081],
	        [-122.418855, 37.77322],
	        [-122.419165, 37.773478],
	        [-122.419675, 37.773892],
	        [-122.420238, 37.774338],
	        [-122.420457, 37.774336],
	        [-122.420761, 37.774296],
	        [-122.420727, 37.77413],
	        [-122.420663, 37.774181],
	        [-122.420573, 37.774251],
	        [-122.420457, 37.774336],
	        [-122.420333, 37.774413],
	        [-122.419868, 37.774685],
	        [-122.419328, 37.775112],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417401, 37.776636]
	      ]
	    }
	  },
	  "67-67s": {
	    "distance": 0.6571308506390282,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417401, 37.776636],
	        [-122.417401, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725]
	      ]
	    }
	  },
	  "67-67m": {
	    "distance": 1.5762225280307791,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.419121, 37.774783],
	        [-122.419134, 37.774833],
	        [-122.419178, 37.775041],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417305, 37.776391],
	        [-122.416923, 37.776083],
	        [-122.416526, 37.775763],
	        [-122.415323, 37.776716],
	        [-122.415742, 37.777047],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417401, 37.776636],
	        [-122.417401, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415742, 37.777047],
	        [-122.415323, 37.776716],
	        [-122.416526, 37.775763],
	        [-122.416923, 37.776083],
	        [-122.417305, 37.776391],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419178, 37.775041],
	        [-122.419134, 37.774833],
	        [-122.419121, 37.774783]
	      ]
	    }
	  },
	  "67-67l": {
	    "distance": 4.167449824287621,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400649, 37.784873],
	        [-122.401125, 37.784499],
	        [-122.401191, 37.784448],
	        [-122.401862, 37.783914],
	        [-122.402025, 37.783786],
	        [-122.402418, 37.783477],
	        [-122.402623, 37.783316],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.405723, 37.780875],
	        [-122.407162, 37.779736],
	        [-122.407705, 37.779298],
	        [-122.408275, 37.778851],
	        [-122.408839, 37.778409],
	        [-122.409388, 37.777976],
	        [-122.409945, 37.778419],
	        [-122.410401, 37.778784],
	        [-122.410944, 37.779218],
	        [-122.411484, 37.779648],
	        [-122.41194, 37.780011],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.41557, 37.778083],
	        [-122.415948, 37.777784],
	        [-122.416311, 37.777496],
	        [-122.416539, 37.777316],
	        [-122.417401, 37.776636],
	        [-122.417401, 37.776636],
	        [-122.416539, 37.777316],
	        [-122.416311, 37.777496],
	        [-122.415948, 37.777784],
	        [-122.41557, 37.778083],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.41194, 37.780011],
	        [-122.411484, 37.779648],
	        [-122.410944, 37.779218],
	        [-122.410401, 37.778784],
	        [-122.409945, 37.778419],
	        [-122.409388, 37.777976],
	        [-122.408839, 37.778409],
	        [-122.408275, 37.778851],
	        [-122.407705, 37.779298],
	        [-122.407162, 37.779736],
	        [-122.405723, 37.780875],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.402623, 37.783316],
	        [-122.402418, 37.783477],
	        [-122.402025, 37.783786],
	        [-122.401862, 37.783914],
	        [-122.401191, 37.784448],
	        [-122.401125, 37.784499],
	        [-122.400649, 37.784873]
	      ]
	    }
	  },
	  "68-68s": {
	    "distance": 3.866729849597509,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401998, 37.788702],
	        [-122.401948, 37.788626],
	        [-122.40151, 37.788269],
	        [-122.401043, 37.78789],
	        [-122.400821, 37.787704],
	        [-122.400508, 37.787455],
	        [-122.399975, 37.787011],
	        [-122.399502, 37.786634],
	        [-122.398984, 37.786206],
	        [-122.399379, 37.785887],
	        [-122.399883, 37.785477],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731],
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399883, 37.785477],
	        [-122.399379, 37.785887],
	        [-122.398984, 37.786206],
	        [-122.399502, 37.786634],
	        [-122.399975, 37.787011],
	        [-122.400508, 37.787455],
	        [-122.400821, 37.787704],
	        [-122.401043, 37.78789],
	        [-122.40151, 37.788269],
	        [-122.401948, 37.788626],
	        [-122.401998, 37.788702],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488]
	      ]
	    }
	  },
	  "68-68m": {
	    "distance": 2.027163958382668,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405198, 37.781695],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.401175, 37.782025],
	        [-122.401004, 37.782162],
	        [-122.4007, 37.7824],
	        [-122.400382, 37.782651],
	        [-122.399117, 37.78365],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731],
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.399117, 37.78365],
	        [-122.400382, 37.782651],
	        [-122.4007, 37.7824],
	        [-122.401004, 37.782162],
	        [-122.401175, 37.782025],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.405198, 37.781695]
	      ]
	    }
	  },
	  "68-68l": {
	    "distance": 3.142378118021179,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.396543, 37.778333],
	        [-122.396201, 37.778602],
	        [-122.396072, 37.778704],
	        [-122.395955, 37.778796],
	        [-122.39538, 37.779249],
	        [-122.395322, 37.779295],
	        [-122.394847, 37.779673],
	        [-122.394316, 37.780094],
	        [-122.394636, 37.780349],
	        [-122.395087, 37.780709],
	        [-122.395198, 37.780798],
	        [-122.395532, 37.781065],
	        [-122.395859, 37.781326],
	        [-122.396402, 37.781759],
	        [-122.396846, 37.782114],
	        [-122.3974, 37.782556],
	        [-122.397953, 37.782997],
	        [-122.398745, 37.783629],
	        [-122.398943, 37.783787],
	        [-122.399473, 37.78421],
	        [-122.399989, 37.784623],
	        [-122.400476, 37.785012],
	        [-122.400649, 37.784873],
	        [-122.40083, 37.784731],
	        [-122.40083, 37.784731],
	        [-122.400649, 37.784873],
	        [-122.400476, 37.785012],
	        [-122.399989, 37.784623],
	        [-122.399473, 37.78421],
	        [-122.398943, 37.783787],
	        [-122.398745, 37.783629],
	        [-122.397953, 37.782997],
	        [-122.3974, 37.782556],
	        [-122.396846, 37.782114],
	        [-122.396402, 37.781759],
	        [-122.395859, 37.781326],
	        [-122.395532, 37.781065],
	        [-122.395198, 37.780798],
	        [-122.395087, 37.780709],
	        [-122.394636, 37.780349],
	        [-122.394316, 37.780094],
	        [-122.394847, 37.779673],
	        [-122.395322, 37.779295],
	        [-122.39538, 37.779249],
	        [-122.395955, 37.778796],
	        [-122.396072, 37.778704],
	        [-122.396201, 37.778602],
	        [-122.396543, 37.778333],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421]
	      ]
	    }
	  },
	  "69-69s": {
	    "distance": 0,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395999, 37.776313],
	        [-122.395999, 37.776313],
	        [-122.395999, 37.776313],
	        [-122.395999, 37.776313]
	      ]
	    }
	  },
	  "69-69m": {
	    "distance": 1.6617749163921558,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395999, 37.776313],
	        [-122.395999, 37.776313],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "70-70s": {
	    "distance": 1.2984426176177988,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390544, 37.780607],
	        [-122.390632, 37.780548],
	        [-122.39108, 37.780194],
	        [-122.391662, 37.779735],
	        [-122.392231, 37.779287],
	        [-122.392679, 37.778932],
	        [-122.392764, 37.778855],
	        [-122.393294, 37.778437],
	        [-122.393556, 37.778231],
	        [-122.39389, 37.777968],
	        [-122.393949, 37.777922],
	        [-122.394274, 37.777667],
	        [-122.394797, 37.777255],
	        [-122.394887, 37.777183],
	        [-122.394994, 37.7771],
	        [-122.395088, 37.777032],
	        [-122.395777, 37.776487],
	        [-122.395777, 37.776487],
	        [-122.395088, 37.777032],
	        [-122.394994, 37.7771],
	        [-122.394887, 37.777183],
	        [-122.394797, 37.777255],
	        [-122.394274, 37.777667],
	        [-122.393949, 37.777922],
	        [-122.39389, 37.777968],
	        [-122.393556, 37.778231],
	        [-122.393294, 37.778437],
	        [-122.392764, 37.778855],
	        [-122.392679, 37.778932],
	        [-122.392231, 37.779287],
	        [-122.391662, 37.779735],
	        [-122.39108, 37.780194],
	        [-122.390632, 37.780548],
	        [-122.390544, 37.780607]
	      ]
	    }
	  },
	  "69-69l": {
	    "distance": 4.552342023103179,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.407866, 37.785495],
	        [-122.407789, 37.785505],
	        [-122.406229, 37.785713],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395999, 37.776313],
	        [-122.395999, 37.776313],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.406229, 37.785713],
	        [-122.407789, 37.785505],
	        [-122.407866, 37.785495],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829]
	      ]
	    }
	  },
	  "70-70m": {
	    "distance": 1.716730804038427,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.402675, 37.771024],
	        [-122.401757, 37.771759],
	        [-122.401678, 37.771828],
	        [-122.401602, 37.771905],
	        [-122.40125, 37.772178],
	        [-122.401182, 37.772232],
	        [-122.401112, 37.772291],
	        [-122.399417, 37.773623],
	        [-122.399365, 37.773667],
	        [-122.397326, 37.775272],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395777, 37.776487],
	        [-122.395777, 37.776487],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397326, 37.775272],
	        [-122.399365, 37.773667],
	        [-122.399417, 37.773623],
	        [-122.401112, 37.772291],
	        [-122.401182, 37.772232],
	        [-122.40125, 37.772178],
	        [-122.401602, 37.771905],
	        [-122.401678, 37.771828],
	        [-122.401757, 37.771759],
	        [-122.402675, 37.771024]
	      ]
	    }
	  },
	  "70-70l": {
	    "distance": 4.607297910749451,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.407866, 37.785495],
	        [-122.407789, 37.785505],
	        [-122.406229, 37.785713],
	        [-122.405916, 37.785713],
	        [-122.40577, 37.785699],
	        [-122.40569, 37.785658],
	        [-122.405236, 37.785296],
	        [-122.404781, 37.784935],
	        [-122.404256, 37.784489],
	        [-122.403734, 37.784073],
	        [-122.403405, 37.78381],
	        [-122.402707, 37.78325],
	        [-122.403299, 37.782776],
	        [-122.404941, 37.781493],
	        [-122.404411, 37.78107],
	        [-122.403935, 37.780691],
	        [-122.403403, 37.780266],
	        [-122.403286, 37.780173],
	        [-122.403222, 37.780122],
	        [-122.40314, 37.780058],
	        [-122.403034, 37.779972],
	        [-122.402847, 37.779824],
	        [-122.402717, 37.77972],
	        [-122.402537, 37.779576],
	        [-122.402383, 37.779454],
	        [-122.401857, 37.779035],
	        [-122.40132, 37.778607],
	        [-122.400842, 37.778226],
	        [-122.400313, 37.777804],
	        [-122.399767, 37.777368],
	        [-122.39967, 37.777292],
	        [-122.399534, 37.777183],
	        [-122.398769, 37.776574],
	        [-122.397997, 37.775958],
	        [-122.397334, 37.775426],
	        [-122.397227, 37.775345],
	        [-122.397136, 37.775421],
	        [-122.395777, 37.776487],
	        [-122.395777, 37.776487],
	        [-122.397136, 37.775421],
	        [-122.397227, 37.775345],
	        [-122.397334, 37.775426],
	        [-122.397997, 37.775958],
	        [-122.398769, 37.776574],
	        [-122.399534, 37.777183],
	        [-122.39967, 37.777292],
	        [-122.399767, 37.777368],
	        [-122.400313, 37.777804],
	        [-122.400842, 37.778226],
	        [-122.40132, 37.778607],
	        [-122.401857, 37.779035],
	        [-122.402383, 37.779454],
	        [-122.402537, 37.779576],
	        [-122.402717, 37.77972],
	        [-122.402847, 37.779824],
	        [-122.403034, 37.779972],
	        [-122.40314, 37.780058],
	        [-122.403222, 37.780122],
	        [-122.403286, 37.780173],
	        [-122.403403, 37.780266],
	        [-122.403935, 37.780691],
	        [-122.404411, 37.78107],
	        [-122.404941, 37.781493],
	        [-122.403299, 37.782776],
	        [-122.402707, 37.78325],
	        [-122.403405, 37.78381],
	        [-122.403734, 37.784073],
	        [-122.404256, 37.784489],
	        [-122.404781, 37.784935],
	        [-122.405236, 37.785296],
	        [-122.40569, 37.785658],
	        [-122.40577, 37.785699],
	        [-122.405916, 37.785713],
	        [-122.406229, 37.785713],
	        [-122.407789, 37.785505],
	        [-122.407866, 37.785495],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829]
	      ]
	    }
	  },
	  "71-71s": {
	    "distance": 2.558621404424227,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.410138, 37.782111],
	        [-122.409703, 37.781763],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788451],
	        [-122.408451, 37.788451],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.409703, 37.781763],
	        [-122.410138, 37.782111],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488]
	      ]
	    }
	  },
	  "72-72m": {
	    "distance": 1.3743668500880457,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418587, 37.781262],
	        [-122.417147, 37.781446],
	        [-122.416799, 37.781491],
	        [-122.416341, 37.781549],
	        [-122.415505, 37.781654],
	        [-122.415322, 37.780711],
	        [-122.414484, 37.780824],
	        [-122.413675, 37.780932],
	        [-122.41358, 37.780943],
	        [-122.413148, 37.780994],
	        [-122.412635, 37.780575],
	        [-122.412528, 37.780488],
	        [-122.412807, 37.780266],
	        [-122.412807, 37.780266],
	        [-122.412528, 37.780488],
	        [-122.412635, 37.780575],
	        [-122.413148, 37.780994],
	        [-122.41358, 37.780943],
	        [-122.413675, 37.780932],
	        [-122.414484, 37.780824],
	        [-122.415322, 37.780711],
	        [-122.415505, 37.781654],
	        [-122.416341, 37.781549],
	        [-122.416799, 37.781491],
	        [-122.417147, 37.781446],
	        [-122.418587, 37.781262]
	      ]
	    }
	  },
	  "72-72s": {
	    "distance": 1.7129958729583628,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412807, 37.780266],
	        [-122.412807, 37.780266],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713]
	      ]
	    }
	  },
	  "71-71m": {
	    "distance": 2.038005018367924,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.40871, 37.783508],
	        [-122.408802, 37.78347],
	        [-122.408849, 37.783458],
	        [-122.409144, 37.78342],
	        [-122.410765, 37.783214],
	        [-122.410953, 37.784148],
	        [-122.41114, 37.785075],
	        [-122.411334, 37.78601],
	        [-122.411516, 37.78694],
	        [-122.411572, 37.78722],
	        [-122.411642, 37.787567],
	        [-122.411699, 37.787873],
	        [-122.410071, 37.78808],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788451],
	        [-122.408451, 37.788451],
	        [-122.408415, 37.78829],
	        [-122.410071, 37.78808],
	        [-122.411699, 37.787873],
	        [-122.411642, 37.787567],
	        [-122.411572, 37.78722],
	        [-122.411516, 37.78694],
	        [-122.411334, 37.78601],
	        [-122.41114, 37.785075],
	        [-122.410953, 37.784148],
	        [-122.410765, 37.783214],
	        [-122.409144, 37.78342],
	        [-122.408849, 37.783458],
	        [-122.408802, 37.78347],
	        [-122.40871, 37.783508]
	      ]
	    }
	  },
	  "72-72l": {
	    "distance": 4.498008127666101,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412807, 37.780266],
	        [-122.412807, 37.780266],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384]
	      ]
	    }
	  },
	  "73-73s": {
	    "distance": 1.2100484387040424,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401166, 37.798566],
	        [-122.402226, 37.798431],
	        [-122.403085, 37.798321],
	        [-122.403535, 37.798258],
	        [-122.40386, 37.79822],
	        [-122.40469, 37.798116],
	        [-122.405489, 37.798016],
	        [-122.406256, 37.79792],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798525],
	        [-122.407172, 37.798525],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406256, 37.79792],
	        [-122.405489, 37.798016],
	        [-122.40469, 37.798116],
	        [-122.40386, 37.79822],
	        [-122.403535, 37.798258],
	        [-122.403085, 37.798321],
	        [-122.402226, 37.798431],
	        [-122.401166, 37.798566],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591]
	      ]
	    }
	  },
	  "73-73m": {
	    "distance": 0.915777379921193,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404754, 37.795349],
	        [-122.404971, 37.795325],
	        [-122.40515, 37.796218],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798525],
	        [-122.407172, 37.798525],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.40515, 37.796218],
	        [-122.404971, 37.795325],
	        [-122.404754, 37.795349]
	      ]
	    }
	  },
	  "74-74s": {
	    "distance": 0.9600838773829852,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165],
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734]
	      ]
	    }
	  },
	  "73-73l": {
	    "distance": 3.2718466418426706,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396332, 37.79345],
	        [-122.396323, 37.793497],
	        [-122.396325, 37.793549],
	        [-122.396349, 37.793682],
	        [-122.396382, 37.793838],
	        [-122.396533, 37.794545],
	        [-122.396543, 37.794592],
	        [-122.396554, 37.794658],
	        [-122.396611, 37.795014],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.40412, 37.796083],
	        [-122.404422, 37.79631],
	        [-122.404507, 37.796369],
	        [-122.405295, 37.796902],
	        [-122.405535, 37.797071],
	        [-122.406182, 37.797516],
	        [-122.406209, 37.797581],
	        [-122.406635, 37.797873],
	        [-122.40698, 37.798113],
	        [-122.407075, 37.79813],
	        [-122.407216, 37.798228],
	        [-122.407154, 37.798308],
	        [-122.407145, 37.798352],
	        [-122.407172, 37.798525],
	        [-122.407172, 37.798525],
	        [-122.407145, 37.798352],
	        [-122.407154, 37.798308],
	        [-122.407216, 37.798228],
	        [-122.407075, 37.79813],
	        [-122.40698, 37.798113],
	        [-122.406635, 37.797873],
	        [-122.406209, 37.797581],
	        [-122.406182, 37.797516],
	        [-122.405535, 37.797071],
	        [-122.405295, 37.796902],
	        [-122.404507, 37.796369],
	        [-122.404422, 37.79631],
	        [-122.40412, 37.796083],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396611, 37.795014],
	        [-122.396554, 37.794658],
	        [-122.396543, 37.794592],
	        [-122.396533, 37.794545],
	        [-122.396382, 37.793838],
	        [-122.396349, 37.793682],
	        [-122.396325, 37.793549],
	        [-122.396323, 37.793497],
	        [-122.396332, 37.79345],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384]
	      ]
	    }
	  },
	  "74-74m": {
	    "distance": 2.333772487026762,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.390335, 37.789569],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.390321, 37.788151],
	        [-122.391857, 37.789385],
	        [-122.391908, 37.789426],
	        [-122.392891, 37.790206],
	        [-122.393405, 37.790614],
	        [-122.393835, 37.790958],
	        [-122.394165, 37.791222],
	        [-122.394951, 37.791852],
	        [-122.394077, 37.792542],
	        [-122.393203, 37.793241],
	        [-122.393342, 37.793313],
	        [-122.393916, 37.793774],
	        [-122.394399, 37.794165],
	        [-122.394399, 37.794165],
	        [-122.393916, 37.793774],
	        [-122.393342, 37.793313],
	        [-122.393203, 37.793241],
	        [-122.394077, 37.792542],
	        [-122.394951, 37.791852],
	        [-122.394165, 37.791222],
	        [-122.393835, 37.790958],
	        [-122.393405, 37.790614],
	        [-122.392891, 37.790206],
	        [-122.391908, 37.789426],
	        [-122.391857, 37.789385],
	        [-122.390321, 37.788151],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390335, 37.789569]
	      ]
	    }
	  },
	  "75-75m": {
	    "distance": 1.1207514330878308,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.398942, 37.791222],
	        [-122.398942, 37.791222],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165]
	      ]
	    }
	  },
	  "75-75s": {
	    "distance": 1.407156751192936,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398942, 37.791222],
	        [-122.398942, 37.791222],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749]
	      ]
	    }
	  },
	  "76-76s": {
	    "distance": 0.9146262000891374,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283]
	      ]
	    }
	  },
	  "77-77s": {
	    "distance": 1.7244248396242374,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.397872, 37.794791],
	        [-122.397792, 37.794428],
	        [-122.397613, 37.793534],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684],
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.397613, 37.793534],
	        [-122.397792, 37.794428],
	        [-122.397872, 37.794791],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952]
	      ]
	    }
	  },
	  "76-76m": {
	    "distance": 1.921242586269352,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412807, 37.780266],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.412807, 37.780266]
	      ]
	    }
	  },
	  "77-77m": {
	    "distance": 1.8518898335023732,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.408344, 37.7838],
	        [-122.40809, 37.783999],
	        [-122.407934, 37.784122],
	        [-122.407357, 37.784576],
	        [-122.405916, 37.785713],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400888, 37.789684],
	        [-122.400888, 37.789684],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405916, 37.785713],
	        [-122.407357, 37.784576],
	        [-122.407934, 37.784122],
	        [-122.40809, 37.783999],
	        [-122.408344, 37.7838]
	      ]
	    }
	  },
	  "77-77l": {
	    "distance": 2.286752956663971,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.399986, 37.79871],
	        [-122.400962, 37.798591],
	        [-122.401052, 37.79858],
	        [-122.401034, 37.798492],
	        [-122.401013, 37.798391],
	        [-122.400874, 37.797662],
	        [-122.400693, 37.796782],
	        [-122.400492, 37.795867],
	        [-122.400413, 37.795448],
	        [-122.400335, 37.795029],
	        [-122.400226, 37.794547],
	        [-122.400141, 37.794129],
	        [-122.40006, 37.793693],
	        [-122.399959, 37.793209],
	        [-122.399763, 37.792258],
	        [-122.399589, 37.791411],
	        [-122.399572, 37.791327],
	        [-122.399608, 37.791203],
	        [-122.399557, 37.790909],
	        [-122.399541, 37.790817],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.400888, 37.789684],
	        [-122.400888, 37.789684],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399541, 37.790817],
	        [-122.399557, 37.790909],
	        [-122.399608, 37.791203],
	        [-122.399572, 37.791327],
	        [-122.399589, 37.791411],
	        [-122.399763, 37.792258],
	        [-122.399959, 37.793209],
	        [-122.40006, 37.793693],
	        [-122.400141, 37.794129],
	        [-122.400226, 37.794547],
	        [-122.400335, 37.795029],
	        [-122.400413, 37.795448],
	        [-122.400492, 37.795867],
	        [-122.400693, 37.796782],
	        [-122.400874, 37.797662],
	        [-122.401013, 37.798391],
	        [-122.401034, 37.798492],
	        [-122.401052, 37.79858],
	        [-122.400962, 37.798591],
	        [-122.399986, 37.79871]
	      ]
	    }
	  },
	  "82-82s": {
	    "distance": 0.7371823763521788,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400879, 37.798602],
	        [-122.400879, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337]
	      ]
	    }
	  },
	  "82-82m": {
	    "distance": 1.3017304645334833,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400879, 37.798602],
	        [-122.400879, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966]
	      ]
	    }
	  },
	  "46-46l": {
	    "distance": 2.249603012429865,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.400335, 37.795029],
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396979, 37.796344],
	        [-122.398168, 37.796167],
	        [-122.398587, 37.796104],
	        [-122.400492, 37.795867],
	        [-122.40111, 37.795793],
	        [-122.401674, 37.795719],
	        [-122.40238, 37.795641],
	        [-122.402741, 37.795597],
	        [-122.403321, 37.795531],
	        [-122.404754, 37.795349],
	        [-122.404754, 37.795349],
	        [-122.403321, 37.795531],
	        [-122.402741, 37.795597],
	        [-122.40238, 37.795641],
	        [-122.401674, 37.795719],
	        [-122.40111, 37.795793],
	        [-122.400492, 37.795867],
	        [-122.398587, 37.796104],
	        [-122.398168, 37.796167],
	        [-122.396979, 37.796344],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952],
	        [-122.400335, 37.795029]
	      ]
	    }
	  },
	  "54-54l": {
	    "distance": 2.052585680811126,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.394704, 37.789581],
	        [-122.394277, 37.78992],
	        [-122.393437, 37.790589],
	        [-122.392944, 37.790979],
	        [-122.392525, 37.79131],
	        [-122.391972, 37.79087],
	        [-122.390979, 37.790082],
	        [-122.390077, 37.789366],
	        [-122.38943, 37.788852],
	        [-122.388628, 37.789488],
	        [-122.388529, 37.789374],
	        [-122.388428, 37.789232],
	        [-122.388339, 37.789072],
	        [-122.388281, 37.788931],
	        [-122.388236, 37.788787],
	        [-122.388084, 37.788205],
	        [-122.388052, 37.78805],
	        [-122.388029, 37.787905],
	        [-122.388013, 37.787756],
	        [-122.388008, 37.787618],
	        [-122.388008, 37.787477],
	        [-122.388015, 37.787333],
	        [-122.388027, 37.787198],
	        [-122.388026, 37.787152],
	        [-122.388026, 37.787152],
	        [-122.388027, 37.787198],
	        [-122.388015, 37.787333],
	        [-122.388008, 37.787477],
	        [-122.388008, 37.787618],
	        [-122.388013, 37.787756],
	        [-122.388029, 37.787905],
	        [-122.388052, 37.78805],
	        [-122.388084, 37.788205],
	        [-122.388236, 37.788787],
	        [-122.388281, 37.788931],
	        [-122.388339, 37.789072],
	        [-122.388428, 37.789232],
	        [-122.388529, 37.789374],
	        [-122.388628, 37.789488],
	        [-122.38943, 37.788852],
	        [-122.390077, 37.789366],
	        [-122.390979, 37.790082],
	        [-122.391972, 37.79087],
	        [-122.392525, 37.79131],
	        [-122.392944, 37.790979],
	        [-122.393437, 37.790589],
	        [-122.394277, 37.78992],
	        [-122.394704, 37.789581]
	      ]
	    }
	  },
	  "82-82l": {
	    "distance": 1.8421558933463955,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.399164, 37.7952],
	        [-122.398305, 37.795312],
	        [-122.398123, 37.795329],
	        [-122.397985, 37.795319],
	        [-122.396834, 37.795467],
	        [-122.396716, 37.795506],
	        [-122.396747, 37.795676],
	        [-122.396804, 37.795966],
	        [-122.396855, 37.796233],
	        [-122.396852, 37.796307],
	        [-122.396908, 37.796396],
	        [-122.396961, 37.796527],
	        [-122.397021, 37.796601],
	        [-122.397137, 37.797247],
	        [-122.397198, 37.797239],
	        [-122.398341, 37.797088],
	        [-122.398395, 37.797337],
	        [-122.39852, 37.797948],
	        [-122.398685, 37.798789],
	        [-122.398704, 37.79889],
	        [-122.398808, 37.798875],
	        [-122.39978, 37.798737],
	        [-122.39987, 37.798724],
	        [-122.399986, 37.79871],
	        [-122.400879, 37.798602],
	        [-122.400879, 37.798602],
	        [-122.399986, 37.79871],
	        [-122.39987, 37.798724],
	        [-122.39978, 37.798737],
	        [-122.398808, 37.798875],
	        [-122.398704, 37.79889],
	        [-122.398685, 37.798789],
	        [-122.39852, 37.797948],
	        [-122.398395, 37.797337],
	        [-122.398341, 37.797088],
	        [-122.397198, 37.797239],
	        [-122.397137, 37.797247],
	        [-122.397021, 37.796601],
	        [-122.396961, 37.796527],
	        [-122.396908, 37.796396],
	        [-122.396852, 37.796307],
	        [-122.396855, 37.796233],
	        [-122.396804, 37.795966],
	        [-122.396747, 37.795676],
	        [-122.396716, 37.795506],
	        [-122.396834, 37.795467],
	        [-122.397985, 37.795319],
	        [-122.398123, 37.795329],
	        [-122.398305, 37.795312],
	        [-122.399164, 37.7952]
	      ]
	    }
	  },
	  "57-57l": {
	    "distance": 3.0114935196001973,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.418229, 37.778444],
	        [-122.416764, 37.778631],
	        [-122.416579, 37.778655],
	        [-122.415057, 37.778849],
	        [-122.414921, 37.778867],
	        [-122.414757, 37.778725],
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.409099, 37.783201],
	        [-122.40871, 37.783508],
	        [-122.408397, 37.783756],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.407199, 37.783287],
	        [-122.407035, 37.783156],
	        [-122.406495, 37.782729],
	        [-122.405961, 37.782305],
	        [-122.405487, 37.781927],
	        [-122.405198, 37.781695],
	        [-122.405198, 37.781695],
	        [-122.405487, 37.781927],
	        [-122.405961, 37.782305],
	        [-122.406495, 37.782729],
	        [-122.407035, 37.783156],
	        [-122.407199, 37.783287],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408397, 37.783756],
	        [-122.40871, 37.783508],
	        [-122.409099, 37.783201],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488],
	        [-122.414757, 37.778725],
	        [-122.414921, 37.778867],
	        [-122.415057, 37.778849],
	        [-122.416579, 37.778655],
	        [-122.416764, 37.778631],
	        [-122.418229, 37.778444]
	      ]
	    }
	  },
	  "58-58l": {
	    "distance": 1.592915866490774,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.4188, 37.781236],
	        [-122.417147, 37.781446],
	        [-122.417337, 37.782379],
	        [-122.41899, 37.782169],
	        [-122.418896, 37.781705],
	        [-122.4188, 37.781236],
	        [-122.418706, 37.780773],
	        [-122.418628, 37.780392],
	        [-122.418604, 37.780272],
	        [-122.418567, 37.780129],
	        [-122.418419, 37.779388],
	        [-122.418274, 37.778643],
	        [-122.418274, 37.778643],
	        [-122.418419, 37.779388],
	        [-122.418567, 37.780129],
	        [-122.418604, 37.780272],
	        [-122.418628, 37.780392],
	        [-122.418706, 37.780773],
	        [-122.4188, 37.781236],
	        [-122.418896, 37.781705],
	        [-122.41899, 37.782169],
	        [-122.417337, 37.782379],
	        [-122.417147, 37.781446],
	        [-122.4188, 37.781236]
	      ]
	    }
	  },
	  "61-61l": {
	    "distance": 1.3879365579606615,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484],
	        [-122.392615, 37.782284],
	        [-122.392176, 37.781931],
	        [-122.392084, 37.781857],
	        [-122.391994, 37.781785],
	        [-122.390544, 37.780607],
	        [-122.390366, 37.780468],
	        [-122.390366, 37.780468],
	        [-122.390544, 37.780607],
	        [-122.391994, 37.781785],
	        [-122.392084, 37.781857],
	        [-122.392176, 37.781931],
	        [-122.392615, 37.782284],
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905]
	      ]
	    }
	  },
	  "66-66l": {
	    "distance": 2.046592301305151,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.416539, 37.777316],
	        [-122.417385, 37.776653],
	        [-122.417533, 37.776537],
	        [-122.41773, 37.776378],
	        [-122.418719, 37.775594],
	        [-122.419018, 37.775357],
	        [-122.419214, 37.775202],
	        [-122.419328, 37.775112],
	        [-122.419868, 37.774685],
	        [-122.420333, 37.774413],
	        [-122.420457, 37.774336],
	        [-122.420573, 37.774251],
	        [-122.420663, 37.774181],
	        [-122.420727, 37.77413],
	        [-122.420761, 37.774296],
	        [-122.420457, 37.774336],
	        [-122.420238, 37.774338],
	        [-122.419675, 37.773892],
	        [-122.419165, 37.773478],
	        [-122.418855, 37.77322],
	        [-122.418702, 37.773081],
	        [-122.418631, 37.772841],
	        [-122.418532, 37.772961],
	        [-122.418594, 37.77317],
	        [-122.419096, 37.774706],
	        [-122.419121, 37.774783],
	        [-122.419121, 37.774783],
	        [-122.419096, 37.774706],
	        [-122.418594, 37.77317],
	        [-122.418532, 37.772961],
	        [-122.418631, 37.772841],
	        [-122.418702, 37.773081],
	        [-122.418855, 37.77322],
	        [-122.419165, 37.773478],
	        [-122.419675, 37.773892],
	        [-122.420238, 37.774338],
	        [-122.420457, 37.774336],
	        [-122.420761, 37.774296],
	        [-122.420727, 37.77413],
	        [-122.420663, 37.774181],
	        [-122.420573, 37.774251],
	        [-122.420457, 37.774336],
	        [-122.420333, 37.774413],
	        [-122.419868, 37.774685],
	        [-122.419328, 37.775112],
	        [-122.419214, 37.775202],
	        [-122.419018, 37.775357],
	        [-122.418719, 37.775594],
	        [-122.41773, 37.776378],
	        [-122.417533, 37.776537],
	        [-122.417385, 37.776653],
	        [-122.416539, 37.777316]
	      ]
	    }
	  },
	  "63-63l": {
	    "distance": 3.1761795488069295,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.392864, 37.782484],
	        [-122.392923, 37.782532],
	        [-122.39309, 37.782666],
	        [-122.3933, 37.782834],
	        [-122.39362, 37.783091],
	        [-122.394169, 37.783522],
	        [-122.394865, 37.784067],
	        [-122.395178, 37.784312],
	        [-122.395919, 37.784905],
	        [-122.396719, 37.785543],
	        [-122.39724, 37.785959],
	        [-122.397709, 37.786334],
	        [-122.398258, 37.786773],
	        [-122.398818, 37.787219],
	        [-122.399265, 37.787577],
	        [-122.399805, 37.788009],
	        [-122.399362, 37.788357],
	        [-122.399058, 37.788596],
	        [-122.398936, 37.788692],
	        [-122.398566, 37.788983],
	        [-122.398317, 37.789178],
	        [-122.398078, 37.789366],
	        [-122.397564, 37.789771],
	        [-122.397175, 37.78946],
	        [-122.397043, 37.789352],
	        [-122.396566, 37.788971],
	        [-122.396028, 37.788542],
	        [-122.396484, 37.788179],
	        [-122.396721, 37.787989],
	        [-122.397485, 37.78738],
	        [-122.397937, 37.787027],
	        [-122.398054, 37.786932],
	        [-122.398054, 37.786932],
	        [-122.397937, 37.787027],
	        [-122.397485, 37.78738],
	        [-122.396721, 37.787989],
	        [-122.396484, 37.788179],
	        [-122.396028, 37.788542],
	        [-122.396566, 37.788971],
	        [-122.397043, 37.789352],
	        [-122.397175, 37.78946],
	        [-122.397564, 37.789771],
	        [-122.398078, 37.789366],
	        [-122.398317, 37.789178],
	        [-122.398566, 37.788983],
	        [-122.398936, 37.788692],
	        [-122.399058, 37.788596],
	        [-122.399362, 37.788357],
	        [-122.399805, 37.788009],
	        [-122.399265, 37.787577],
	        [-122.398818, 37.787219],
	        [-122.398258, 37.786773],
	        [-122.397709, 37.786334],
	        [-122.39724, 37.785959],
	        [-122.396719, 37.785543],
	        [-122.395919, 37.784905],
	        [-122.395178, 37.784312],
	        [-122.394865, 37.784067],
	        [-122.394169, 37.783522],
	        [-122.39362, 37.783091],
	        [-122.3933, 37.782834],
	        [-122.39309, 37.782666],
	        [-122.392923, 37.782532],
	        [-122.392864, 37.782484]
	      ]
	    }
	  },
	  "71-71l": {
	    "distance": 2.558621404424227,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.412528, 37.780488],
	        [-122.411978, 37.780923],
	        [-122.411603, 37.781218],
	        [-122.410355, 37.782206],
	        [-122.410138, 37.782111],
	        [-122.409703, 37.781763],
	        [-122.407494, 37.783521],
	        [-122.40809, 37.783999],
	        [-122.408207, 37.784092],
	        [-122.408459, 37.784306],
	        [-122.40851, 37.784397],
	        [-122.408525, 37.78446],
	        [-122.408538, 37.784536],
	        [-122.408678, 37.785392],
	        [-122.408697, 37.785481],
	        [-122.408723, 37.785545],
	        [-122.408843, 37.785847],
	        [-122.408951, 37.786313],
	        [-122.408052, 37.786428],
	        [-122.408234, 37.787372],
	        [-122.408328, 37.787826],
	        [-122.408398, 37.788211],
	        [-122.408415, 37.78829],
	        [-122.408451, 37.788451],
	        [-122.408451, 37.788451],
	        [-122.408415, 37.78829],
	        [-122.408398, 37.788211],
	        [-122.408328, 37.787826],
	        [-122.408234, 37.787372],
	        [-122.408052, 37.786428],
	        [-122.408951, 37.786313],
	        [-122.408843, 37.785847],
	        [-122.408723, 37.785545],
	        [-122.408697, 37.785481],
	        [-122.408678, 37.785392],
	        [-122.408538, 37.784536],
	        [-122.408525, 37.78446],
	        [-122.40851, 37.784397],
	        [-122.408459, 37.784306],
	        [-122.408207, 37.784092],
	        [-122.40809, 37.783999],
	        [-122.407494, 37.783521],
	        [-122.409703, 37.781763],
	        [-122.410138, 37.782111],
	        [-122.410355, 37.782206],
	        [-122.411603, 37.781218],
	        [-122.411978, 37.780923],
	        [-122.412528, 37.780488]
	      ]
	    }
	  },
	  "74-74l": {
	    "distance": 0.9600838773829852,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.398297, 37.791734],
	        [-122.397403, 37.79244],
	        [-122.396537, 37.793125],
	        [-122.396425, 37.793225],
	        [-122.396272, 37.793364],
	        [-122.396176, 37.793446],
	        [-122.395694, 37.793826],
	        [-122.394952, 37.794409],
	        [-122.394844, 37.794449],
	        [-122.394767, 37.794438],
	        [-122.394675, 37.794384],
	        [-122.394399, 37.794165],
	        [-122.394399, 37.794165],
	        [-122.394675, 37.794384],
	        [-122.394767, 37.794438],
	        [-122.394844, 37.794449],
	        [-122.394952, 37.794409],
	        [-122.395694, 37.793826],
	        [-122.396176, 37.793446],
	        [-122.396272, 37.793364],
	        [-122.396425, 37.793225],
	        [-122.396537, 37.793125],
	        [-122.397403, 37.79244],
	        [-122.398297, 37.791734]
	      ]
	    }
	  },
	  "75-75l": {
	    "distance": 1.407156751192936,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283],
	        [-122.400379, 37.790088],
	        [-122.400096, 37.790312],
	        [-122.39994, 37.790435],
	        [-122.399571, 37.790727],
	        [-122.399315, 37.790929],
	        [-122.399162, 37.79105],
	        [-122.399041, 37.791146],
	        [-122.398942, 37.791222],
	        [-122.398942, 37.791222],
	        [-122.399041, 37.791146],
	        [-122.399162, 37.79105],
	        [-122.399315, 37.790929],
	        [-122.399571, 37.790727],
	        [-122.39994, 37.790435],
	        [-122.400096, 37.790312],
	        [-122.400379, 37.790088],
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749]
	      ]
	    }
	  },
	  "76-76l": {
	    "distance": 0.9146262000891374,
	    "geometry": {
	      "type": "LineString",
	      "coordinates": [
	        [-122.401398, 37.789283],
	        [-122.401863, 37.788917],
	        [-122.402007, 37.788802],
	        [-122.402128, 37.788706],
	        [-122.402905, 37.788093],
	        [-122.402986, 37.788029],
	        [-122.403436, 37.787675],
	        [-122.404605, 37.786749],
	        [-122.405078, 37.786375],
	        [-122.405078, 37.786375],
	        [-122.404605, 37.786749],
	        [-122.403436, 37.787675],
	        [-122.402986, 37.788029],
	        [-122.402905, 37.788093],
	        [-122.402128, 37.788706],
	        [-122.402007, 37.788802],
	        [-122.401863, 37.788917],
	        [-122.401398, 37.789283]
	      ]
	    }
	  }
	};

	module.exports = bikeRoutes;

/***/ },
/* 231 */
/***/ function(module, exports) {

	var Docks = function(){
	  this.docksJson = {
	    "type": "idCollection",
	    "features": [{
	      "properties": {
	        "id": 41,
	        "name": "Clay at Battery",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.39997, 37.795001]
	      }
	    }, {
	      "properties": {
	        "id": 42,
	        "name": "Davis at Jackson",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.398436, 37.79728]
	      }
	    }, {
	      "properties": {
	        "id": 45,
	        "name": "Commercial at Montgomery",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.402923, 37.794231]
	      }
	    }, {
	      "properties": {
	        "id": 46,
	        "name": "Washington at Kearney",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.404767, 37.795425]
	      }
	    }, {
	      "properties": {
	        "id": 47,
	        "name": "Post at Kearney",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.403452, 37.788975]
	      }
	    }, {
	      "properties": {
	        "id": 48,
	        "name": "Embarcadero at Vallejo",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.398525, 37.799953]
	      }
	    }, {
	      "properties": {
	        "id": 49,
	        "name": "Spear at Folsom",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.390264, 37.789625]
	      }
	    }, {
	      "properties": {
	        "id": 50,
	        "name": "Harry Bridges Plaza (Ferry Building)",
	        "places": 23,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.394203, 37.795392]
	      }
	    }, {
	      "properties": {
	        "id": 51,
	        "name": "Embarcadero at Folsom",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.391034, 37.791464]
	      }
	    }, {
	      "properties": {
	        "id": 53,
	        "name": "Powell Street BART",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.408433, 37.783871]
	      }
	    }, {
	      "properties": {
	        "id": 54,
	        "name": "Embarcadero at Bryant",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.388013, 37.787152]
	      }
	    }, {
	      "properties": {
	        "id": 55,
	        "name": "Temporary Transbay Terminal (Howard at Beale)",
	        "places": 23,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.394643, 37.789756]
	      }
	    }, {
	      "properties": {
	        "id": 56,
	        "name": "Beale at Market",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.397086, 37.792251]
	      }
	    }, {
	      "properties": {
	        "id": 57,
	        "name": "5th at Howard",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.405127, 37.781752]
	      }
	    }, {
	      "properties": {
	        "id": 58,
	        "name": "San Francisco City Hall",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.418235, 37.77865]
	      }
	    }, {
	      "properties": {
	        "id": 59,
	        "name": "Golden Gate at Polk",
	        "places": 23,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.418603, 37.781332]
	      }
	    }, {
	      "properties": {
	        "id": 60,
	        "name": "Embarcadero at Sansome",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.403234, 37.80477]
	      }
	    }, {
	      "properties": {
	        "id": 61,
	        "name": "2nd at Townsend",
	        "places": 27,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.390288, 37.780526]
	      }
	    }, {
	      "properties": {
	        "id": 62,
	        "name": "2nd at Folsom",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.396236, 37.785299]
	      }
	    }, {
	      "properties": {
	        "id": 63,
	        "name": "Howard at 2nd",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.398108, 37.786978]
	      }
	    }, {
	      "properties": {
	        "id": 64,
	        "name": "2nd at South Park",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.392738, 37.782259]
	      }
	    }, {
	      "properties": {
	        "id": 65,
	        "name": "Townsend at 7th",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.402717, 37.771058]
	      }
	    }, {
	      "properties": {
	        "id": 66,
	        "name": "South Van Ness at Market",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.418954, 37.774814]
	      }
	    }, {
	      "properties": {
	        "id": 67,
	        "name": "Market at 10th",
	        "places": 27,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.417385, 37.776619]
	      }
	    }, {
	      "properties": {
	        "id": 68,
	        "name": "Yerba Buena Center of the Arts (3rd @ Howard)",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.401014, 37.784878]
	      }
	    }, {
	      "properties": {
	        "id": 69,
	        "name": "San Francisco Caltrain 2 (330 Townsend)",
	        "places": 23,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.39607, 37.776377]
	      }
	    }, {
	      "properties": {
	        "id": 70,
	        "name": "San Francisco Caltrain (Townsend at 4th)",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.395569, 37.776317]
	      }
	    }, {
	      "properties": {
	        "id": 71,
	        "name": "Powell at Post (Union Square)",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.408499, 37.788446]
	      }
	    }, {
	      "properties": {
	        "id": 72,
	        "name": "Civic Center BART (7th at Market)",
	        "places": 23,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.412919, 37.780356]
	      }
	    }, {
	      "properties": {
	        "id": 73,
	        "name": "Grant Avenue at Columbus Avenue",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.407245, 37.798522]
	      }
	    }, {
	      "properties": {
	        "id": 74,
	        "name": "Steuart at Market",
	        "places": 23,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.394434, 37.794139]
	      }
	    }, {
	      "properties": {
	        "id": 75,
	        "name": "Mechanics Plaza (Market at Battery)",
	        "places": 9,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "type": "Point",
	        "coordinates": [-122.3990511, 37.7913]
	      }
	    }, {
	      "properties": {
	        "id": 76,
	        "name": "Market at 4th",
	        "places": 19,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "coordinates": [-122.404966, 37.786305],
	        "type": "Point"
	      }
	    }, {
	      "properties": {
	        "id": 77,
	        "name": "Market at Sansome",
	        "places": 27,
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "coordinates": [-122.400811, 37.789625],
	        "type": "Point"
	      }
	    }, {
	      "properties": {
	        "id": 82,
	        "name": "Broadway St at Battery St",
	        "places": 15, 
	        "activity": [
	        ]
	      },
	      "geometry": {
	        "coordinates": [-122.400862, 37.798541],
	        "type": "Point"
	      }
	    }]
	  };
	};

	module.exports = Docks;

/***/ },
/* 232 */
/***/ function(module, exports) {

	/** @jsx React.DOM */

/***/ }
/******/ ]);